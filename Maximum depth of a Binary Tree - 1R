// MAXIMUM DEPTH OR HEIGHT is same. We just use a different jargon.

Height of a tree - No of edges in the longest path from the root node to the leaf node.
Height of a node - No of edges in the longest path from that particular node to the leaf node.
Height of a tree with one node is 0.


DEPTH of a node - No of edges in the path from the root to that node. 


class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null){
            return 0;
        }
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        return Math.max(right,left)+1; //+1 here because description says no of nodes(steps). If it was edges then ther would no +1.
        
    }
}
-----------------------------------------------------------------------------------------
// One Line
class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null){
            return 0;
        }
    return Math.max(maxDepth(root.left), maxDepth(root.right)) +1;
        
    }
}


Time complexity : we visit each node exactly once, thus the time complexity is \mathcal{O}(N)O(N), 
where NN is the number of nodes.

Space complexity : in the worst case, the tree is completely unbalanced, e.g. each node has only left child node, 
the recursion call would occur NN times (the height of the tree), therefore the storage to keep the call stack would be 
\mathcal{O}(N)O(N). But in the best case (the tree is completely balanced), the height of the tree would be \log(N)log(N). 
Therefore, the space complexity in this case would be \mathcal{O}(\log(N))O(log(N)).
-----------------------------------------------------------------------------------------
// See these Later. Involves iterative, BFS and DFS which I'm not aware of now.
https://leetcode.com/problems/maximum-depth-of-binary-tree/discuss/34195/Two-Java-Iterative-solution-DFS-and-BFS

-----------------------------------------------------------------------------------------

https://leetcode.com/problems/maximum-depth-of-binary-tree/discuss/34238/Clean-Java-Iterative-Solution

-----------------------------------------------------------------------------------------
