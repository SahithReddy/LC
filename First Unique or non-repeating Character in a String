/*

Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.

Note: You may assume the string contains only lowercase English letters.
*/
------------------------------------------------------------

/* ALGORITHM:
It takes O(n) and goes through the string twice:

1. Get the frequency of each character.
2. Get the first character that has a frequency of one.

Actually the code below passes all the cases. However, we could change the size of the frequency array to 256 to store other kinds of characters.

*/
-------------------------------------------------------
//Video: https://www.youtube.com/watch?v=St47WCbQa9M&list=PLi9RQVmJD2fZgRyOunLyt94uVbJL43pZ_

// Nice and easy one solution
https://leetcode.com/problems/first-unique-character-in-a-string/discuss/86348/Java-7-lines-solution-29ms

class Solution {
    public int firstUniqChar(String s) {
        int[] freq = new int[26];
        
        // count character to how often it appears
        for(int i=0; i< s.length(); i++){
            freq[s.charAt(i)-'a']++;
        }
        
        // find the index
        for(int i=0; i< s.length(); i++){
            if(freq[s.charAt(i)-'a']==1)
                return i;
        }
        return -1;
    }
}

/*
Time complexity : O(N) since we go through the string of length N two times.
space complexity is constant O(26) ~ O(1) for any length of string
*/
---------------IMPROVEMENT---ONE PASS ON STRING-------------------------
/*
Good O(n) solution, but it still can be improved, since you read through the whole array twice. Take an example of DNA sequence: there could be millions of letters long with just 4 alphabet letter. What happened if the non-repeated letter is at the end of DNA sequence? This would dramatically increase your running time since we need to scan it again.

Or Maintain two Maps Map<Character, Integer> feq && Map<Character, Integer> index. freq Map has limited size of keys(26 here for small alphabets, or 128 or 256). So it is an improvement.

if you could record the first appearance of every char, you don't have to check the string twice.
table[256][2] [0] for first appearance, [1] for frequency. the second time you only have to check 256 numbers.
*/

class Solution {
    public int firstUniqChar(String s) {
        Map<Character, Integer> feq = new HashMap<>();
        Map<Character, Integer> index = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            feq.put(s.charAt(i), feq.getOrDefault(s.charAt(i), 0) + 1);
            index.put(s.charAt(i), i);
        }
        
        int min = Integer.MAX_VALUE;     
        for (char c : feq.keySet()) {
            if (feq.get(c) == 1) {
                min = Math.min(min, index.get(c));
            }
        }
        
        return min == Integer.MAX_VALUE ? -1 : min;
    }
}
/*
Time complexity : O(N) since we go through the string of length N one times.
Space complexity is constant O(26) ~ O(1) for any length of string. 26 characters here
*/
--------------STREAM---LINKED HASHMAP-------------
/*
Another idea is to use LinkedHashMap instead of HashMap for 'feq' and instead of index.put(s.charAt(i), i), we can do index.putIfAbsent(s.charAt(i), i). Since LinkedHashMap maintains insertion order, we could return from the function the first time we get a char with frequency of 1

This is a nice solution to one possible follow up, which is if the chars are coming in as a data stream.

LinkedHashMap will not be the fastest answer for this question because the input characters are just from 'a' to 'z', but in other situations it might be faster than two pass solutions.when input is in streams

If the input is a data stream, you cannot know where is the end of the stream, in fact the input may never end. Imagine you are an app developer, every second there might be millions of users clicking a button in your app and it will not suddenly stop, so in such case, you are not able to precalculate the distribution of characters in the first pass, the apply the distribution in the second pass. You must do the calculation along with the stream.
*/

public int firstUniqChar(String s) {
        Map<Character, Integer> map = new LinkedHashMap<>();
        Set<Character> set = new HashSet<>();
        for (int i = 0; i < s.length(); i++) {
            if (set.contains(s.charAt(i))) {
                if (map.get(s.charAt(i)) != null) {
                    map.remove(s.charAt(i));
                }
            } else {
                map.put(s.charAt(i), i);
                set.add(s.charAt(i));
            }
        }
        return map.size() == 0 ? -1 : map.entrySet().iterator().next().getValue();
    }
    
/*
Time complexity : O(N) since we go through the string of length N one times. ONE PASS
Space complexity is constant O(26) ~ O(1) for any length of string. 26 characters here
*/
-----------------------------------------
/*

map.entrySet().iterator().next().getValue(); Can you please explain me the meaning of this statement ?

Let's say after the for loop, map = {e:1 ,d:5, f:8} for example. Here map.size > 0, so map.entrySet().iterator().next().getValue() will be executed.
map.entrySet() will return a Set of Map.Entry<K, V> objects ( Set<Map.Entry<K, V>>), like this {<e,1>, <d,5>, <f,8>} where each element is a Map.Entry object. If you want to loop a set, you use an iterator, that is why the map.entrySet().iterator() is used. Then the map.entrySet().iterator().next()
will return the next Map.Entry object added to the map by starting at the first one (LinkedHashMap guarantee that). In the above example, <e,1> entry will be return (he only need the first unique). When you have a Map.Entry<K, V> object, you can call getKey() to return the key or getValue() to return the value of that entry. Here, he wanted the position, so he called getValue() and that lead to:
map.entrySet().iterator().next().getValue(). In the example, 1 will be returned.
*/
