/*

Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

Example:

Given array nums = [-1, 2, 1, -4], and target = 1.

The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

*/

/*

Algorithm:
Similar to 3 Sum problem, use 3 pointers to point current element, next element and the last element. If the sum is less than target, it means we have to add a larger element so next element move to the next. If the sum is greater, it means we have to add a smaller element so last element move to the second last element. Keep doing this until the end. Each time compare the difference between sum and target, if it is less than minimum difference so far, then replace result with it, otherwise keep iterating.

*/


public int threeSumClosest(int[] nums, int target) {
    Arrays.sort(nums);
    int sum = nums[0] + nums[1] + nums[nums.length - 1]; // it could be any 3 elements. You could sort the array first, and then choose the first 3 if that makes more sense
    int closestSum = sum;
    
    // This condition not needed but you can write it just for the safety
    if (num.length <= 3) {
        for (int i: num) {
            sum += i;
        }
        return sum;
    }
    
    for(int i = 0; i < nums.length - 2; i++){
        if(i==0 || nums[i]!=nums[i-1]){
            int left = i + 1, right = nums.length - 1;
            while(left < right){
                sum = nums[left] + nums[right] + nums[i];
                if(sum < target){
                    //move closer to target sum.
                    while(left<right && nums[left] == nums[left+1]){
                        left++;
                    }
                    left++;
                }else if(sum > target){
                    //move closer to target sum.
                    while(left<right && nums[right] == nums[right-1]){
                        right--;
                    }
                    right--;
                }else{
                    return sum;
                }
                //update the closest sum if needed.
                if(Math.abs(target - sum) < Math.abs(target - closestSum)){
                    closestSum = sum;
                }
            }
        }

    }
    return closestSum;
}


// Time Complexity: O(N^2), N is the no of element sin the array.
// Space Complexity: O(1).
