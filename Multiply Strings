/* 43 QUESTION

Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"
Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"
Note:

The length of both num1 and num2 is < 110.
Both num1 and num2 contain only digits 0-9.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.
You must not use any built-in BigInteger library or convert the inputs to integer directly.
*/
------------------------------------------------------------
/* ALGORITHM: Mind Blowing one using our basic maths multiplication. To be more interview realistic try below solution

Remember how we do multiplication?

Start from right to left, perform multiplication on every pair of digits, and add them together. Let's draw the process!

Thing to note:
1. The product of two numbers cannot exceed the sum of the two lengths. (e.g. 99 * 99 cannot be five digit)
    
        1 2 3 | s1[0,1,2] index i
          4 5 |   s2[0,1] index j
--------------
          1 5 | [2+1, (2+1) +1]=[3,4]
        1 0   | [1+1, (1+1) +1]=[2,3]
      0 5     | [0+1, (0+1) +1]=[1,2]
--------------
        1 2   | [2+0, (2+0) +1]=[2,3]
      0 8     | [1+0, (1+0) +1]=[1,2]
    0 4       | [0+0, (0+0) +1]=[0,0]
--------------
    0 5 5 3 5 
Prd[0,1,2,3,4]

From the following draft, we can immediately conclude:

num1[i] * num2[j]` will be placed at indices `[i + j`, `i + j + 1]`

*/
// Dry Test Case: 99*99
public String multiply(String num1, String num2) {
    int m = num1.length(), n = num2.length();
    int[] pos = new int[m + n];
   
    for(int i = m - 1; i >= 0; i--) {
        for(int j = n - 1; j >= 0; j--) {
            int mul = (num1.charAt(i) - '0') * (num2.charAt(j) - '0'); 
            int p1 = i + j, p2 = i + j + 1;
            int sum = mul + pos[p2];

            pos[p1] += sum / 10;
            pos[p2] = (sum) % 10;
        }
    }  
    
    StringBuilder sb = new StringBuilder();
    for(int p : pos) if(!(sb.length() == 0 && p == 0)) sb.append(p);
    return sb.length() == 0 ? "0" : sb.toString();
}

/* COMPLEXITY:
Time complexity is O(m*n)
Space complexity would be O(m+n).
*/
---------------------------------------------------------------------------------
/* ALGORITHM: INTUITIVE and possible in interview

If we break it into steps, it will have the following steps. 
1. compute products from each pair of digits from num1 and num2. 
2. carry each element over. 
3. output the solution.

Things to note:
1. The product of two numbers cannot exceed the sum of the two lengths. (e.g. 99 * 99 cannot be five digit)

2.  int d1 = num1.charAt(i) - '0';
    int d2 = num2.charAt(j) - '0';
    products[i + j + 1] += d1 * d2;
*/

public class Solution {
    public String multiply(String num1, String num2) {
        int n1 = num1.length(), n2 = num2.length();
        int[] products = new int[n1 + n2];
        // scan from back to head and store in reverse order in nums.
        for (int i = n1 - 1; i >= 0; i--) {
            for (int j = n2 - 1; j >= 0; j--) {
                int d1 = num1.charAt(i) - '0';
                int d2 = num2.charAt(j) - '0';
                products[i + j + 1] += d1 * d2;
            }
        }
        /* Do mod and divide to update to only 1 digit. 
        Just like how we get in our regular multiplication
        right digit(%) down and left digit(/) as carry
        */
        int carry = 0;
        for (int i = products.length - 1; i >= 0; i--) {
            int tmp = (products[i] + carry) % 10;
            carry = (products[i] + carry) / 10;
            products[i] = tmp;
        }
        StringBuilder sb = new StringBuilder();
        // Store in normal order.
        for (int num : products) sb.append(num);
        // Do not append leading 0s
        while (sb.length() != 0 && sb.charAt(0) == '0') sb.deleteCharAt(0);
        return sb.length() == 0 ? "0" : sb.toString();
    }
}
/* COMPLEXITY: SAME AS ABOVE
Time complexity is O(m*n)
Space complexity would be O(m+n).
*/
-------------------------------------------------------------------------------------
// Solves for carries along the way instead of having an extra loop to do so.

public class Solution {
        public String multiply(String num1, String num2) {
            int[] arr = new int[num1.length()+num2.length()];
            for(int i = num1.length()-1; i >= 0; i--) {
                int carry = 0;
                for(int j = num2.length()-1; j >= 0; j--) {
                    arr[i+j+1] += carry + (num1.charAt(i)-'0') * (num2.charAt(j)-'0');
                    carry = arr[i+j+1] / 10;
                    arr[i+j+1] %= 10;
                }
                arr[i] = carry;
            }
            StringBuilder builder = new StringBuilder();
            int i = 0;
            while(i < arr.length && arr[i] == 0) i++;
            if(i >= arr.length) return "0";
            for(int j = i; j < arr.length; j++) {
                builder.append(arr[j]);
            }
            return builder.toString();
        }
    }


