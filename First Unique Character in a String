/*

Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.

*/


//Video: https://www.youtube.com/watch?v=St47WCbQa9M&list=PLi9RQVmJD2fZgRyOunLyt94uVbJL43pZ_

// Nice and easy one solution
https://leetcode.com/problems/first-unique-character-in-a-string/discuss/86348/Java-7-lines-solution-29ms

class Solution {
    public int firstUniqChar(String s) {
        int[] freq = new int[26];
        
        // count character to how often it appears
        for(int i=0; i< s.length(); i++){
            freq[s.charAt(i)-'a']++;
        }
        
        // find the index
        for(int i=0; i< s.length(); i++){
            if(freq[s.charAt(i)-'a']==1)
                return i;
        }
        return -1;
    }
}

Time complexity : O(N) since we go through the string of length N two times.
space complexity is constant O(26) ~ O(1) for any length of string
