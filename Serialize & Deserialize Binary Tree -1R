    /*
  DFS for serializing  and QUEUE for deserializing using recursion
  The idea is simple: print the tree in pre-order traversal and use "#" to denote null node and split node with ",". We can use a StringBuilder for building the string on the fly. For deserializing, we use a Queue to store the pre-order traversal and since we have "#" as null node, we know exactly how to where to end building subtress.

  */
    public String serialize(TreeNode root) {
        return serial(new StringBuilder(), root).toString();
    }
    
    // Generate preorder string
    private StringBuilder serial(StringBuilder str, TreeNode root) {
        if (root == null) return str.append("#");
        else{
        str.append(root.val).append(",");
        serial(str, root.left).append(",");
        serial(str, root.right);
        return str;
        }
    }

    public TreeNode deserialize(String data) {
        return deserial(new LinkedList<>(Arrays.asList(data.split(","))));
    }
    
    // Use queue to simplify position move
    private TreeNode deserial(Queue<String> q) {
        String val = q.poll();
        if ("#".equals(val)) return null;
        else{
        TreeNode root = new TreeNode(Integer.valueOf(val));
        root.left = deserial(q);
        root.right = deserial(q);
        return root;
        }
    }

// Time: O(N), Space: O(width) where width is the max width of the tree
-----------------------------------------------------------------------------------------------------------------
/*
This problem solved in all 3 ways: Recursive DFS as above, Iterative DFS and Iterative BFS(queue)

https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/74260/Recursive-DFS-Iterative-DFS-and-BFS
-----------------------------------------------------------------------------------------------------------------
If you want only BFS refer below:
https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/74264/Short-and-straight-forward-BFS-Java-code-with-a-queue
*/
