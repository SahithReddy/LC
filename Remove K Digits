/* QUESTION:  402. Remove K Digits

Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:
The length of num is less than 10002 and will be ≥ k.
The given num does not contain any leading zero.

Example 1:
Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:
Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:
Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
*/
---------------------------------
/* ALGORITHM: STACK
One could implement the above algorithm with the help of the stack data structure. We use a stack to hold the digits that we would keep at the end.

Iterating the sequence of digits from left to right, the main loop can be broken down as follows:

1). for each digit, if the digit is less than the top of the stack, i.e. the left neighbor of the digit, then we pop the stack, i.e. removing the left neighbor. At the end, we push the digit to the stack.

2). we repeat the above step (1) until any of the conditions does not hold any more, e.g. the stack is empty (no more digits left). or in another case, we have already removed k digits, therefore mission accomplished.

Given the input sequence [1, 2, 3, 4, 5, 2, 6, 4] and the number of digits to remove k=4, the rule is triggered for the first time at the digit of 5. Once we remove the digit 5, the rule is triggered again at the digit 4 till the digit 3. And then later, at the digit 6, the rule is triggered as well.

Out of the above main loop, we need to handle some corner cases to make the solution more complete.

case 1). when we get out of the main loop, we removed m digits, which is less than asked, i.e.(m < k). In the extreme case, we would not remove any digit for the monotonic increasing sequence in the loop, i.e. m==0. In this case, we just need to remove the additional k-m digits from the tail of the sequence.
EX: 12345 where k =3

case 2). once we remove all the k digits from the sequence, there could be some leading zeros left. To format the final number, we need to strip off those leading zeros.

case 3). we might end up removing all numbers from the sequence. In this case, we should return zero, instead of empty string.
--------------------------------------------
==>The way to solve this question is using a stack.
We initally push an element into tthe stack(non zero).
When we encounter the next element we check if it is smaller than the element present in the stack if so pop the element from
the stack and push this element.Why? because he current element has the cacpacity of producting a smaller number as compared to the latter.But we have to limit the pops upto k(cuz only k deletions allowed).

Let us use an example to understand it better:-
num = "1432219", k = 3
we first push 1 into the stack
           |         |
           |         |
           |         |   <-----Stack representation
           |   1     |
           |_________|

now we encounter 4 we check if 4 is lesser than 1 as it is not we push into the stack.

           |         |
           |         |
           |         |   <-----Stack representation
           |   4     |
           |___1_____|

then 3 comes as it is lesser than the top of the stack we pop 4 out and we push 3 in while simultaneously decrementing k . 

           |         |
           |         |
           |         |   <-----Stack representation  k=2
           |   3     |
           |___1_____|

2 beats 3 so 3 is popped out and 2 is pushed and k is decremented.

           |         |
           |         |
           |         |   <-----Stack representation  k=1
           |   2     |
           |___1_____|
2 doesnt beat 2 so it is pushed into the stack

           |         |
           |         |
           |   2     |   <-----Stack representation
           |   2     |
           |___1_____|
1 beats 2 so 2 is popped out and 1 is pushed in.

           |         |
           |         |
           |   1     |   <-----Stack representation   k=0
           |   2     |
           |___1_____|    
now we have the push whatever number is left as we have used up all our deletions

           |         |
           |   9     |
           |   1     |   <-----Stack representation
           |   2     |
           |___1_____|

           answer:-1219.

==>We will take another example to make sure our algorithm doesnt have leading 0s.

num = "10200", k = 1

           |         |
           |         |
           |         |   <-----Stack representation
           |   1     |
           |_________|
0 beats 1 but we should push 0 as this will cause leading zeros.
if (ans.size()==0 and c=='0') it wouldnt push.

but we wedelete 1 as we have to fulfil the condition of the number of deleteions.

           |         |
           |         |
           |         |   <-----Stack representation   k=0
           |   2     |
           |_________|

           push  rest of the elements by making use of if(ans.size()||c!='0')push(element).



           |         |
           |   0     |
           |   0     |   <-----Stack representation   k=0
           |   2     |
           |_________|


           answer is 200
*/

class Solution {
    public String removeKdigits(String num, int k) {        
        if(k >= num.length()) return "0";

        Deque<Character> stack = new ArrayDeque<>();
        for(char c : num.toCharArray()) {
            //whenever meet a digit which is less than the previous digit, discard the previous one
            while(k > 0 && !stack.isEmpty() && stack.peekLast() > c) {
                stack.removeLast();
                k--;
            }
            stack.addLast(c);
        }
        
        // corner case like "1111"
        while(k>0) {
            stack.removeLast();
            k--;
        }
        
        // Remove all zeros from the front of the stack and then if stack is empty, return "0"
        while(!stack.isEmpty() && stack.peekFirst()== '0') stack.removeFirst();
        if(stack.isEmpty()) return "0";

        // build the number from the stack
        StringBuilder sb = new StringBuilder();
        while(!stack.isEmpty()) {
            sb.append(stack.removeFirst());
        }
        return sb.toString();
    }
}

/*. Complexity Analysis:
Time complexity : O(N). Although there are nested loops, the inner loop is bounded to be run at most k times globally. Together with the outer loop, we have the exact (N + k) number of operations. Since 0 < k≤ N, the time complexity of the main loop is bounded within 2N. For the logic outside the main loop, it is clear to see that their time complexity is O(N). As a result, the overall time complexity of the algorithm is O(N).

Space complexity : O(N). We have a stack which would hold all the input digits in the worst case.
*/
