Given an array of n elements which contains elements from 0 to n-1, with any of these numbers appearing any number of times. 
Find these repeating numbers in O(n) and using only constant memory space.
For example, let n be 7 and array be {1, 2, 3, 1, 3, 6, 6}, the answer should be 1, 3 and 6.
// https://www.geeksforgeeks.org/find-duplicates-in-on-time-and-constant-extra-space/

Algorithm:

traverse the list for i= 0 to n-1 elements
{
  check for sign of A[abs(A[i])] ;
  if positive then
     make it negative by   A[abs(A[i])]=-A[abs(A[i])];
  else  // i.e., A[abs(A[i])] is negative
     this   element (ith element of list) is a repetition
}

Code:
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> result = new ArrayList();
        for(int i : nums){
            int index = Math.abs(i) -1;
            if(nums[index]<0){
                result.add(index+1); //we can optimize the code a little bit. Because index can never be negative, we don't have to use Math.abs(index + 1)
            }
            else nums[index] = -nums[index];
        } return result;
    }
}
