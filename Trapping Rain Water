// Refer here:  https://leetcode.com/problems/trapping-rain-water/discuss/17391/Share-my-short-solution.
/*
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
*/

// Keep track of the maximum height from both forward directions backward directions, call them leftmax and rightmax.

Solution {
    public int trap(int[] height) {
    if (height == null || height.length == 0) {
            return 0;
        }
        int area=0;
        
        int a = 0;
        int b = height.length-1;
        
        // leftMax represents the highest bar from left
        int leftMax = height[a];
        
        // rightMax represents the highest bar from right
        int rightMax = height[b];
        
        // use two pointers to scan the entire array until they meet with each other
        while(a<=b){
            leftMax = Math.max(leftMax,height[a]);
            rightMax = Math.max(rightMax, height[b]);
            
            //how much can current position trap depends on the shorter bar 
            if(leftMax<rightMax){
                //DO NOT FORGET to subtract bar height of current position
                area+=(leftMax - height[a]); // leftmax is smaller than rightmax, so the (leftmax-height[a]) water can be stored
                a++;
            }
            else{
                area+=(rightMax - height[b]); // leftmax is smaller than rightmax, so the (leftmax-height[a]) water can be stored
                b--;
            }
        } return area;
    } 
}

// Time complexity: O(n). Single iteration of O(n).
// Space complexity: O(1) extra space. Only constant space required for left, right, left_max and right_max.
