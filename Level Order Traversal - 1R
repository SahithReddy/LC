/*
QUESTION: 
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

*/
---------------------------------------------------------------------------------------
/*
ALGORITHM: BFS Iterative

Let's keep nodes of each tree level in the queue structure, which typically orders elements in a FIFO (first-in-first-out) manner. The zero level contains only one node root. 

The algorithm is simple :

A. Initiate queue with a root and start from the level number 0 : level = 0.

B. While queue is not empty :

1. Start the current level by adding an empty list into output structure levels.

2. Compute how many elements should be on the current level : it's a queue length.

3. Pop out all these elements from the queue and add them into the current level.

4. Push their child nodes into the queue for the next level.

5. Go to the next level level++.

*/

class Solution {
  public List<List<Integer>> levelOrder(TreeNode root) {
    List<List<Integer>> levels = new ArrayList<List<Integer>>();
    if (root == null) return levels;

    Queue<TreeNode> queue = new LinkedList<TreeNode>();
    queue.add(root);
    int level = 0;
    while ( !queue.isEmpty() ) {
      // start the current level
      levels.add(new ArrayList<Integer>());

      // number of elements in the current level
      int level_length = queue.size();
      for(int i = 0; i < level_length; ++i) {
        TreeNode node = queue.remove();

        // fulfill the current level
        levels.get(level).add(node.val);

        // add child nodes of the current level
        // in the queue for the next level
        if (node.left != null) queue.add(node.left);
        if (node.right != null) queue.add(node.right);
      }
      // go to next level
      level++;
    }
    return levels;
  }
}

/*
Time complexity : O(N) since each node is processed exactly once.

Space complexity : O(N) to keep the output structure which contains N node values.

https://www.youtube.com/watch?v=XZnWETlZZ14

LISTEN TO THE EXPLANATION CAREFULLY
*/
---------------------------------------------------------------------------------------

/*
ALGORITHM: DFS RECURSIVE
The simplest way to solve the problem is to use a recursion. Let's first ensure that the tree is not empty, and then call recursively the function helper(node, level), which takes the current node and its level as the arguments.

This function does the following :

1. The output list here is called levels, and hence the current level is just a length of this list len(levels). Compare the number of a current level len(levels) with a node level level. If you're still on the previous level - add the new one by adding a new list into levels.

2. Append the node value to the last list in levels and then look at left and right child.

3. Process recursively child nodes if they are not None : helper(node.left / node.right, level + 1).

Such a brilliant solution! To be more specific than stating it uses DFS, I would like to say that it implements pre-order traversal to realize level-order traversal. Each time we add root.val into the list, and then look at left and right child.

*/

public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        levelHelper(res, root, 0);
        return res;
    }
    
    public void levelHelper(List<List<Integer>> res, TreeNode root, int height) {
        if (root == null) return;
        if (height == res.size()) {
            res.add(new LinkedList<Integer>());
        }
        res.get(height).add(root.val);
        levelHelper(res, root.left, height+1);
        levelHelper(res, root.right, height+1);
 }

/*
Time complexity : O(N) since each node is processed exactly once.

Space complexity : O(N) to keep the output structure which contains N node values.

The BELOW LINK HAS SOLUTIONS FOR 7 MORE SIMILAR PROBLEMS LIKE THIS FOLLOWING THE SAME PATTERN. PLEASE HAVE A LOOK, IT WILL COBVER MANY.
https://leetcode.com/problems/binary-tree-level-order-traversal/discuss/114449/A-general-approach-to-level-order-traversal-questions-in-Java
*/

---------------------------------------------------------------------------------------
