// Variation of pattern shown here

https://leetcode.com/problems/subsets/discuss/27281/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)

/* QUESTION:
Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Example 2:
Input: nums = [0]
Output: [[],[0]]
 

Constraints:
1 <= nums.length <= 10
-10 <= nums[i] <= 10
*/
--------------------------------------------------------------
/* ALGORITHM:
Very Similar to Subsets. Refert that. The only change is input array consists of duplicates
*/ 
class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> subsets = new ArrayList<>();
        Arrays.sort(nums);
        allSubsetsWithDup(0, nums, new ArrayList<>(), subsets);
        return subsets;
    }
        
        private void allSubsetsWithDup(int index, int[] nums, List<Integer> current, List<List<Integer>> subsets){
            subsets.add(new ArrayList<>(current));
            for(int i = index; i<nums.length; i++){
                if(i>index && nums[i]==nums[i-1]) continue; // Skipping Duplicates
                current.add(nums[i]);
                allSubsetsWithDup(i+1, nums, current, subsets);
                current.remove(current.size()-1);
                
            }
        }
    
}
--------------------------------------------------------
/* COMPLEXITY:

T=O(2^n) as total 2^n possible subsets can be there for n items.
S=O(n+n)=O(n) is the (maximum depth of recursion tree+ 'num' list space)

The recursive function is called 2^n times. Because we have 2 choices at each iteration in nums array. Either we include 
nums[i] in the current set, or we exclude nums[i]. This array nums is of size n = number of elements in nums.


We need to create a copy of the current set because we reuse the original one to build all the valid subsets. This copy 
costs O(n) and it is performed at each call of the recursive function, which is called 2^n times as mentioned in above. 
So total time complexity is O(n x 2^n)

For space complexity:

For recursion: max depth the call stack is going to reach at any time is length of nums, n.

For output: we're creating 2^n subsets where the average set size is n/2 (for each A[i], half of the subsets will 
include A[i], half won't) = n/2 * 2^n = O(n * 2^n). Or in a different way, the total output size is going to be the 
summation of the binomial coefficients, the total number of r-combinations we can make at each r size * r elements 
from 0..n which evaluates to n*2^n. More informally, at size 0, how many empty sets can we make from n elements, 
then at size 1 how many subsets of 1 elements can we make from n elements, at size 2, how many subsets of 2 elements 
can we make ... at size n, etc.

So total is call stack of n + output of n2^n = O(n2^n). If we don't include the output (eg if just asked to print in an 
interview) then just O(n) of course.

*/

/*
Image of the problem explanation:

https://leetcode.com/problems/subsets/discuss/27281/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)/139968

https://leetcode.com/problems/subsets/discuss/27281/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)/26331
*/
---------------------------------------------------------------------------------------

/*ALGORITHM: ITERATIVE

To solve this problem, it is helpful to first think how many subsets are there. If there is no duplicate element, 
the answer is simply 2^n, where n is the number of elements. This is because you have two choices for each element, 
either putting it into the subset or not. So all subsets for this no-duplicate set can be easily constructed:
num of subset

(1 to 2^0) empty set is the first subset
(2^0+1 to 2^1) add the first element into subset from (1)
(2^1+1 to 2^2) add the second element into subset (1 to 2^1)
(2^2+1 to 2^3) add the third element into subset (1 to 2^2)
....
(2^(n-1)+1 to 2^n) add the nth element into subset(1 to 2^(n-1))
Then how many subsets are there if there are duplicate elements? We can treat duplicate element as a spacial element. 
For example, if we have duplicate elements (5, 5), instead of treating them as two elements that are duplicate, we can 
treat it as one special element 5, but this element has more than two choices: you can either NOT put it into the subset, 
or put ONE 5 into the subset, or put TWO 5s into the subset. Therefore, we are given an array (a1, a2, a3, ..., an) with 
each of them appearing (k1, k2, k3, ..., kn) times, the number of subset is (k1+1)(k2+1)...(kn+1). We can easily see how 
to write down all the subsets similar to the approach above.
*/



public List<List<Integer>> subsetsWithDup(int[] num) {
  Arrays.sort(num);
  List<List<Integer>> ret = new ArrayList<>();
  ret.add(new ArrayList<Integer>());

  int size = 0, startIndex;
  for(int i = 0; i < num.length; i++) {
    startIndex = (i >= 1 && num[i] == num[i - 1]) ? size : 0;
    size = ret.size();
    for(int j = startIndex; j < size; j++) {
      List<Integer> temp = new ArrayList<>(ret.get(j));
      temp.add(num[i]);
      ret.add(temp);
    }
  }
  return ret;
}
--------------------------------------------------------------------------------

