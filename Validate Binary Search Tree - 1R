// RECURSIVE
THE BEST AND EASY ONE

class Solution {
    public boolean isValidBST(TreeNode root) {
        return isBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
        
        public boolean isBST(TreeNode n, long min, long max){
            if(n==null) return true;
            if(n.val<=min || n.val>=max) return false;
            return isBST(n.left, min, n.val) && isBST(n.right, n.val, max);
        }
    
}

https://leetcode.com/problems/validate-binary-search-tree/discuss/32109/My-simple-Java-solution-in-3-lines

https://www.youtube.com/watch?v=MILxfAbIhrE NICE EXPLANATION
-------------------------------------------------------------------------------------------------------------------
We can use Object Integer and null pointer to avoid the corner cases (when node has value Integer.MIN_VALUE or 
Integer.MAX_VALUE ).

private boolean help(TreeNode p, Integer low, Integer high) {
    if (p == null) return true;
    return (low == null || p.val > low) && (high == null || p.val < high) && help(p.left, low, p.val) && help(p.right, p.val, high);
}

public boolean isValidBST(TreeNode root) {
    return help(root, null, null);
}
-------------------------------------------------------------------------------------------------------------------
//ITERATVE
The best solution for iterative. With this we can solve 3 more questions. Understand

https://leetcode.com/problems/validate-binary-search-tree/discuss/32112/Learn-one-iterative-inorder-traversal-apply-it-to-multiple-tree-questions-(Java-Solution)

I add another case to above: https://leetcode.com/problems/sum-of-left-leaves/

class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root==null) return true;
        Stack<TreeNode> stack = new Stack<>();
        TreeNode pre = null;
        while(root!=null || !stack.isEmpty()){
            if(root!=null){
                stack.push(root);
                root=root.left;
            } else{
            root=stack.pop();
            if(pre!=null && root.val<=pre.val) return false;
            pre=root;
            root=root.right;
            }
        } return true;
    }
}



All orders related trick to solve theroitically(freefall & cutting off leaves): https://www.youtube.com/watch?v=eL8NZ-21lqI 

https://www.youtube.com/watch?v=nzmtCFNae9k TUshar Roy Inorder Traversal explanation with diagrams

Explanation: https://www.youtube.com/watch?v=WZwNoTm_9d8 Nick White Inorder Traversal

                                             
