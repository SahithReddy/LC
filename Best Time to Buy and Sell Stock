public int maxProfit(int[] prices) { //Naive solution
        int answer = 0;
        for(int i=0; i<prices.length-1; i++){
            for(int j=i+1; j<prices.length; j++){
                    int temp_answer = prices[j]-prices[i];
                        if (temp_answer > answer)
                    answer = temp_answer;
            }
        } 
        return answer;   
 ----------------------------------------------------------------------------------------------------------
class Solution {
    public int maxProfit(int[] prices) {
        int answer=0;
        int temp_answer=0;
        for(int i=1; i<prices.length; i++){ //Kandanes algorithm(maximum subarray involving addition) - this is involving substraction
            temp_answer = Math.max(0, temp_answer += prices[i]-prices[i-1]); //this line simplified below solution
            answer = Math.max(answer, temp_answer);
        } 
        return answer;     
    }
}

Here, the logic is to calculate the difference (maxCur += prices[i] - prices[i-1]) of the original array, and find a 
contiguous subarray giving maximum profit. If the difference falls below 0, reset it to zero.

A more clear explanation on why sum of subarray works.:

Suppose we have original array:
[a0, a1, a2, a3, a4, a5, a6]

what we are given here(or we calculate ourselves) is:
[b0, b1, b2, b3, b4, b5, b6]

where,
b[i] = 0, when i == 0
b[i] = a[i] - a[i - 1], when i != 0

suppose if a2 and a6 are the points that give us the max difference (a2 < a6)
then in our given array, we need to find the sum of sub array from b3 to b6.

b3 = a3 - a2
b4 = a4 - a3
b5 = a5 - a4
b6 = a6 - a5

adding all these, all the middle terms will cancel out except two
i.e.

b3 + b4 + b5 + b6 = a6 - a2

a6 - a2 is the required solution.

so we need to find the largest sub array sum to get the most profit
------------------------------------------------------------------------------------------------------
int min = Integer.MAX_VALUE;
        int max_profit = 0;
        for(int i=0; i<prices.length; i++){
            if(prices[i]<min){
                min = prices[i];
            }
            max_profit = Math.max(max_profit, prices[i]-min);
            } 
         return answer; 
-------------------------------------------------------------------------------------------------------------------
 int min = Integer.MAX_VALUE;
        int max_profit = 0;
        for(int i=0; i<prices.length; i++){
            min = Math.min(min, prices[i]);
            max_profit = Math.max(max_profit, prices[i]-min);
        }
      return max_profit;
----------------------------------------------------------------------------------------------------------------

