public int maxProfit(int[] prices) { //Naive solution
        int answer = 0;
        for(int i=0; i<prices.length-1; i++){
            for(int j=i+1; j<prices.length; j++){
                    int temp_answer = prices[j]-prices[i];
                        if (temp_answer > answer)
                    answer = temp_answer;
            }
        } 
        return answer;   
 ----------------------------------------------------------------------------------------------------------
class Solution {
    public int maxProfit(int[] prices) {
        int answer=0;
        int temp_answer=0;
        for(int i=1; i<prices.length; i++){ //Kandanes algorithm(maximum subarray involving addition) - this is involving substraction
            temp_answer = Math.max(0, temp_answer += prices[i]-prices[i-1]); //this line simplified below solution
            answer = Math.max(answer, temp_answer);
        } 
        return answer;     
    }
}
------------------------------------------------------------------------------------------------------
int min = Integer.MAX_VALUE;
        int max_profit = 0;
        for(int i=0; i<prices.length; i++){
            if(prices[i]<min){
                min = prices[i];
            }
            max_profit = Math.max(max_profit, prices[i]-min);
            } 
         return answer; 
-------------------------------------------------------------------------------------------------------------------
 int min = Integer.MAX_VALUE;
        int max_profit = 0;
        for(int i=0; i<prices.length; i++){
            min = Math.min(min, prices[i]);
            max_profit = Math.max(max_profit, prices[i]-min);
        }
      return max_profit;
----------------------------------------------------------------------------------------------------------------

