public class Codec {

    // Encodes a list of strings to a single string.
    public String encode(List<String> strs) {
        StringBuilder sb = new StringBuilder();
        for(String s : strs){
            sb.append(s.length()).append('/').append(s);
        } return sb.toString();
        
    }

    // Decodes a single string to a list of strings. //VERY INTELLIGENT WAY
    public List<String> decode(String s) {
        List<String> result = new ArrayList<String>();
        int i=0;
        while(i< s.length()){
        int slash = s.indexOf('/',i);
        int size = Integer.valueOf(s.substring(i, slash));
        i = slash + size + 1;
        result.add(s.substring(slash+1,i));
        }
        return result;
    }
}

String indexOf(char ch, int strt ) : This method returns the index within this string of the first 
occurrence of the specified character, starting the search at the specified index or -1, if the character does not occur.

The java.lang.Integer.valueOf(String str) is an inbuilt method which is used to return an Integer object, 
holding the value of the specified String str.

Input: str = "65"
Output: 65

Input: str = "-452"
Output: 452


Excellent solution! I doubted about it as well in the beginning. It turned out it is 100% correct. 
It does not matter at all if there is any / in the string, or any combinations of number with slash. 
In fact, we can use anything to replace the /, as long as it is not a number. Just try to replace it with 'a'.

It is because the slash here is just used as a separator, between the length and the actually string.
It is act as a boundary to show where the length string ends, when the length has multiple digits. 
If we know all substring has less than 10 length, we in fact don't have to use any separator like /.

---------------------------------------------------------------------------------------------------
https://leetcode.com/problems/encode-and-decode-strings/discuss/70402/Java-with-%22escaping%22
