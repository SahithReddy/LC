/*
In "Divide Chocolate" we want to find: Maximum of minimum total sweetness(sum)
In "Split Array Largest sum" we want to find: Minimum of maximum largest sum

In both places we do binary search on target answer, the difference is subtle but the key:

In 'Divide Chocolate' when we overshoot the target, we will include that number in previous sum, as that is how we will maintain the target as the minimum number and binary search will find this optimal minimum
In "Split Array Largest sum" when we overshoot the target, we will include the number in the next sum, so we can ensure all numbers are less than target - binary search does the rest of the magic

Regarding people's questions on why the binary search target is guaranteed to be the answer is because if there is a better optimal answer binary search will keep heading to it, can prove by contradiction
*/

/* 1231. Divide Chocolate

You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array sweetness.

You want to share the chocolate with your K friends so you start cutting the chocolate bar into K+1 pieces using K cuts, each piece consists of some consecutive chunks.

Being generous, you will eat the piece with the minimum total sweetness and give the other pieces to your friends.

Find the maximum total sweetness of the piece you can get by cutting the chocolate bar optimally.

 

Example 1:
Input: sweetness = [1,2,3,4,5,6,7,8,9], K = 5
Output: 6
Explanation: You can divide the chocolate to [1,2,3], [4,5], [6], [7], [8], [9]

Example 2:
Input: sweetness = [5,6,7,8,9,1,2,3,4], K = 8
Output: 1
Explanation: There is only one way to cut the bar into 9 pieces.

Example 3:
Input: sweetness = [1,2,2,1,2,2,1,2,2], K = 2
Output: 5
Explanation: You can divide the chocolate to [1,2,2], [1,2,2], [1,2,2]
 

Constraints:
0 <= K < sweetness.length <= 10^4
1 <= sweetness[i] <= 10^5
*/

/* ALGORITHM:  BINARY SEARCH

The problem asks us to divide the chocolate in a clever way in order to 
maximize the sweetness we can get, since our friends are greedy and 
always take the sweetest chunks. In essence, it is asking for the 
maximum of the minimum sum of continuous subarrays, since we always get 
the least sweet piece, which have the least sweet chunks (minimum sum of 
continuous subarray) as compared to our friend's, and we want to find 
the maximum we can get among all the dividing strategies. 

*/

//Same as lc410, n*log(range) time, constant space
class Solution {
    public int maximizeSweetness(int[] sweetness, int K) {
        int sum = 0;
        int min = Integer.MAX_VALUE; // min = smallest value in nums; sum = sum of all value in nums
        for (int num : sweetness) {
            sum += num;
            min = Math.min(num, min);
        }
        if (K + 1 == 1) return sum;
        
        //binary search between l and r
        int l = min, r = sum;
        
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (valid(mid, sweetness, K + 1)) {
                //lower mid     
                /* 2 situations: either we successfully divide the array into m parts and the sum of each part is less than mid, or we used up all numbers before we reach m. Both of them mean that we should lower mid because we need to find the minimum one.*/
                r = mid - 1;
            } else {   // if the number of subarrays is larger than m, mid should be larger.
                l = mid + 1;
            }
        }
        return l;
    }
    public boolean valid(long target, int[] nums, int K) {
        int count = 1;
        long total = 0;
        for(int num : nums) { // add the sweet level to the total
            total += num;
            if (total > target) {
                /* when we overshoot the target, we will include that number in previous sum, as that is how we will maintain the target as the minimum number and binary search will find this optimal minimum */
                
                /* when total > target we treat the new element in the same subarray so we reset total = 0. */
                /* if the current piece has a total greater than or equal to the 
                given target, make a cut*/
                
                total = 0;
                count++;
                if (count > K) return false;
            }
        }
        return true;
    }
}


/* COMPLEXITY:
Time complexity : O(n * log(sum of array)). The binary search costs O(log(sum of array)), where sum of array is the sum of elements in nums. For each computation of F(x), the time complexity is O(n) since we only need to go through the whole array. n = sweetness.length, S = sum(sweetness).

Space complexity : O(1).
*/




