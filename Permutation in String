/* QUESTION: 567. -- SAME AS Find All Anagrams in a String

Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.


Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
 

Constraints:
The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].

*/

/* ALGORITHM: SLIDING WINDOW -- SAME AS Find All Anagrams in a String

1. Find frequency of each character in s1.
2. Now, we need to find all substrings of length s1 in s2.
    This process can be efficiently done by using sliding window technique.
	Sliding Window Technique:-
	s2 = dbcad, s1 = abc
	Take two pointers i and j. 
	Intially i and j point to starting position of string s. 
	s = d  b  c  a  d
            ^
	   i, j
	->  move j until j - i == len(p)
	s = d  b  c  a  d
            ^        ^
            i        j
	Now, the substring formed here is  dbc, 
	it is not anagram so, move to next substring.
	s = d  b  c  a  d
            ^     ^
            i     j
   Now, j at 3rd index, i at 1st index.
   3 - 1 < 3
   so, move j until j - i == len(p)
   s = d  b  c  a  d
          ^        ^
          i        j
    Now, substring formed here is bca.
	It is anagram. So, return true.
	We keep moving i and j until j reaches end of s2.
	This is how we find substring using sliding window technique.
 	and check whether it is anagram or not.
	if it is anagram, return true.
3. If you don't find anagram, then return false.

*/















