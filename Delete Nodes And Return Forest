/* 1110. Delete Nodes And Return Forest

Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest.  You may return the result in any order.

Example 1:
              1
             / \
            2   3
           /\   /\
          4  5 6  7

Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]
 

Constraints:
The number of nodes in the given tree is at most 1000.
Each node has a distinct value between 1 and 1000.
to_delete.length <= 1000
to_delete contains distinct values between 1 and 1000.

*/
--------------------------
/* ALGORITHM: RECURSION
Check for a node that is root (has no parent) and isn't deleted,
Only then when will we add it to the result.

1. if (is_root && !deleted) res.add(node)
  a. is_root: The node's parent is deleted. The node is the root node of the tree in the forest.
  b. !deleted: The node is not in the to_delete array.
2. We only need to add the root node of every tree.

*/
--------------------------
// WITH isDeleted FLAD AND GLOBAL VARIABLES

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    List<TreeNode> res = new ArrayList<>();
    Set<Integer> set = new HashSet<>();
    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        for (int i : to_delete) {
            set.add(i);
        }

        dfs(root, true);
        return res;
    }

    public TreeNode dfs(TreeNode node, boolean isRoot) {
        if (node == null) {
            return null;
        }

        boolean isDeleted = set.contains(node.val);

        if (isRoot && !isDeleted) {
            res.add(node);
        }
        node.left = dfs(node.left, isDeleted);
        node.right = dfs(node.right, isDeleted);

        return isDeleted ? null : node;
    }
}
-------------------------------------
// SAME SOLUTION WITHOUT isDeleted FLAG AND NO GLOBAL VARIABLES

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
            Set<Integer> set = new HashSet<>();
            for (int i : to_delete) set.add(i);
            List<TreeNode> res = new ArrayList<>();
            if (!set.contains(root.val)) res.add(root);
            dfs(root, set, res);
            return res;
        }

    private TreeNode dfs(TreeNode node, Set<Integer> set, List<TreeNode> res) {
        if (node == null) {
            return null;
        }
        node.left = dfs(node.left, set, res);
        node.right = dfs(node.right, set, res);
        if (set.contains(node.val)) {
            if (node.left != null) res.add(node.left);
            if (node.right != null) res.add(node.right);
            return null;
        }
        return node;
    }
}
---------------------------------

/* COMPLEXITY:
Time O(N)
Space O(H + N), where H is the height of tree.
*/
