//With Global Variables - Easier One
public class Solution {
private int lo, maxLen;

public String longestPalindrome(String s) {
	int len = s.length();
	if (len < 2)
		return s;
	
    for (int i = 0; i < len-1; i++) {
     	extendPalindrome(s, i, i);  //assume odd length, try to extend Palindrome as possible
     	extendPalindrome(s, i, i+1); //assume even length.
    }
    return s.substring(lo, lo + maxLen);
}

private void extendPalindrome(String s, int j, int k) {
	while (j >= 0 && k < s.length() && s.charAt(j) == s.charAt(k)) {
		j--;
		k++;
	}
	if (maxLen < k - j - 1) {
		lo = j + 1;
		maxLen = k - j - 1;
	}
}}
Here it is: https://leetcode.com/problems/longest-palindromic-substring/discuss/2928/Very-simple-clean-java-solution
Time - O(n^2) Space: O(1)
-------------------------------------------------------------------------------------------------------
// Without Global variables

class Solution {
    public String longestPalindrome(String s) {
        int start = 0;
        int end = 0;
        if(s==null || s.length()<1) return "";
        for(int i=0;i<s.length()-1;i++){
        int len = Math.max(expandFromCenter(s,i,i), expandFromCenter(s,i,i+1));
            System.out.println("NEW LENGTH here is: " +len);
        if(len > end-start){
              start = i - ((len-1)/2);
                end = i + (len/2);
            }
            System.out.println("START here is: " +start);
            System.out.println("END here is: " +end);
        }
        return s.substring(start,end+1);
        
    }
        
        public int expandFromCenter(String s, int j, int k){
            if(s == null || j>k) return 0;
            while(j>=0 && k<s.length() && s.charAt(j)==s.charAt(k)){
                j--;
                k++;
            }
            System.out.println("J here is: " +j);
            System.out.println("K here is: " +k);
            System.out.println("RETURN VALUE here is: " +(k-j-1));
            return k-j-1;
            
        }
    }
 Explanation: https://www.youtube.com/watch?v=y2BD4MJqV20
 
 Time - O(n^2) Space: O(1)
 -------------------------------------------------------------------------------------------------------
