//With Global Variables - Easier One
public class Solution {
private int lo, maxLen;

public String longestPalindrome(String s) {
	int len = s.length();
	if (len < 2)
		return s;
	
    for (int i = 0; i < len-1; i++) {
    	if (len - i < maxLen / 2) break; // Since this help skip the long tail in "aaaaaaaaaaaaaaaa..." test case.
     	extendPalindrome(s, i, i);  //assume odd length, try to extend Palindrome as possible
     	extendPalindrome(s, i, i+1); //assume even length.
    }
    return s.substring(lo, lo + maxLen);
}

private void extendPalindrome(String s, int j, int k) {
	while (j >= 0 && k < s.length() && s.charAt(j) == s.charAt(k)) {
		j--;
		k++;
	}
	if (maxLen < k - j - 1) {
		lo = j + 1;
		maxLen = k - j - 1;
	}
}}
Here it is: https://leetcode.com/problems/longest-palindromic-substring/discuss/2928/Very-simple-clean-java-solution
Time - O(n^2) Space: O(1)
Solution:
https://leetcode.com/problems/palindromic-substrings/discuss/105688/Very-Simple-Java-Solution-with-Detail-Explanation
-------------------------------------------------------------------------------------------------------
// Without Global variables -  This was a youtube video idea

class Solution {
    public String longestPalindrome(String s) {
        int start = 0;
        int end = 0;
        if(s==null || s.length()<1) return "";
        for(int i=0;i<s.length()-1;i++){
        int len = Math.max(expandFromCenter(s,i,i), expandFromCenter(s,i,i+1));
            System.out.println("NEW LENGTH here is: " +len);
        if(len > end-start){
              start = i - ((len-1)/2);
                end = i + (len/2);
            }
            System.out.println("START here is: " +start);
            System.out.println("END here is: " +end);
        }
        return s.substring(start,end+1);
        
    }
        
        public int expandFromCenter(String s, int j, int k){
            if(s == null || j>k) return 0;
            while(j>=0 && k<s.length() && s.charAt(j)==s.charAt(k)){
                j--;
                k++;
            }
            System.out.println("J here is: " +j);
            System.out.println("K here is: " +k);
            System.out.println("RETURN VALUE here is: " +(k-j-1));
            return k-j-1;
            
        }
    }
 Explanation: https://www.youtube.com/watch?v=y2BD4MJqV20
 
 Time - O(n^2) Space: O(1)
 -------------------------------------------------------------------------------------------------------
// DIVYA's Solution - Easy - Follow this when in no time
class Solution {
    int length = 0;
    String result = "";
    public String longestPalindrome(String s) {
        
        for(int i=0; i<s.length(); i++){
            palindrome(i,i,s);
            palindrome(i,i+1,s);
        }
        
        return result;
    }
    
    public void palindrome(int i, int j, String str){
        
        if(i<0 || i>=str.length() || j<0 || j>=str.length() || str.charAt(i) != str.charAt(j))
            return;
        
        
        if((j-i+1) >= length){
            result = str.substring(i,j+1);
            length = j-i+1;
        }
        
        palindrome(i-1,j+1,str);
        
    }
}
 -------------------------------------------------------------------------------------------------------
DP - Watch this video. This has a good basic explanation of understanding this problem in DP
https://www.youtube.com/watch?v=Fi5INvcmDos

public class Solution {
    public static String longestPalindrome(String s) {
        int n = s.length();
        String res = null;
        int palindromeStartsAt = 0, maxLen = 0;

        boolean[][] dp = new boolean[n][n];
        // dp[i][j] indicates whether substring s starting at index i and ending at j is palindrome
        
        for(int i = n-1; i >= 0; i--) { // keep increasing the possible palindrome string
            for(int j = i; j < n; j++) { // find the max palindrome within this window of (i,j)
                
                //check if substring between (i,j) is palindrome
                dp[i][j] = (s.charAt(i) == s.charAt(j)) // chars at i and j should match
                           && 
                           ( j-i < 3  // if window is less than or equal to 3, just end chars should match
                             || dp[i+1][j-1]  ); // if window is > 3, substring (i+1, j-1) should be palindrome too
                
                //update max palindrome string
                if(dp[i][j] && (j-i+1 > maxLen)) {
                    palindromeStartsAt = i;
                    maxLen = j-i+1;
                }
            }
        }
        return s.substring(palindromeStartsAt, palindromeStartsAt+maxLen);
    }
}
Time - O(n^2) Space: O(n^2)

A little explanation for why the indices in the for loops are set the way they are (I was really confused for a long time):

j must be greater than or equal i at all times. Why? i is the start index of the substring, 
j is the end index of the substring. It makes no sense for i to be greater than j. 
Visualization helps me, so if you visualize the dp 2d array, think of a diagonal that cuts from top left to bottom right. 
We are only filling the top right half of dp.

Why are we counting down for i, but counting up for j? Each sub-problem dp[i][j] depends on dp[i+1][j-1] 
(dp[i+1][j-1] must be true and s.charAt(i) must equal s.charAt(j) for dp[i][j] to be true).

All this explanations are here in below:
https://leetcode.com/problems/longest-palindromic-substring/discuss/2921/Share-my-Java-solution-using-dynamic-programming
 -------------------------------------------------------------------------------------------------------
