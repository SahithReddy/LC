// Crazy Solution:: https://leetcode.com/problems/inorder-successor-in-bst/discuss/72662/*Java*-5ms-short-code-with-explanations

// For Pictures: https://stackoverflow.com/questions/5471731/in-order-successor-in-binary-search-tree

/*
The idea is to compare root's value with p's value if root is not null, and consider the following two cases:

root.val > p.val. In this case, root can be a possible answer, so we store the root node first and call it res. 
However, we don't know if there is anymore node on root's left that is larger than p.val. So we move root to its left and check again.

root.val <= p.val. In this case, root cannot be p's inorder successor, neither can root's left child. 
So we only need to consider root's right child, thus we move root to its right and check again.

We continuously move root until exhausted. To this point, we only need to return the res in case 1.
*/

/*
 One more explanation: The inorder traversal of a BST is the nodes in ascending order. To find a successor, 
 you just need to find the smallest one that is larger than the given value since there are no duplicate values in a BST. 
 It just like the binary search in a sorted list.
 Whenever you go left the current root is the new possible successor, otherwise the it remains the same.
 */

class Solution {
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        TreeNode result = null;
        while(root!=null){
            if(root.val>p.val){
                result = root;
                root = root.left;
            } else{
                root=root.right;
            }
        } return result;
    }
}

/*
The time complexity should be O(h) where h is the depth of the result node.
Only in a balanced BST O(h) = O(log n). In the worst case h can be as large as n.
*/
 
---------------------------------------------------------------------------------------------------------------------
// In the same way, Predecesor too
class Solution {
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        TreeNode result = null;
        while(root!=null){
            if(root.val<p.val){
                result = root;
                root = root.right;
            } else{
                root=root.left;
            }
        } return result;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------

