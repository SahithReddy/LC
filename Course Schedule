// https://leetcode.com/problems/course-schedule/discuss/58669/Concise-JAVA-solutions-based-on-BFS-and-DFS-with-explanation
/*
QUESTION: 

There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.

*/


/*
ALGORITHM: 
BFS Solution: (Topological sorting)

The basic idea is to use Topological algorithm: put NODE with 0 indgree into the queue, then make indegree of NODE's successor dereasing 1. Keep the above steps with BFS.
Finally, if each node' indgree equals 0, then it is validated DAG (Directed Acyclic Graph), which means the course schedule can be finished.

ONE MORE WAY TO PUT:
This problem is equivalent to detecting a cycle in the directed graph represented by prerequisites. Both BFS and DFS can be used to solve it using the idea of topological sort. Since pair<int, int> is inconvenient for implementing graph algorithms, we first transform it to the adjacency-list representation. If course u is a prerequisite of course v, then the adjacency list of u will contain v.

BFS uses the indegrees of each node. We will first try to find a node with 0 indegree. If we fail to do so, there must be a cycle in the graph and we return false. Otherwise we set its indegree to be -1 to prevent from visiting it again and reduce the indegrees of its neighbors by 1. This process will be repeated for n (number of nodes) times.
The reason we start with a node that has indegree of 0 is because that mean the course has no dependencies
*/

public boolean canFinish(int numCourses, int[][] prerequisites) {
    if (numCourses == 0 || prerequisites.length == 0) return true;

    // Convert graph presentation from edges to indegree of adjacent list.
    int indegree[] = new int[numCourses];
    for (int i = 0; i < prerequisites.length; i++) // Indegree - how many prerequisites are needed.
        indegree[prerequisites[i][0]]++;    

    Queue<Integer> queue = new LinkedList<Integer>();
    for (int i = 0; i < numCourses; i++) 
        if (indegree[i] == 0)
            queue.add(i);

    // How many courses don't need prerequisites.
    int canFinishCount = queue.size();  
    while (!queue.isEmpty()) {
        int prerequisite = queue.remove(); // Already finished this prerequisite course.
        for (int i = 0; i < prerequisites.length; i++)  {
            if (prerequisites[i][1] == prerequisite) { 
                indegree[prerequisites[i][0]]--;
                if (indegree[prerequisites[i][0]] == 0) {
                    canFinishCount++;
                    queue.add(prerequisites[i][0]);
                }
            }
        }
    }

    return (canFinishCount == numCourses);    
}

/*
Time Complexity: O(∣E∣+∣V∣) where |V∣ is the number of courses, and ∣E∣ is the number of dependencies.

It would take us ∣E∣ time complexity to build a graph in the first step.
we would visit each vertex and each edge once and only once in the worst case, i.e.∣E∣+∣V∣.
As a result, the overall time complexity of the algorithm would be O(2⋅∣E∣+∣V∣).

Space Complexity: O(∣E∣+2⋅∣V∣), with the same denotation as in the above time complexity.

We built a graph data structure in the algorithm, which would consume ∣E∣+∣V∣ space.
In addition, we use a container to keep track of the courses that have no prerequisite, and the size of the container would be bounded by ∣V∣. 
As a result, the overall space complexity of the algorithm would be O(∣E∣+2⋅∣V∣).
*/
------------------------------------------------------------------------------------------------
Thanks! This is a little bit concise version for quick writing in interview:

    public boolean canFinish(int numCourses, int[][] pres) {
        int n=pres.length;
        if (numCourses==0||pres.length==0) return true;
        int[] indegree=new int[numCourses];
        for (int[] pre:pres){
            indegree[pre[0]]++;
        }
        Queue<Integer> queue=new LinkedList<>();
        for(int i=0;i<numCourses;i++){
            if (indegree[i]==0) queue.add(i);
        }
        int count=queue.size();
        while(!queue.isEmpty()){
            int prereq=queue.poll();
            for (int[] pre:pres){
                if (pre[1]==prereq){
                    indegree[pre[0]]--;
                    if (indegree[pre[0]]==0){
                        queue.add(pre[0]);
                        count++;
                    }
                }
            }
        }
        return count==numCourses;
    }
