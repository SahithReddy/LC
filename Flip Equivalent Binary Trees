/* 951. Flip Equivalent Binary Trees
For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.

A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.

Write a function that determines whether two binary trees are flip equivalent.  The trees are given by root nodes root1 and root2.

Example 1:
Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]
Output: true
Explanation: We flipped at nodes with values 1, 3, and 5.
 

Note:
Each tree will have at most 100 nodes.
Each value in each tree will be a unique integer in the range [0, 99].
*

/* RECURSIVE:

1. Two null trees are flip equivalent
2. A non-null and null tree are NOT flip equivalent
3. Two non-null trees with different root values are NOT flip equivalent
4. Two non-null trees are flip equivalent if
    A. The left subtree of tree1 is flip equivalent with the left subtree of tree2 and the right subtree of tree1 is flipequivalent with the right subtree of tree2 (no flip case)
                  OR
    B. The left subtree of tree1 is flipequivalent with the right subtree of tree2 and The right subtree of tree1 is flip equivalent with the left subtree of tree2(flip case)

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


class Solution {
    public boolean flipEquiv(TreeNode r1, TreeNode r2) {
        if (r1 == null || r2 == null) return r1 == r2;
        return r1.val == r2.val &&
               (flipEquiv(r1.left, r2.left) && flipEquiv(r1.right, r2.right) || 
               flipEquiv(r1.left, r2.right) && flipEquiv(r1.right, r2.left));
    }
}

/* COMPLEXITY:
Time Complexity: 
Worst case is perfect binary search tree (all same values except one leaf in one of the tree), so h = logN.
4 subproblem at each height, so time = 4^(h) = 4^(logN) (h=logN in worst case since worst case is perfect binary search tree) = 2^(2logN) = 2^(logN^2) = N^2.

However, here we are told that the numbers are unique so half of the recursive calls would fail, which makes time complexity
2 subproblem at each height, so time = 2^h = 2^logN = N.

Space Complexity: O(h) (O(N) in the worst case of skewed trees!)

*/








