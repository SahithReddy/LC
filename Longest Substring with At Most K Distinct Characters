/*
Given a string, find the length of the longest substring T that contains at most k distinct characters.

Example 1:

Input: s = "eceba", k = 2
Output: 3
Explanation: T is "ece" which its length is 3.
Example 2:

Input: s = "aa", k = 1
Output: 2
Explanation: T is "aa" which its length is 2.
*/
-------------------------
/* ALGORITHM: ALSO SEE LINKED HASHMAP SOLUTION for all O(N) solution

To solve the problem in one pass let's use here sliding window approach with two set pointers left and right serving as the window boundaries.

The idea is to set both pointers in the position 0 and then move right pointer to the right while the window contains not more than k distinct characters. If at some point we've got k + 1 distinct characters, let's move left pointer to keep not more than k + 1 distinct characters in the window.

Basically that's the algorithm : to move sliding window along the string, to keep not more than k distinct characters in the window, and to update max substring length at each step.

There is just one more question to reply - how to move the left pointer to keep only k distinct characters in the string?

Lets use an fixed array for this purpose

*/

class Solution {
public int lengthOfLongestSubstringKDistinct(String s, int k) {
    int[] count = new int[256]; // there are 256 ASCII characters in the world
    
    int l = 0; // left(l) will be behind right(r)
    int distinct = 0;
    int res = 0;
    
    // l is the leftmost starting of substring, r is the rightmost
    for (int r = 0; r < s.length(); r++) {
        if (count[s.charAt(r)] == 0) {    // if count[s.charAt(r)] == 0, we know that it is a distinct character
            distinct++;
        }
        
        //Inncrement count of the char
        count[s.charAt(r)]++;
        
        //If there are more distinct char
        //Start removing from left until Distict Chars == k
        while (distinct > k && l < s.length()) { // Sliding window
            count[s.charAt(l)]--;
            
            if (count[s.charAt(l)] == 0){ 
                distinct--;
            }
            
            l++;
        }
        res = Math.max(res, r - l + 1);
    }
    return res;
}
}

Time complexity : O(N) in the best case of k distinct characters in the string and O(Nk) in the worst case of N distinct characters in the string.

Space complexity : O(k) since additional space is used only counter with at most k + 1 elements.
---------------------------------------------------

/* LINKED HASHMAP ALGO: There is a structure which combines behind both hashmap and linked list - Linked HashMap

Approach 1 with a standard hashmap couldn't ensure O(N) time complexity always.

To have O(N) algorithm performance, one would need a structure, which provides four operations in O(1) time :

Insert the key

Get the key / Check if the key exists

Delete the key

Return the first / or the last added key/value

The first three operations in O(1) time are provided by the standard hashmap, and the forth one - by linked list.

1. Return 0 if the string is empty or k is equal to zero.
2. Set both set pointers in the beginning of the string left = 0 and right = 0 and init max substring length max_len = 1.
3. While right pointer is less than N:
    a. If the current character s[right] is already in the ordered dictionary hashmap -- delete it, to ensure that the first key in hashmap is the leftmost character.
    b. Add the current character s[right] in the ordered dictionary and move right pointer to the right.
    c. If ordered dictionary hashmap contains k + 1 distinct characters, remove the leftmost one and move the left pointer so that sliding window contains again k distinct characters only.
    d. Update max_len.
*/

class Solution {
  public int lengthOfLongestSubstringKDistinct(String s, int k) {
    int n = s.length();
    if (n*k == 0) return 0;

    // sliding window left and right pointers
    int left = 0;
    int right = 0;
    // hashmap character -> its rightmost position 
    // in the sliding window
    LinkedHashMap<Character, Integer> hashmap = new LinkedHashMap<Character, Integer>(k + 1);

    int max_len = 1;

    while (right < n) {
      Character character = s.charAt(right);
      // if character is already in the hashmap -
      // delete it, so that after insert it becomes
      // the rightmost element in the hashmap
      if (hashmap.containsKey(character))
        hashmap.remove(character);
      hashmap.put(character, right++);

      // slidewindow contains k + 1 characters
      if (hashmap.size() == k + 1) {
        // delete the leftmost character
        Map.Entry<Character, Integer> leftmost = hashmap.entrySet().iterator().next();
        hashmap.remove(leftmost.getKey());
        // move left pointer of the slidewindow
        left = leftmost.getValue() + 1;
      }

      max_len = Math.max(max_len, right - left);
    }
    return max_len;
  }
}

/*
Time complexity : O(N) since all operations with ordered dictionary : insert/get/delete/popitem (put/containsKey/remove) are done in a constant time.

Space complexity : O(k) since additional space is used only for an ordered dictionary with at most k + 1 elements.

*/
-----------------------------------------------
/* FOLLOW UP: The interviewer may say that the string is given as a steam. In this situation, we can't maintain a "left pointer" as the classical O(n) hashmap solution. In a stream you cannot do s.charAt(left)

Instead of recording each char's count, we keep track of char's last occurrence. If you consider k as constant, it is also a O(n) algorithm.

inWindow keeps track of each char in window and its last occurrence position

lastOccurrence is used to find the char in window with left most last occurrence. A better idea is to use a PriorityQueue, as it takes O(1) to getMin, However Java's PQ does not support O(logn) update a internal node, it takes O(n). TreeMap takes O(logn) to do both getMin and update.
Every time when the window is full of k distinct chars, we lookup TreeMap to find the one with leftmost last occurrence and set left bound j to be 1 + first to exclude the char to allow new char coming into window.

*/

public int lengthOfLongestSubstringKDistinct(String str, int k) {
        if (str == null || str.isEmpty() || k == 0) return 0;
        TreeMap<Integer, Character> lastOccurrence = new TreeMap<>();
        Map<Character, Integer> inWindow = new HashMap<>();
        int j = 0, max = 1;
        for (int i = 0; i < str.length(); i++) {
            char in = str.charAt(i);
            //update or add in's position in both maps
            if (inWindow.containsKey(in)) {
                lastOccurrence.remove(inWindow.get(in));
            }
            inWindow.put(in, i);
            lastOccurrence.put(i, in);
            // make sure the size satisfies the requirement
            if (inWindow.size() > k) { 
                int first = lastOccurrence.firstKey();
                char out = lastOccurrence.get(first);
                inWindow.remove(out);
                lastOccurrence.remove(first);
                j = first + 1;
            }
            max = Math.max(max, i - j + 1);
        }
        return max;
    }
/*
TC: O(nlogk) using TreeMap
SC: Same as above

*/
