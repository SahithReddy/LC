/*
The idea is simply. The product basically is calculated using the numbers before the current number and the numbers after
the current number. Thus, we can scan the array twice. First, we calcuate the running product of the part before the current
number. Second, we calculate the running product of the part after the current number through scanning from the end of
the array.
*/

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int length = nums.length;
        int[] answer = new int[length];
        
        int fromLeft=1;
            for(int i=0; i<length; i++){
                answer[i]=fromLeft;
                fromLeft*=nums[i];
            }
         int fromRight=1;
        for(int i= length-1; i>=0;i--){
            answer[i]*=fromRight;
            fromRight*=nums[i];
        } return answer;
}
}

// Time: O(n), Space: O(1)
------------------------------------------------------------------------------------------------
// https://leetcode.com/problems/product-of-array-except-self/discuss/65667/My-one-pass-Java-solution-without-extra-spaces

// Try to have a look at this solution if possible in future when you are here
