// The best solution - Pattern - referlink below.

Watch this video to understand : https://www.youtube.com/watch?v=LdtQAYdYLcE

https://leetcode.com/problems/subsets/discuss/27281/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> subsets = new ArrayList<>();
        Arrays.sort(nums);
        allSubsets(0, nums, new ArrayList<>(), subsets);
        return subsets;
    }
        
        private void allSubsets(int index, int[] nums, List<Integer> current, List<List<Integer>> subsets){
            subsets.add(new ArrayList<>(current));
            for(int i = index; i<nums.length; i++){
                current.add(nums[i]);
                allSubsets(i+1, nums, current, subsets);
                current.remove(current.size()-1);
            }
        }
    
}
--------------------------------------------------------------------------------------------------
