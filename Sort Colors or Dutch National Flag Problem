/* 75. Sort Colors
Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note: You are not suppose to use the library's sort function for this problem.

Example:

Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Follow up:

A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.
-->Could you come up with a one-pass algorithm using only constant space?
*/
-----------------------------------------------
/* ALGORITHM: 
The idea is to sweep all 0s to the left and all 2s to the right, then all 1s are left in the middle.
The basic idea is to use two pointer low and high and an iterator i 
Every elem left low pointer is 0, elem right high pointer is 2

Atmost Two Pass
https://leetcode.com/problems/sort-colors/discuss/26472/Share-my-at-most-two-pass-constant-space-10-line-solution - 1st comment
*/

public void sortColors(int[] A) {
    if(A==null || A.length<2) return;
    int low = 0; 
    int high = A.length-1;
    for(int i = low; i<=high;) {
        if(A[i]==0) {
           // swap A[i] and A[low] and i,low both ++
           int temp = A[i];
           A[i] = A[low];
           A[low]=temp;
           i++;low++;
        }else if(A[i]==2) {
            //swap A[i] and A[high] and high--;
           int temp = A[i];
           A[i] = A[high];
           A[high]=temp;
           high--;
        }else {
            i++;
        }
    }
}

// Time: O(N), SPace: O(1)
--------------------------------------------------
// 1-pass

// From here: https://leetcode.com/problems/sort-colors/discuss/26549/Java-solution-both-2-pass-and-1-pass

  public void sortColors(int[] nums) {
    int p1 = 0, p2 = nums.length - 1, index = 0;
    while (index <= p2) {
        if (nums[index] == 0) {
            nums[index] = nums[p1];
            nums[p1] = 0;
            p1++;
        }
        if (nums[index] == 2) {
            nums[index] = nums[p2];
            nums[p2] = 2;
            p2--;
            index--;
        }
        index++;
    }
}
// Time: O(N), SPace: O(1)
