class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length()!=t.length()) return false;
        char[] schars = s.toCharArray();
        char[] tchars = t.toCharArray();
        Arrays.sort(schars);
        Arrays.sort(tchars);
        String sback = new String(schars);
        String tback = new String(tchars);
        if (sback.equals(tback)) {
            return true;
        }
        else return false;
    }
}
----------------------------------------------------------------------------

public boolean isAnagram(String s, String t) {
    if (s.length() != t.length()) {
        return false;
    }
    char[] str1 = s.toCharArray();
    char[] str2 = t.toCharArray();
    Arrays.sort(str1);
    Arrays.sort(str2);
    return Arrays.equals(str1, str2);
}

----------------------------------------------------------------------------
class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length()!=t.length()) return false;
        
        int[] counter = new int[26];
        for(int i=0; i<s.length(); i++){
            counter[s.charAt(i)-'a']++;
            counter[t.charAt(i)-'a']--;
        }
        for(int c:counter){
            if(c!=0) return false;
        } return true;
    }
}

----------------------------------------------------------------------------
class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length()!=t.length()) return false;
        
        int[] counter = new int[26];
        for(int i=0; i<s.length(); i++){
            counter[s.charAt(i)-'a']++;
        }
        for(int i=0; i<t.length(); i++){
            counter[t.charAt(i)-'a']--;
                if(counter[t.charAt(i)-'a']<0) return false;
        }
        return true;
    }
}

Complexity analysis

Time complexity : O(n)O(n). Time complexity is O(n)O(n) because accessing the counter table is a constant time operation.

Space complexity : O(1)O(1). Although we do use extra space, the space complexity is O(1)O(1) because the table's size 
stays constant no matter how large nn is.

----------------------------------------------------------------------------
