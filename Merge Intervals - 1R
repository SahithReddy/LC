/* QUESTION: 56. Merge Intervals
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:
1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104
*/
------------------------------------------------------
/* ALGORITHM:
Sorting the intervals based on start times i.e index 0, then each set of intervals that can be merged will appear as a contiguous "run" in the sorted list.

The idea is to sort the intervals by their starting points. Then, we take the first interval and compare its end with the next intervals starts. As long as they overlap, we update the end to be the max end of the overlapping intervals. Once we find a non overlapping interval, we can add the previous "extended" interval and start over.

Sorting takes O(n log(n)) and merging the intervals takes O(n). So, the resulting algorithm takes O(n log(n)).

*/
------------------------------------------------------
class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> result = new ArrayList<>();
        
        if(intervals.length <= 0 ) return result.toArray(new int[0][]);
        Arrays.sort(intervals, (a,b)->a[0]-b[0]);
        
        int start = intervals[0][0]; 
        int end = intervals[0][1];
        
        for(int[] i : intervals){
            if(i[0] <= end)
                end = Math.max(end,i[1]);
            else{
                result.add(new int[]{start,end});
                start = i[0]; //here the start is updated again after the merging is completed and to continue with remaining arrays
                end = i[1]; same here with end
            }
        }
        result.add(new int[]{start,end});
        return result.toArray(new int[0][]);
    }
}
---------------------------------------------------
// Time Complexity: Sorting takes O(n log(n)) and merging the intervals takes O(n). So, the resulting algorithm takes O(n log(n)).
// Space complexity : O(log N) (or O(n))

If we can sort intervals in place, we do not need more than constant additional space, although the sorting itself takes O(logn) space. Otherwise, we must allocate linear space to store a copy of intervals and sort that.
----------------------------------------------------
FACEBOOK FOLLOW UP: STREAM OF INTERVALS - NO SORTING
// https://leetcode.com/problems/merge-intervals/discuss/355318/Fully-Explained-and-Clean-Interval-Tree-for-Facebook-Follow-Up-No-Sorting
