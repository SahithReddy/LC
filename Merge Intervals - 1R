/* QUESTION: 56. Merge Intervals
Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:
Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
*/


// Sorting the intervals based on start times i.e index 0

class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> result = new ArrayList<>();
        
        if(intervals.length <= 0 ) return result.toArray(new int[0][]);
        Arrays.sort(intervals, (a,b)->a[0]-b[0]);
        
        int start = intervals[0][0]; 
        int end = intervals[0][1];
        
        for(int[] i : intervals){
            if(i[0] <= end)
                end = Math.max(end,i[1]);
            else{
                result.add(new int[]{start,end});
                start = i[0]; //here the start is updated again after the merging is completed and to continue with remaining arrays
                end = i[1]; same here with end
            }
        }
        result.add(new int[]{start,end});
        return result.toArray(new int[0][]);
    }
}

// Time Complexity: Sorting takes O(n log(n)) and merging the intervals takes O(n). So, the resulting algorithm takes O(n log(n)).
// SC: O(1), As output is not taken into consideration
