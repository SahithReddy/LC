/*QUESTION:
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.

Input: "cbbd"
Output: "bb"
*/


/* ALGORITHM:
We observe that a palindrome mirrors around its center. Therefore, a palindrome can be expanded from its center, and there are only 2n−1 such centers.

You might be asking why there are 2n−1 but not nn centers? The reason is the center of a palindrome can be in between two letters. Such palindromes have even number of letters (such as "abba") and its center are between the two 'b's.

*/

// Official Solution - This is O(n^2) but we also have manachers algo which is O(N) but not needed to come up in the interview.

public String longestPalindrome(String s) {
    if (s == null || s.length() < 1) return "";
    int start = 0, end = 0;
    for (int i = 0; i < s.length(); i++) {
        int len1 = expandAroundCenter(s, i, i);
        int len2 = expandAroundCenter(s, i, i + 1);
        int len = Math.max(len1, len2);
        if (len > end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }
    return s.substring(start, end + 1);
}

private int expandAroundCenter(String s, int left, int right) {
    int L = left, R = right;
    while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
        L--;
        R++;
    }
    return R - L - 1;
}

/*
Time complexity : O(n^2). Since expanding a palindrome around its center could take O(n) time, the overall complexity is O(n^2).

Space complexity : O(1).
*/

// Explanation: https://www.youtube.com/watch?v=y2BD4MJqV20
 
 -------------------------------------------------------------------------------------------------------
 // MANACHERS ALGORITHM: TC O(N)
 // https://www.baeldung.com/java-palindrome-substrings
 
 // First, we'll guard the input string with a boundary character at the beginning and end before converting the resulting string to a character array:
String formattedInput = "@" + input + "#";
char inputCharArr[] = formattedInput.toCharArray();

// Then, we'll use a two-dimensional array radius with two rows — one to store the lengths of odd-length palindromes, and the other to store lengths of even-length palindromes:
int radius[][] = new int[2][input.length() + 1];

// Next, we'll iterate over the input array to find the length of the palindrome centered at position i and store this length in radius[][]:

Set<String> palindromes = new HashSet<>();
int max;
for (int j = 0; j <= 1; j++) {
    radius[j][0] = max = 0;
    int i = 1;
    while (i <= input.length()) {
        palindromes.add(Character.toString(inputCharArr[i]));
        while (inputCharArr[i - max - 1] == inputCharArr[i + j + max])
            max++;
        radius[j][i] = max;
        int k = 1;
        while ((radius[j][i - k] != max - k) && (k < max)) {
            radius[j][i + k] = Math.min(radius[j][i - k], max - k);
            k++;
        }
        max = Math.max(max - k, 0);
        i += k;
    }
}

// Finally, we'll traverse through the array radius[][] to calculate the palindromic substrings centered at each position:

for (int i = 1; i <= input.length(); i++) {
    for (int j = 0; j <= 1; j++) {
        for (max = radius[j][i]; max > 0; max--) {
            palindromes.add(input.substring(i - max - 1, max + j + i - 1));
        }
    }
}
 
// The time complexity of this approach is O(n).
 -------------------------------------------------------------------------------------
// Solution with Global Variables - Easier One

public class Solution {
private int lo, maxLen;

public String longestPalindrome(String s) {
	int len = s.length();
	if (len < 2)
		return s;
	
    for (int i = 0; i < len-1; i++) {
     	extendPalindrome(s, i, i);  //assume odd length, try to extend Palindrome as possible
     	extendPalindrome(s, i, i+1); //assume even length.
    }
    return s.substring(lo, lo + maxLen);
}

private void extendPalindrome(String s, int j, int k) {
	while (j >= 0 && k < s.length() && s.charAt(j) == s.charAt(k)) {
		j--;
		k++;
	}
	if (maxLen < k - j - 1) {
		lo = j + 1;
		maxLen = k - j - 1;
	}
}}

// Time - O(n^2) Space: O(1)

// Here it is: https://leetcode.com/problems/longest-palindromic-substring/discuss/2928/Very-simple-clean-java-solution
// Solution:
// https://leetcode.com/problems/palindromic-substrings/discuss/105688/Very-Simple-Java-Solution-with-Detail-Explanation
-------------------------------------------------------------------------------------------------------
// DIVYA's Solution - Easy - Follow this when in no time
class Solution {
    int length = 0;
    String result = "";
    public String longestPalindrome(String s) {
        
        for(int i=0; i<s.length(); i++){
            palindrome(i,i,s);
            palindrome(i,i+1,s);
        }
        
        return result;
    }
    
    public void palindrome(int i, int j, String str){
        
        if(i<0 || i>=str.length() || j<0 || j>=str.length() || str.charAt(i) != str.charAt(j))
            return;
        
        
        if((j-i+1) >= length){
            result = str.substring(i,j+1);
            length = j-i+1;
        }
        
        palindrome(i-1,j+1,str);
        
    }
}
 -------------------------------------------------------------------------------------------------------
DP - Watch this video. This has a good basic explanation of understanding this problem in DP
https://www.youtube.com/watch?v=Fi5INvcmDos

public class Solution {
    public static String longestPalindrome(String s) {
        int n = s.length();
        String res = null;
        int palindromeStartsAt = 0, maxLen = 0;

        boolean[][] dp = new boolean[n][n];
        // dp[i][j] indicates whether substring s starting at index i and ending at j is palindrome
        
        for(int i = n-1; i >= 0; i--) { // keep increasing the possible palindrome string
            for(int j = i; j < n; j++) { // find the max palindrome within this window of (i,j)
                
                //check if substring between (i,j) is palindrome
                dp[i][j] = (s.charAt(i) == s.charAt(j)) // chars at i and j should match
                           && 
                           ( j-i < 3  // if window is less than or equal to 3, just end chars should match
                             || dp[i+1][j-1]  ); // if window is > 3, substring (i+1, j-1) should be palindrome too
                
                //update max palindrome string
                if(dp[i][j] && (j-i+1 > maxLen)) {
                    palindromeStartsAt = i;
                    maxLen = j-i+1;
                }
            }
        }
        return s.substring(palindromeStartsAt, palindromeStartsAt+maxLen);
    }
}
Time - O(n^2) Space: O(n^2)

A little explanation for why the indices in the for loops are set the way they are (I was really confused for a long time):

j must be greater than or equal i at all times. Why? i is the start index of the substring, 
j is the end index of the substring. It makes no sense for i to be greater than j. 
Visualization helps me, so if you visualize the dp 2d array, think of a diagonal that cuts from top left to bottom right. 
We are only filling the top right half of dp.

Why are we counting down for i, but counting up for j? Each sub-problem dp[i][j] depends on dp[i+1][j-1] 
(dp[i+1][j-1] must be true and s.charAt(i) must equal s.charAt(j) for dp[i][j] to be true).

All this explanations are here in below:
https://leetcode.com/problems/longest-palindromic-substring/discuss/2921/Share-my-Java-solution-using-dynamic-programming
 -------------------------------------------------------------------------------------------------------
