// Recursion

Watch this: https://www.youtube.com/watch?v=sheA4rbbDlQ

class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null) return true;
        else if(p==null || q==null) return false;
        else if(p.val != q.val) return  false;
        else return isSameTree(p.left,q.left) && isSameTree(p.right,q.right);
    }
    
}

Time complexity : O(N), where N is a number of nodes in the tree, since one visits each node exactly once.

Space complexity :O(log(N)) in the best case of completely balanced tree and O(N) in the worst case of 
completely unbalanced tree, to keep a recursion stack.
------------------------------------------------------------------------------------
Shorter version of above code:

public boolean isSameTree(TreeNode p, TreeNode q) {
    if(p == null && q == null) return true;
    if(p == null || q == null) return false;
    if(p.val == q.val)
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    return false;
}

Above one with COMMENTS:

public boolean isSameTree(TreeNode p, TreeNode q) {
    
    // Equal nullity denotes that this branch is the same (local equality)
    // This is a base case, but also handles being given two empty trees
    if (p == null && q == null) return true;
    
    // Unequal nullity denotes that the trees aren't the same
    // Note that we've already ruled out equal nullity above
    else if (p == null || q == null) return false;
        
    // Both nodes have values; descend iff those values are equal
    // "&&" here allows for any difference to overrule a local equality
    if (p.val == q.val) return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    
    // If we're here, both nodes have values, and they're unequal, so the trees aren't the same
    return false;
}

--------------------------------------------------------------------------------------------

// Iterative

An easier and intuitive iterative solution (beats 100% both):
The idea is to store both the root values in a queue, and later dequeue both two compare them.

class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        Queue<TreeNode> queue = new LinkedList<>();
        if (p == null && q == null)
            return true;
        else if (p == null || q == null)
            return false;
        if (p != null && q != null) {
            queue.offer(p);
            queue.offer(q);
        }
        while (!queue.isEmpty()) {
            TreeNode first = queue.poll();
            TreeNode second = queue.poll();
            if (first == null && second == null)
                continue;
            if (first == null || second == null)
                return false;
            if (first.val != second.val)
                return false;
            queue.offer(first.left);
            queue.offer(second.left);
            queue.offer(first.right);
            queue.offer(second.right);
        }
        return true;
    }
}
--------------------------------------------------------------------------
Same as above but short and better, try to undersatnd:
A better solution based on your idea:

    bool isSameTree(TreeNode* p, TreeNode* q) {
        queue<TreeNode*> que;
        que.push(p); que.push(q);
        while(!que.empty()){
            TreeNode* np = que.front(); que.pop();
            TreeNode* nq = que.front(); que.pop();
            if(np == nullptr && nq == nullptr) continue;
            if(np == nullptr || nq == nullptr || np->val != nq->val) return false;
            que.push(np->left); que.push(nq->left);
            que.push(np->right); que.push(nq->right);
        }
        return true;
    }
  --------------------------------------------------------------------------
  
