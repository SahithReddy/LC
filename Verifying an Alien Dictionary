/* 953: QUESTION
In an alien language, surprisingly they also use english lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.

Given a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographicaly in this alien language.

 

Example 1:
Input: words = ["hello","leetcode"], order = "hlabcdefgijkmnopqrstuvwxyz"
Output: true
Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted.

Example 2:
Input: words = ["word","world","row"], order = "worldabcefghijkmnpqstuvxyz"
Output: false
Explanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.

Example 3:
Input: words = ["apple","app"], order = "abcdefghijklmnopqrstuvwxyz"
Output: false
Explanation: The first three characters "app" match, and the second string is shorter (in size.) According to lexicographical rules "apple" > "app", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (More info).
 

Constraints:
1 <= words.length <= 100
1 <= words[i].length <= 20
order.length == 26
All characters in words[i] and order are English lowercase letters.

*/

/* ALGORITHM:

Build a transform mapping from order,

For example, if we have order = "xyz..."
We can map the word "xyz" to "0123"(indexes) 

Compare adjacent words(i-1, i) char by char according to mapping we've created using a custom comparator.

*/

class Solution {
        public boolean isAlienSorted(String[] words, String order) {
        int[] map = new int[26];
        for (int i = 0; i < 26; ++i) { // construct mapping to the give order.
            map[order.charAt(i) - 'a'] = i; 
        } 
        for (int i = 1; i < words.length; ++i) { // Verify the ajacent words order. 
            if (compare(words[i - 1], words[i], map) > 0) { 
                return false; 
            } 
        }
        return true;
    }
        // compare the 2 words char by char.
        private int compare(String s, String t, int[] map) { 
        int m = s.length(); 
        int n = t.length();
            
        for (int i = 0; i < m && i < n; ++i) {
            // compare according to our mappingand store the integer result in 'cmp'
            int cmp = map[s.charAt(i) - 'a'] - map[t.charAt(i) - 'a'];
            
            if (cmp != 0) { // if not equal to zero, return the comparison result.
                return cmp; 
            } 
        }
        return m - n; // when one word is the prefix of the other, compare their sizes.
    }
}


/*
Time:  O(NS)

N is the length of words array given in input since we go through the words list to compare each string with its previous one.
S is the max length of word in the words list since in the helper function, the worst case is encounter the max string.

Outer loop iterates N (= words.length) times, and inner loop runs S (= A[0].length()) times;

Space: O(1), map cost O(1) space.

*/











