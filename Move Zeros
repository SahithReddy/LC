/* 283
Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Example:

Input: [0,1,0,3,12]
Output: [1,3,12,0,0]
Note:

You must do this in-place without making a copy of the array.
Minimize the total number of operations.

*/


class Solution {
    public void moveZeroes(int[] nums) {
       int count = 0;
        int l = nums.length;
        for(int i =0; i<l; i++){
            if(nums[i]!=0){ // if this digit is not a zero
                nums[i-count]= nums[i]; // Move non zero items to the left
            }
            else count++; // else increasing the count of zeros
        }
        if(count>0){ // only if there are zeros
           for(int i=l-1; i>=l-count; i--){ // filling zeros(number equal to count) at the end of the array
               nums[i]=0;
           } 
        } 
    }
}

Time: O(n) n= no of elements
Space: O(1)
--------------------------------------------------------------------------
// More optimal one in terms of no of operations minimized without 2nd for loop for putting zeroes

class Solution {
    public void moveZeroes(int[] nums) {
        int l=nums.length;
        int count=0;
        for(int i=0;i<l;i++){
            if(nums[i]==0){
                count++; // increasing the count of zeros
            } else if(count!=0){ // only if there are zeros
                nums[i-count]=nums[i]; // Move non zero items to the left
                nums[i]=0; // filling current position with zeroes
            }
        }
                    
    }
}

Time: O(n) n= no of elements
Space: O(1)
-------------------------------- FOLLOW UP: NOT 0 BUT A TARGET N------------------------------
/*
Given an array nums and an int target, write a function to move all target elements to the beginning of the array while maintaining the relative order of the non-target elements.

Example 1:

Input: nums = [1, 2, 4, 2, 5, 7, 3, 7, 3, 5], target = 5
Output: [5, 5, 1, 2, 4, 2, 7, 3, 7, 3]
*/

int n = nums.size(); int l = n-1;
    for (int j = n-1;j>=0;j--) {
        if (nums[j]!=target)
            nums[l--] = nums[j];
    }
    while (l>=0) 
        nums[l--] = target;
        
