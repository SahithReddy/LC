/*
Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.

For example,
[2,3,4], the median is 3

[2,3], the median is (2 + 3) / 2 = 2.5

Design a data structure that supports the following two operations:

void addNum(int num) - Add a integer number from the data stream to the data structure.
double findMedian() - Return the median of all elements so far.
 

Example:
addNum(1)
addNum(2)
findMedian() -> 1.5
addNum(3) 
findMedian() -> 2
 

Follow up:
If all integer numbers from the stream are between 0 and 100, how would you optimize it?
If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?
*/
------------------------------------------------------------------
// Watch this wonderful explanation: https://www.youtube.com/watch?v=1CxyVdA_654

// One more : https://www.youtube.com/watch?v=6N6QQpoU7H4

// VERY INTELLIGENT/CLEVER/SHORT SOLUTION
// Read this blogpost: https://www.programcreek.com/2015/01/leetcode-find-median-from-data-stream-java/  (has a picture)
// Hint to self: Follow the code line by line and you fill figure it out. It is clever but easy.
------------------------------
/* ALGORITHM:

The basic idea is to maintain two heaps: a max-heap and a min-heap. The max heap stores the smaller half of all numbers while the min heap stores the larger half. The sizes of two heaps need to be balanced each time when a new number is inserted so that their size will not be different by more than 1. Therefore each time when findMedian() is called we check if two heaps have the same size. If they do, we should return the average of the two top values of heaps. Otherwise we return the top of the heap which has one more element.

To do that, we first need to add two PriorityQueues to the class as the max-heap and min-heap. By default, the sorting order of a PriorityQueue is natural order which means it is a min-heap by default.Hence we need to provide a new Comparator to the constructor of the max heap to specify the reversed order.

First of all, it seems that the best time complexity we can get for this problem is O(log(n)) of add() and O(1) of getMedian(). This data structure seems highly likely to be a tree.
*/
------------------------------
class MedianFinder {

    /** initialize your data structure here. */
    PriorityQueue<Integer> min = new PriorityQueue<>(); //MIN HEAP Holds the upper half of the numbers
    PriorityQueue<Integer> max =  new PriorityQueue<>(Collections.reverseOrder()); //MAX HEAP holds the lower half of the numbers
    public MedianFinder() {
        
    }
    
    /* we know the large will gain one more item and small will remain the same size, but we cannot just push 
    the item into large. What we should do is we push the new number into small and pop the maximum item from small 
    then push it into large
    Therefore to add a number, we have 3 O(log n) heap operations
        */
    
    public void addNum(int num) {
        min.offer(num); //--->(1) EACH ELEMENT IS ADDEDD TO MIN HEAP FIRST
        max.offer(min.poll()); // ----> // MINIMUM(Smallest) ELEMENT FROM THE TOP OF MIN HEAP IS POPPED AND GIVEN TO MAX HEAP
        // ABOVE TWO STEPS ENSURES THAT ALL ELEMEMNTS IN MIN HEAP ARE GREATER THAN MAX HEAP
        if(max.size() > min.size()){
            min.offer(max.poll());  // ------>(3) THE TWO HEAPS NEEDS TO BE LOAD BALANCED
        }
    }
    
    // Alltogether, the add operation is O(logn), The findMedian operation is O(1).
    public double findMedian() {
        if(max.size() == min.size()){
            return (max.peek() + min.peek())/2.0;
        }
        else return min.peek();
    }
}

/* COMPLEXITY:
At worst, there are three heap insertions and two heap deletions from the top. Each of these takes about O(logn) time.
Finding the mean takes constant O(1) time since the tops of heaps are directly accessible. So O(logN).

Space complexity: O(n) linear space to hold input in containers.
*/
------------------------------------------------------------------------------
// IF FACEING PROBLEM TO UNDERSTAND OR JUSTIFY ABOVE SOLUTION TO OTHERS FOLLOW TH EBELOW ONE. MORE INTUTIVE, EASY BUT ALSO VEY FAST

// Find it here: https://leetcode.com/problems/find-median-from-data-stream/discuss/74144/Easy-to-understand-double-heap-solution-in-Java. - comment


class MedianFinder {
    PriorityQueue<Integer> minHeap;
    PriorityQueue<Integer> maxHeap;
    
    public MedianFinder() {
        minHeap = new PriorityQueue<Integer>();
        maxHeap = new PriorityQueue<Integer>(Collections.reverseOrder()); 
    }
    
    // Adds a number into the data structure.
    public void addNum(int num) {
        if(maxHeap.isEmpty() || num <= maxHeap.peek()) {
            maxHeap.add(num);
        } else {
            minHeap.add(num);
        }
        if(minHeap.size() >= maxHeap.size()+2) {
            maxHeap.add(minHeap.remove());
        } else if(maxHeap.size() >= minHeap.size()+2){ 
            minHeap.add(maxHeap.remove());
        }
    }

    // Returns the median of current data stream
    public double findMedian() {
        if(minHeap.size() == maxHeap.size()) {
            return (double)(minHeap.peek()+maxHeap.peek())/2;
        } else if(minHeap.size() > maxHeap.size()) {
            return minHeap.peek();
        } else {
            return maxHeap.peek();
        }
    }
};
--------------------FOLLOW_UP-------------------------------
/* FOLLOW- UP
If all integer numbers from the stream are between 0 and 100, how would you optimize it?
If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?

ANSWER:
We can bucket sort if the range of value is predefined. So we can initiate an array with size 100 and a count variable. addNum() would just increment the value in the corresponding bucket and the count variable. findMedian() you can iterate all the buckets(fixed size) and find the one median is in which costs O(1). Because O(100) = O(1), you have a constant number of buckets.

Then if 99% is between 0 ~100, guess we can use 100 buckets and We can just keep track of how many outliers there are (i.e. a 101st bucket). To be exact, you'll need 2 additional buckets, one for all outliers smaller than 0, another for greater than 100. By definition, the median could never be larger than 100.
---------------------ONE MORE-------------------------------
-we maintain HashMap<number,frequency>
-we also maintain total number of elements, so that median is just total-nums/2 th element from sorted array.
-then we go over Map from 1-100 and count element, when we hit total-nums/2 th element , that is our median
*/
