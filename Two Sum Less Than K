Sort the input A;
Push from the two ends and attempt to find any addition of the two elements < K; if the addition >= K, then decrease the high bound and hence tentatively get a smaller addition; otherwise, increase low bound to find a bigger addition;
repeat 2 till the end.
    public int twoSumLessThanK(int[] A, int K) {
        Arrays.sort(A); // Time cost O(nlogn).
        int max = -1, i = 0, j = A.length - 1; 
        while (i < j) {
            int sum = A[i] + A[j];
            if (sum < K) { // find one candidate.
                max = Math.max(max, sum);
                ++i; // increase the smaller element.
            }else { // >= sum.
                --j; // decrease the bigger element.
            }
        }
        return max;
    }
Analysis:

Time: O(nlogn), space: O(1), where n = A.length.
