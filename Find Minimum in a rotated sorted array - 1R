/* QUESTION

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums, return the minimum element of this array.

 

Example 1:
Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.

Example 2:
Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.

Example 3:
Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 
*/
------------------------------------------

/* Classic binary search problem.

Looking at subarray with index [start,end]. We can find out that if the first member is less than the last member, 
there's no rotation in the array. So we could directly return the first element in this subarray.

If the first element is larger than the last one, then we compute the element in the middle, and compare it with 
the first element. If value of the element in the middle is larger than the first element, we know the rotation is 
at the second half of this array. Else, it is in the first half in the array.


Really the BEST solution!! Binary search always bothers me, thanks for sharing. Followings are my understanding from the 
comments as others reference.

(1) loop is left < right, which means inside the loop, left always < right
(2 ) since we use round up for mid, and left < right from (1), right would never be the same as mid
(3) Therefore, we compare mid with right, since they will never be the same from (2)
(4) if nums[mid] < nums[right], we will know the minimum should be in the left part, so we are moving right.
We can always make right = mid while we don't have to worry the loop will not ends. Since from (2), we know right 
would never be the same as mid, making right = mid will assure the interval is shrinking.
(5) if nums[mid] > nums[right], minimum should be in the right part, so we are moving left. Since nums[mid] > nums[right],
mid can't be the minimum, we can safely move left to mid + 1, which also assure the interval is shrinking

In this problem, we have only three cases.

Case 1. The leftmost value is less than the rightmost value in the list: This means that the list is not rotated.
e.g> [1 2 3 4 5 6 7 ]

Case 2. The value in the middle of the list is greater than the leftmost and rightmost values in the list.
e.g> [ 4 5 6 7 0 1 2 3 ]

Case 3. The value in the middle of the list is less than the leftmost and rightmost values in the list.
e.g> [ 5 6 7 0 1 2 3 4 ]

As you see in the examples above, if we have case 1, we just return the leftmost value in the list. 
If we have case 2, we just move to the right side of the list. If we have case 3 we need to move to the 
left side of the list.
*/

class Solution {
    public int findMin(int[] nums) {
        if(nums.length == 0) return -1;
        if(nums.length == 1) return nums[0];
        
        int start = 0;
        int end = nums.length-1;
        // loop invariant: 1. low < high
        //                 2. mid != high and thus A[mid] != A[high] (no duplicate exists)
        //                 3. minimum is between [low, high]
        // The proof that the loop will exit: after each iteration either the 'high' decreases
        // or the 'low' increases, so the interval [low, high] will always shrink.
        
        
        while(start < end){
            int mid = (start + end)/2; or int mid = start + (end - start)/2;
            if(nums[start] < nums[end]) return nums[start];            
            else if(nums[mid] >= nums[start]){
                start = mid +1; // the mininum is in the right part
            }
            else end = mid; // the mininum is in the left part
        }
        return nums[start];
    }
}

/*
Complexity Analysis

Time Complexity : Same as Binary Search O(\log N)O(logN)
Space Complexity : O(1)O(1)
*/

-----------------------------------------------------------------------------------------------------
When to use start<end and start<=end?
You use while (start <= end) if you are returning the match from inside the loop.

You use while (start < end) if you want to exit out of the loop first, and then use the result of start or end 
to return the match.
-----------------------------------------------------------------------------
What's the logic behind knowing why it should be end = mid and not end = mid - 1? What thought process should have 
given me that idea? Thanks in advance!

Just think of it in general for a binary search, you have an array and you do two steps. First you see if what you're 
looking at now is the answer. In this case we want to see if start is less than end. Ok now if that's not true then 
you go on to the second step, which is to divide the array into two parts. From start to mid, and mid + 1 to end.
Now you chose which side of the array brings your closer to the solution and go back to step 1.

The point is, if we do as you say, which is to say end = mid - 1, then you are always leaving out an element 
when you divide the array in half. So therefore you aren't dividing it into two contiguous halves.

Here's an example to prove the point.
Line 1 [4, 7, 8, 9, 13, 14, 18, 1, 2, 3]
Line 2 [4, 7, 8, 9, 13] [14, 18, 1, 2, 3]
Line 3 [14, 18, 1, 2, 3]
Line 4[14, 18 , 1]
Line 5 [18, 1]
Line 6 [1]
Line 7 return start (1)

If we had said end = mid - 1, then line 4 would have excluded the 1, which is the answer.
-----------------------------------------------------------------------------------------------------

