https://stackabuse.com/sorting-algorithms-in-java/

https://java2blog.com/sorting-algorithms-java/

// Copied from here: https://python-textbok.readthedocs.io/en/1.0/Sorting_and_Searching_Algorithms.html
------------------------------------------------------------------------------------------------------------------------
Bubble SOrt; O(n^2) swapping side-by-side items and doing this until whole array is sorted.
------------------------------------------------------------------------------------------------------------------------

Insertion Sorr: O(n^2) 

The idea behind Insertion Sort is dividing the array into the sorted and unsorted subarrays.

The sorted part is of length 1 at the beginning and is corresponding to the first (left-most) element in the array. 
We iterate through the array and during each iteration, we expand the sorted portion of the array by one element.

Upon expanding, we place the new element into its proper place within the sorted subarray. We do this by shifting all 
of the elements to the right until we encounter the first element we don't have to shift.

For example, if in the following array the bolded part is sorted in an ascending order, the following happens:

3 5 7 8 4 2 1 9 6: We take 4 and remember that that's what we need to insert. Since 8 > 4, we shift.

3 5 7 x 8 2 1 9 6: Where the value of x is not of crucial importance, since it will be overwritten immediately 
(either by 4 if it's its appropriate place or by 7 if we shift). Since 7 > 4, we shift.

3 5 x 7 8 2 1 9 6

3 x 5 7 8 2 1 9 6

3 4 5 7 8 2 1 9 6

After this process, the sorted portion was expanded by one element, we now have five rather than four elements. 
Each iteration does this and by the end we'll have the whole array sorted.

--> Time Complexity: This is because in each iteration, we'll have to move the whole sorted list by one, which is O(n). 
We have to do this for each element in every array, which means it's going to be bounded by O(n^2).

------------------------------------------------------------------------------------------------------------------------
Selection Sort: O(n^2)

Selection Sort also divides the array into a sorted and unsorted subarray. Though, this time, the sorted subarray is 
formed by inserting the minimum element of the unsorted subarray at the end of the sorted array, by swapping:

3 5 1 2 4

1 5 3 2 4

1 2 3 5 4

1 2 3 5 4

1 2 3 4 5

1 2 3 4 5

In each iteration, we assume that the first unsorted element is the minimum and iterate through the rest to see if 
there's a smaller element.

Once we find the current minimum of the unsorted part of the array, we swap it with the first element and consider 
it a part of the sorted array:

--> CODE:
public static void selectionSort(int[] array) {
    for (int i = 0; i < array.length; i++) {
        int min = array[i];
        int minId = i;
        for (int j = i+1; j < array.length; j++) {
            if (array[j] < min) {
                min = array[j];
                minId = j;
            }
        }
        // swapping
        int temp = array[i];
        array[i] = min;
        array[minId] = temp;
    }
}

---> Time Complexity: O(n^2)
Finding the minimum is O(n) for the length of array because we have to check all of the elements. 
We have to find the minimum for each element of the array, making the whole process bounded by O(n^2).
------------------------------------------------------------------------------------------------------------------------
MERGE SORT: O(nlogn) , Space: O(n)

For explanation see Merge Sort Question here in leetcode
Also the merge sort explanation here
https://stackabuse.com/sorting-algorithms-in-java/
------------------------------------------------------------------------------------------------------------------------

HEAP SORT: O(nlogn) , Space: O(1)

but it has some drawbacks as well over merge sort, such as being difficult to parallelize.
------------------------------------------------------------------------------------------------------------------------
QUICK SORT: O(nlogn) , Space: O(1)

One of the reasons it is preferred to Merge Sort is that it doesn't take any extra space, 
all of the sorting is done in-place, and there's no expensive allocation and deallocation calls.
------------------------------------------------------------------------------------------------------------------------

HeapSort and QuickSort are the best performance-wise. Although they're outputting similar results, 
QuickSort tends to be a bit better and more consistent - which checks out.
------------------------------------------------------------------------------------------------------------------------
There are also various algorithms which perform the sorting task for restricted kinds of values, for example:

Counting sort, which relies on the values belonging to a small set of items
--> Time Complexity:
Best case : O(n+k)
Average case : O(n+k)
Worst case : O(n+k)


Bucket sort, which relies on the ability to map each value to one of a small set of items
--> Time Complexity:
Best case : O(n+k)
Average case : O(n+k)
Worst case : O(n^2)

Radix sort, which relies on the values being sequences of digits
--> Time Complexity:
Best case : O(nk)
Average case : O(nk)
Worst case : O(nk)
------------------------------------------------------------------------------------------------------------------------
