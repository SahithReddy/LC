class Solution {
    public boolean canAttendMeetings(int[][] intervals) {
        Comparator<int []> c = (int a [], int b[]) -> (a[0]-b[0]); //comparator lambda expression
        Arrays.sort(intervals, c);
        for(int i=0; i<intervals.length-1; i++){
            if(intervals[i][1]> intervals[i+1][0]) return false;
        } return true;
    }
}
Time complexity : O(nlogn). The time complexity is dominated by sorting. Once the array has been sorted, 
only O(n) time is taken to go through the array and determine if there is any overlap.

Space complexity : O(1). Since no additional space is allocated.
----------------------------------------------------------------------------------------
// With Old style comparator without lamba expressions
class Solution {
    
    class intArrayComparator implements Comparator<int []>{
        public int compare(int[] a, int[] b){
            return (a[0] -b[0]);
        }
    }
    public boolean canAttendMeetings(int[][] intervals) {
        Arrays.sort(intervals, new intArrayComparator());
        for(int i=0; i<intervals.length-1; i++){
            if(intervals[i][1]> intervals[i+1][0]) return false;
        } return true;
    }
}
----------------------------------------------------------------------------------------
