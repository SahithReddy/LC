/* Question:
Given a node in a binary search tree, find the in-order successor of that node in the BST.

If that node has no in-order successor, return null.

The successor of a node is the node with the smallest key greater than node.val.

You will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for Node:

Input: tree = [2,1,3], node = 1
Output: 2
Explanation: 1's in-order successor node is 2. Note that both the node and the return value is of Node type.

Input: tree = [5,3,6,2,4,null,null,1], node = 6
Output: null
Explanation: There is no in-order successor of the current node, so the answer is null.

Input: tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 15
Output: 17

Input: tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 13
Output: 15


*/



/* ALGORITHM: 
1. If the given node has a right, then the left most node on the right side must be the successor.

2. If the given node is on the left side of tree and its parent's right is pointing to the given node, then we must find a parent node whose left is current node for it to become the successor.
*/

/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
};
*/

public Node inorderSuccessor(Node x) {
        if(x == null) return null;
        
        if(x.right != null) {
            x = x.right;
            
            while(x != null && x.left != null) {
                x = x.left;
            }
            
            return x;
        }
        
        while(x != null)
        {
            if(x.parent == null)
                return null;
                
            if(x.parent.left == x)
                return x.parent;
            
            else {
                x = x.parent;
            }
                
        }
        
        return x;
    }
    
    
/*

Time complexity : O(H), where H is the height of the tree. That means O(logN) in the average case, and O(N) in the worst case, where N is the number of nodes in the tree.
Space complexity : O(1), since no additional space is allocated during the calculation.
*/
