Crazy Explanation:
https://leetcode.com/problems/consecutive-numbers-sum/discuss/129015/5-lines-C%2B%2B-solution-with-detailed-mathematical-explanation.

Solution in Java based om above approach:
https://leetcode.com/problems/consecutive-numbers-sum/discuss/128959/JavaPython-3-5-liners-O(N-0.5)-Math-method-w-explanation-and-analysis.


For the example: x + (x+1) + (x+2)+...+ k terms = N, I guess write it as x + (x+1) + (x+2)+...+ x + k - 1 = N would be clearer,
so it's easier to observe there are k items: x + 0, x + 1 .. x + (k - 1), implies kx + k*(k-1)/2 = N ==> kx = N - k*(k-1)/2


So, we can calculate the RHS for every value of k and if it is a multiple of k then we can construct a sum of N using k terms
starting from x.
Now, the question arises, till what value of k should we loop for? That's easy. In the worst case, RHS should be greater 
than 0. That is
N - k*(k-1)/2 > 0 ==> k*(k-1)/2< N

class Solution {
    public int consecutiveNumbersSum(int N) {
        int ans =0;
        for(int i=1; i*(i-1)/2< N; i++){
            if((N-i*(i-1)/2)%i == 0) ans++;
        } return ans;
    }
}

Solve the equation i * (i - 1) / 2 = N, we know i ~ N ^ 0.5
Loop runs at most N ^ 0.5 times, so

Time: O(N ^ 0.5), space: O(1)
