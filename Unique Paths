/* QUESTION: 62. Unique Paths
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?

Example 1:
Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right

Example 2:
Input: m = 7, n = 3
Output: 28

Constraints:
1 <= m, n <= 100
It's guaranteed that the answer will be less than or equal to 2 * 10 ^ 9.
*/
--------------------------------------
/* ALGORITHM: Dynamic Programming EASY ONE JUST READ THRPOUGH THE DESCRIPTION BELOW

1. Since robot can move either down or right, there is only one path to reach the cells in the first row: right->right->...->right.
2. The same is valid for the first column, though the path here is down->down-> ...->down.
3. What about the "inner" cells (m, n)? To such cell one could move either from the upper cell (m, n - 1), or from the cell on the right (m - 1, n). That means that the total number of paths to move into (m, n) cell is uniquePaths(m - 1, n) + uniquePaths(m, n - 1).
4. For Example: uniquePaths(1, 1) = uniquePaths(0, 1) + uniquePaths(1, 0)
5. Now, one could transform these ideas into 3-liner recursive solution:
*/
// RECURSION
class Solution {
  public int uniquePaths(int m, int n) {
    if (m == 1 || n == 1) {
      return 1;
    }
    return uniquePaths(m - 1, n) + uniquePaths(m, n - 1);
  }
}
------------------------------------------
/* Dynamic Programming ALGORITHM:
One could rewrite recursive approach into dynamic programming one:
1. Initiate 2D array d[m][n] = number of paths. To start, put number of paths equal to 1 for the first row and the first column. 

2. Iterate over all "inner" cells: d[col][row] = d[col - 1][row] + d[col][row - 1].

3. Return d[m - 1][n - 1].
*/

public class Solution {
public int uniquePaths(int m, int n) {
    int[][] grid = new int[m][n];
    for(int i = 0; i<m; i++){
        for(int j = 0; j<n; j++){
            if(i==0||j==0)
                grid[i][j] = 1;
            else
                grid[i][j] = grid[i][j-1] + grid[i-1][j];
        }
    }
    return grid[m-1][n-1];
}
}
--------------------------------------------
/*
Complexity Analysis

Time complexity: O(N×M).

Space complexity: O(N×M).
*/

