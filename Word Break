/* QUESTION:
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false
*/
-------------------------------
/* ALGORITHM: DP - But it is O(n^3)

The idea is the following:

dp is an array that contains booleans

dp[i] is True if there is a word in the dictionary that ends at ith index of s AND d is also True at the beginning of the word

Example:

s = "leetcode"

words = ["leet", "code"]

dp[3] is True because there is "leet" in the dictionary that ends at 3rd index of "leetcode"

dp[7] is True because there is "code" in the dictionary that ends at the 7th index of "leetcode" AND dp[3] is True

The result is the last index of dp.


dp[i] stands for whether subarray(0, i), means 0 to i-1 inclusive,  can be segmented into words from the dictionary. So dp[0] means whether subarray(0, 0) (which is an empty string) can be segmented, and of course the answer is yes.

Boolean dp array is created which is of size 1 plus the length of string s, 1 is added because the empty string is very much part of wordDict. Thus here we initialized the array with f[0]=true because worddict contains empty string.

The default value for boolean array is false. Therefore we need to set dp[0] to be true.
*/

public class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        // If you use set,you can find the element in O(1).But if you use List,you may find the element in O(n)
        Set<String> wordDictSet=new HashSet(wordDict);
        
        // dp[i] represents whether s[0...i] can be formed by dict
        boolean[] dp = new boolean[s.length() + 1];
        
        dp[0] = true;
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && wordDictSet.contains(s.substring(j, i))) {
                    dp[i] = true; // Can make a word from the last point to here
                    break; // No need to look at more words, we found a continuation
                }
            }
        }
        return dp[s.length()];
    }
}

/*
Time complexity : O(n^3) Two loops are there to fill dp array. with substring(a,b) taking O(N) time.

Time complexity O(n^3), analyse; substring() O(n) => O(n^3)
2. detailed:
inner substring(): O(1 + 2 + 3 + ... + i) = O(i^2)
total time complexity: O(1^2 + 2^2 + 3^2 ... + n^2) < O(n*n^2) = O(n^3)
strictly if you want to know: O(1^2 + 2^2 + 3^2 ... + n^2) = O(n(n+1)(2n+1)/6) = O(n^3)

Space complexity : O(n). Length of dp array is n+1.
*/
--------------------------------------------
/* BFS: TC: O(N^3), SC: O(N) - Same as DP

1. Visualize the string as a tree where each node represents the prefix upto index endend. Two nodes are connected only if the substring between the indices linked with those nodes is also a valid string which is present in the dictionary. 
2. In order to form such a tree, we start with the first character of the given string (say s) which acts as the root of the tree being formed and find every possible substring starting with that character which is a part of the dictionary. 
3. Further, the ending index (say i) of every such substring is pushed at the back of a queue which will be used for Breadth First Search. 
4. Now, we pop an element out from the front of the queue and perform the same process considering the string s(i+1,end) to be the original string and the popped node as the root of the tree this time. 
5. This process is continued, for all the nodes appended in the queue during the course of the process. If we are able to obtain the last element of the given string as a node (leaf) of the tree, this implies that the given string can be partitioned into substrings which are all a part of the given dictionary.


We can use a graph to represent the possible solutions. The vertices of the graph are simply the positions of the first characters of the words and each edge actually represents a word. For example, the input string is "nightmare", there are two ways to break it, "night mare" and "nightmare". The graph would be

0-->5-->9

|__ __ _^

The question is simply to check if there is a path from 0 to 9. The most efficient way is traversing the graph using BFS with the help of a queue and a hash set. The hash set is used to keep track of the visited nodes to avoid repeating the same work.

For this problem, the time complexity is O(n^2) and space complexity is O(n), the same with DP. This idea can be used to solve the problem word break II. We can simple construct the graph using BFS, save it into a map and then find all the paths using DFS.
*/

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
     if (wordDict.contains(s)) return true;
    Queue<Integer> queue = new LinkedList<Integer>();
    queue.offer(0);
    // use a set to record checked index to avoid repeated work.
    // This is the key to reduce the running time to O(N^2).
    Set<Integer> visited = new HashSet<Integer>();
    visited.add(0);
    while (!queue.isEmpty()) {
        int curIdx = queue.poll();
        for (int i = curIdx+1; i <= s.length(); i++) {
            if (visited.contains(i)) continue;
            if (wordDict.contains(s.substring(curIdx, i))) {
                if (i == s.length()) return true;
                queue.offer(i);
                visited.add(i);
            }
        }
    }
    return false;  
    }
}

/*
Time complexity : O(n^3) For every starting index, the search can continue till the end of the given string. with substring(a,b) taking O(N) time.

Space complexity : O(n). Queue of atmost nn size is needed.

*/
---------------------------------------------------------







