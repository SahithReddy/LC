/* QUESTION: 23. Merge k Sorted Lists
Given an array of linked-lists lists, each linked list is sorted in ascending order.

Merge all the linked-lists into one sort linked-list and return it.

Example 1:
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:
Input: lists = []
Output: []

Example 3:
Input: lists = [[]]
Output: []
*/
-------------------------------------------

/*
ALGORITHM: Divide and Conquer. Merge Sort Style. Prefer this. Period.
Convert merge k lists problem to merge 2 lists (k-1) times. 

https://leetcode.com/problems/merge-k-sorted-lists/discuss/10640/Simple-Java-Merge-Sort/308265 .  - 1st comment
*/

public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) return null;
        return sort(lists, 0, lists.length - 1);
    }
    // Sort --> Merge
    
    private ListNode sort(ListNode[] lists, int lo, int hi) {
        if (lo >= hi) return lists[lo];
        int mid = lo + (hi - lo) / 2;
        ListNode l1 = sort(lists, lo, mid);
        ListNode l2 = sort(lists, mid + 1, hi);
        return merge(l1, l2);
    }
    
    private ListNode merge(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;
        if (l1.val < l2.val) {
            l1.next = merge(l1.next, l2);
            return l1;
        }
        l2.next = merge(l1, l2.next);
        return l2;
    }
}

/*
Time complexity : O(Nlogk)
-->merge takes O(n) where N is total number of nodes in all linked lists or Final linkedlist
-->partition takes O(logk) time, where k is the number of lists
Why? How? For divide and conquer, recursion depth is logk. In each level, you need merge n nodes. The time complexity for each level is O(n)

Space: O(1), We can merge two sorted linked lists in O(1)O(1) space.
*/

-----------------------------------------------------
// Using Priority Queue
// Watch this video: https://www.youtube.com/watch?v=zLcNwcR6yO4

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for(ListNode x : lists){
            while(x!=null){
            minHeap.add(x.val);
            x = x.next;
            }
        }
        
        ListNode dummy = new ListNode(-1);
        ListNode current = dummy;
        while(!minHeap.isEmpty()){
            current.next = new ListNode(minHeap.remove());
            current = current.next;
        }
        return dummy.next;
    }
}
-------------------------------------------
/*
Time complexity : O(Nlogk) is the number of linked lists.

The comparison cost will be reduced to O(logk) for every pop and insertion to priority queue. 
But finding the node with the smallest value just costs O(1) time.
There are NN nodes in the final linked list.

Space complexity :
O(n) Creating a new linked list costs O(n) space.
And the priority queue (often implemented with heaps) costs O(k)O(k) space (it's far less than N in most situations).
*/

