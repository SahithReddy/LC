/*
QUESTION:
Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.
Example 4:

Input: s = "  Bob    Loves  Alice   "
Output: "Alice Loves Bob"
Example 5:

Input: s = "Alice does not even like bob"
Output: "bob like even not does Alice"
 

Constraints:
1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.
 

Follow up:
Could you solve it in-place with O(1) extra space?
*/

---------------------------------------------------------------------------------------------------------------------------------------
// Using inbuilt functions: For not using inbuilt functions see below

class Solution {
  public String reverseWords(String s) {
    // remove leading spaces
    s = s.trim();
    // split by multiple spaces
    List<String> wordList = Arrays.asList(s.split("\\s+"));
    Collections.reverse(wordList);
    return String.join(" ", wordList);
  }
}

/*
"\s" is a regex class for any kind of whitespace (space, tab, newline, etc). Since Java uses "\" as an escape 
character in strings (e.g. for newlines: "\n"), we need to escape the escape character ;-) So it becomes "\\s". 
The "+" means one or more of them.

Time complexity: O(N), where N is a number of characters in the input string.

Space complexity: O(N), to store the result of split by spaces.
*/
---------------------------------------------------------------------------------------------------------------------------------------
// Same as above but a littel different

class Solution {
  public String reverseWords(String s) {
String[] parts = s.trim().split("\\s+");
String out = "";
for (int i = parts.length - 1; i > 0; i--) {
    out += parts[i] + " ";
}
return out + parts[0];
}
}
---------------------------------------------------------------------------------------------------------
// https://leetcode.com/problems/reverse-words-in-a-string/solution/ -- More Solutions without using inbuilt functions.

/*
Explanation of algo without using any inbuilt function:

startIdx: the current position available for insertion.

storeIndex basically stores the start position of next word. The new word that I mean is
space + new word
except the first word(where storeIdx = 0). Obviously we need a space between two words.

j: the end of one word(including one trailing space), used for copying word one by one.
i: the beginning of one word.

1. put a blank space in front of the word if this word is not the first word

2. copy the word to the position starts with storeIndex

3. reverse the word

4. update the possible start of next word
*/


public String reverseWords(String s) {
        if (s.length() < 1) return s; // empty string
        int startIdx = 0;
        char[] str = s.toCharArray();
        // reverse whole string
        reverse(str, 0, str.length - 1);
        // reverse word one by one
        for (int i = 0; i < str.length; i++) {
            if (str[i] != ' ') {
                if (startIdx != 0) str[startIdx++] = ' ';
                int j = i;
                while (j < str.length && str[j] != ' ')
                    str[startIdx++] = str[j++];
                reverse(str, startIdx - (j - i), startIdx - 1); // startIdx - 1, NOT startIdx; 
                // C++ std::reverse : Reverses the order of the elements in the range [first, last)
                i = j;
            }
        }
        return new String(str, 0, startIdx);
    }

    private void reverse(char[] str, int begin, int end) {
        for (; begin < end; begin++, end--) {
            char tmp = str[begin];
            str[begin] = str[end];
            str[end] = tmp;
        }
    }

// Time: O(N) Space: O(1)
