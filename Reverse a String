class Solution {
    public void reverseString(char[] s) {
        int n = s.length;
            for(int i = 0; i<n/2; i++){
                char temp = s[i];
                s[i] = s[n-1-i];
                s[n-1-i] = temp;
            }
        }
    }
    
   Time complexity : \mathcal{O}(N)O(N) to swap N/2N/2 element.

Space complexity : \mathcal{O}(1)O(1), it's a constant space solution.
----------------------------   --------------   --------------   --------------   --------------   --------------   
// For a input and output datatype String

public class Solution {
    public String reverseString(String s) {
        char[] word = s.toCharArray();
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            char temp = word[i];
            word[i] = word[j];
            word[j] = temp;
            i++;
            j--;
        }
        return new String(word);
    }
}

Time Complexity: `O(n)` (Average Case) and `O(n)` (Worst Case) where `n` is the total number character in the input string. 
The algorithm need to reverse the whole string.

Auxiliary Space: `O(n)` space is used where `n` is the total number character in the input string. Space is needed to 
transform string to character array.
 --------------   --------------   --------------   --------------   --------------   --------------   --------------   --------------   
 // Using String Builder
 
public class Solution {
    public String reverseString(String s) {
        StringBuilder sb = new StringBuilder(s);
        return sb.reverse().toString();
    }
}

Time Complexity: `O(n)` (Average Case) and `O(n)` (Worst Case) where `n` is the total number character in 
the input string. Depending on the implementation. However, it is not possible to reverse string in less than `O(n)`.

Auxiliary Space: `O(n)` space is used where `n` is the total number character in the input string. Space is needed to 
transform immutable string into character buffer in StringBuilder.
--------------   --------------   --------------   --------------   --------------   --------------   --------------   
 
 // Recursion
 
 void reverse(String str) 
    { 
        if ((str==null)||(str.length() <= 1)) 
           System.out.println(str); 
        else
        { 
            System.out.print(str.charAt(str.length()-1)); 
            reverse(str.substring(0,str.length()-1)); 
        } 
    } 
   
Time Complexity: O(n)
