class Solution {
    public void reverseString(char[] s) {
        int n = s.length;
            for(int i = 0; i<n/2; i++){
                char temp = s[i];
                s[i] = s[n-1-i];
                s[n-1-i] = temp;
            }
        }
    }
    
   O(N), O(1)
    
// For a input and output datatype String

public class Solution {
    public String reverseString(String s) {
        char[] word = s.toCharArray();
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            char temp = word[i];
            word[i] = word[j];
            word[j] = temp;
            i++;
            j--;
        }
        return new String(word);
    }
}
 O(N), O(N)
 
 
 // Recursion
 
 void reverse(String str) 
    { 
        if ((str==null)||(str.length() <= 1)) 
           System.out.println(str); 
        else
        { 
            System.out.print(str.charAt(str.length()-1)); 
            reverse(str.substring(0,str.length()-1)); 
        } 
    } 
   
Time Complexity: O(n)
