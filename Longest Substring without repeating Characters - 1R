// https://www.youtube.com/watch?v=3IETreEybaA&t=40s


/*
QUESTION: 
Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

*/

/* HASHMAP ALGORITHM: 
The basic idea is, keep a hashmap which stores the characters in string as keys and their positions as values, and keep two pointers which define the max substring. move the right pointer to scan through the string , and meanwhile update the hashmap. If the character is already in the hashmap, then move the left pointer to the right of the same character last found. Note that the two pointers can only move forward.

The reason is that if s[j] have a duplicate in the range [i,j) with index j 
we don't need to increase i little by little. We can skip all the elements in the range [i,j] and let i to be j + 1 directly.
*/

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character, Integer> sub = new HashMap<Character, Integer>();
        int max=0;
        for(int i=0, j=0; j<s.length(); j++){
            if(sub.containsKey(s.charAt(j))){
                i=Math.max(i, sub.get(s.charAt(j))+1);
            }
            sub.put(s.charAt(j), j);
            max = Math.max(max, j-i+1);
            
        } return max;
    }
}

// Time complexity : Directly O(n). Index j will iterate n times.

// Space complexity (HashMap) : We need O(k) space for checking a substring has no duplicate characters, where k is the size of the Set

---------------------------------------------------------------------------------------------------
/* FIXED SIZE ARRAY ALGORITHM

Here is the same algo with int[256] rather than HashMap. Faster than map and shorter code.

The previous implements all have no assumption on the charset of the string s.

If we know that the charset is rather small, we can replace the Map with an integer array as direct access table.
Commonly used tables are:
int[26] for Letters 'a' - 'z' or 'A' - 'Z'
int[128] for ASCII
int[256] for Extended ASCII
*/

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int result = 0;
        int[] cache = new int[256];
        for (int i = 0, j = 0; i < s.length(); i++) {
            j = (cache[s.charAt(i)] > 0) ? Math.max(j, cache[s.charAt(i)]) : j;
            cache[s.charAt(i)] = i + 1;
            result = Math.max(result, i - j + 1);
        }
        return result;
    }
}

// Time complexity : Directly O(n). Index j will iterate n times.

// Space complexity (HashMap) : We need O(k) space for checking a substring has no duplicate characters, where k is the size of the charSet
