/*
QUESTION: 
Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL

*/
----------------------------------------------------
/* ALGORITHM:
Simply just reverse the list along the way using 4 pointers: dummy, pre, start, then

To clarify, all you're doing is inserting then between pre and pre.next. You keep moving then forward by 1 until you reach the difference, m - n, & you keep making start.next point to then.next to insure it's always pointing to the tail part of the list. Pretty simple lol.

==> ITERATION:
Input: 1->2->3->4->5->NULL, m = 2, n = 4

dummy->1(pre)->2(start)-> 3(then)->4->5->null
for(int i=0; i<2; i++)

first round of for loop
start.next = then.next
dummy->1(pre)->2(start)-> 4->5->null
then.next = pre.next
3(then)->2(start)-> 4->5->null
pre.next = then
dummy->1(pre)->3(then)->2(start)-> 4->5->null
then = start.next
dummy->1(pre)->3->2(start)-> 4(then) ->5->null

second round of for loop
start.next = then.next
dummy->1(pre)->3->2(start)-> 5->null
then.next = pre.next
4(then)->3->2(start)-> ->5->null
pre.next = then
dummy->1(pre)->4(then)->3->2(start)-> 5->null
then = start.next
dummy->1(pre)-> 4->3->2(start) ->5(then)->null

Done!
*/
---------------------------------------------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head == null) return null;
        ListNode dummy = new ListNode(-1); // create a dummy node to mark the head of this list
        dummy.next = head; // dummy-> 1 -> 2 -> 3 -> 4 -> 5
        ListNode pre = dummy; // make a pointer pre as a marker for the node before reversing

        for(int i = 1; i<m; i++) pre = pre.next; // a pointer to maintain the prev node for the beginning of a sub-list that will be reversed

        ListNode start = pre.next; // a pointer to the beginning of a sub-list that will be reversed
        ListNode then = start.next; // a pointer to a node that will be reversed

        // 1 - 2 -3 - 4 - 5 ; m=2; n =4 ---> pre = 1, start = 2, then = 3

        for(int i=m; i<n; i++)
        {
            start.next = then.next;
            then.next = pre.next;
            pre.next = then;
            then = start.next;
        }

        // first reversing : dummy->1 - 3 - 2 - 4 - 5; pre = 1, start = 2, then = 4
        // second reversing: dummy->1 - 4 - 3 - 2 - 5; pre = 1, start = 2, then = 5 (finish)

        return dummy.next;
    
    }
}
------------------------------------------------------------
/*
Time Complexity: O(N) considering the list consists of N nodes. We process each of the nodes at most once (we don't process the nodes after the n 
th node from the beginning.
Space Complexity: O(1) since we simply adjust some pointers in the original linked list and only use O(1) additional memory for achieving the final result.
*/
