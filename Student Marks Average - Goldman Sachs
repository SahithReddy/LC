/* QUESTION
Given a 2-D String array of student-marks find the student with the highest average and output his average score. If the average is in decimals, floor it down to the nearest integer.

Example 1:

Input:  [{"Bob","87"}, {"Mike", "35"},{"Bob", "52"}, {"Jason","35"}, {"Mike", "55"}, {"Jessica", "99"}]
Output: 99
Explanation: Since Jessica's average is greater than Bob's, Mike's and Jason's average.
Follow-up:
Questions: What is the time complexity? What is the space complexity? Can you solve it in O(n) time? (I used an integer array to store the average and sorted it using Arrays.sort(). But then, I refined my code to store only the maximum average, when I calculated the average).

https://leetcode.com/discuss/interview-question/394477/Goldman-Sachs-or-Phone-or-Highest-Average-Score-and-Power-of-10
https://www.glassdoor.com/Interview/Coderpad-given-an-array-scores-jerry-65-bob-91-jerry-23-Eric-83-Find-the-student-with-hi-QTN_2587199.htm
*/
-----------------------------------------------------------

// http://tpcg.io/BHioDsvR
import java.util.*;

public class HighestAverage{
    public static int highestAverage(String[][] scores) {
         if(scores == null || scores.length == 0) {
             return -1;
         }
         int highestAve = 0;
         Map<String, List<Integer>> map = new HashMap<>();
         
         for(int i = 0; i < scores.length; i++) {
             List<Integer> scoreList = map.get(scores[i][0]);
             if(scoreList == null) {
                 List<Integer> currentScore = new ArrayList<>();
                 currentScore.add(Integer.valueOf(scores[i][1]));
                 map.put(scores[i][0], currentScore);
             } else {
                 scoreList.add(Integer.valueOf(scores[i][1]));
                 map.put(scores[i][0], scoreList);
             }
         }
         
         //go through the map. find the largest ave
         for(Map.Entry<String, List<Integer>> entry : map.entrySet()) {
             int currentAveScore = aveCalculate(entry.getValue());
             
             highestAve = Math.max(highestAve, currentAveScore);
         }
         
         return highestAve;
     }
     
     private static int aveCalculate(List<Integer> scores) {
         int len = scores.size();
         int sum = 0;
         for(int score : scores) {
             sum += score;
         }
         
         float ave = sum / len;
         return (int) ave;
     }

     public static void main(String []args){
        String input[][] = {{"Bob","87"}, {"Mike", "35"},{"Bob", "52"}, {"Jason","35"}, {"Mike", "55"}, {"Jessica", "-99"}};
	System.out.print(highestAverage(input)); // 69 for Bob if not 99 for Jessica
     }
}

TC: O(N) n is length of input given
SC: O(N) n is length of input given
-----------------------------------

