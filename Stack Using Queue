/* QUESTION:
Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Example:

MyStack stack = new MyStack();

stack.push(1);
stack.push(2);  
stack.top();   // returns 2
stack.pop();   // returns 2
stack.empty(); // returns false
*/

/* ALGORITHM: 
First, let's see the most easiest way: one queue.
In this method, the point is that after you add one element to the queue, rotate the queue to make the tail be the head.

When we push an element into a queue, it will be stored at back of the queue due to queue's properties. But we need to implement a stack, where last inserted element should be in the front of the queue, not at the back. To achieve this we can invert the order of queue elements when pushing a new element.
*/

class MyStack 
{
    Queue<Integer> q;
    
    public MyStack()
    {
        this.q=new LinkedList<Integer>();
    }
    
    // Push element x onto stack.
    public void push(int x) 
    {
       q.add(x);
       for(int i=0;i<q.size()-1;i++) // //rotate the queue to make the tail be the head
       {
           q.add(q.poll());
       }
    }

    // Removes the element on top of the stack. The last inserted element is always stored at the front of q1 and we can pop it for constant time.
    public void pop() 
    {
        q.poll();
    }

    // Get the top element. The top element is always positioned at the front of q1. Algorithm return it.
    public int top() 
    {
        return q.peek();
    }

    // Return whether the stack is empty. Queue q1 contains all stack elements, so the algorithm checks if q1 is empty.
    public boolean empty() 
    {
        return q.isEmpty();
    }
}

// TC Only push is O(n), others are O(1). Also, SC for all is always O(1)
