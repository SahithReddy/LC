First, let's see the most easiest way: one queue.
In this method, the point is that after you add one element to the queue, rotate the queue to make the tail be the head.

class MyStack 
{
    Queue<Integer> q;
    
    public MyStack()
    {
        this.q=new LinkedList<Integer>();
    }
    
    // Push element x onto stack.
    public void push(int x) 
    {
       q.add(x);
       for(int i=0;i<q.size()-1;i++) // //rotate the queue to make the tail be the head
       {
           q.add(q.poll());
       }
    }

    // Removes the element on top of the stack.
    public void pop() 
    {
        q.poll();
    }

    // Get the top element.
    public int top() 
    {
        return q.peek();
    }

    // Return whether the stack is empty.
    public boolean empty() 
    {
        return q.isEmpty();
    }
}

Only push is O(n), others are O(1).
