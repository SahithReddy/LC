/* 221. Maximal Square
Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

Example:

Input: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

Output: 4
*/

/* Dynamic Programming  - Time and Space O(mn) -- Below has space optimised solution of O(n)

To appy DP, we define the state as the maximal size (square = size * size) of the square that can be formed till point (i, j), denoted as dp[i][j]. dp[i][j] represents the edge  length of the largest square which lower right corner(ENDING) at (i, j).

For the topmost row (i = 0) and the leftmost column (j = 0), we have dp[i][j] = matrix[i][j] - '0', meaning that it can at most form a square of size 1 when the matrix has a '1' in that cell.

When i > 0 and j > 0, if matrix[i][j] = '0', then dp[i][j] = 0 since no square will be able to contain the '0' at that cell. If matrix[i][j] = '1', we will have dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1, which means that the square will be limited by its left, upper and upper-left neighbors.

If the value of this cell is 1, 
Then the length of the square is the minimum of: the one above, the one on its left, and diagonal up-left value +1. 
Because if one side is short or missing, it will not form a square.

Top, Left, and Top Left decides the size of the square. If all of them are same, then the size of square increases by 1. 
If they're not same, they can increase by 1 to the minimal square.


*/


class Solution {
    public int maximalSquare(char[][] matrix) {
      if(matrix.length == 0) return 0;
      int m = matrix.length, n = matrix[0].length;
      int[][] dp = new int[m + 1][n + 1];
   
      int maxEdge = 0;      
      for(int i = 1; i <= m; i++){
        for(int j = 1; j <= n; j++){
          if(matrix[i - 1][j - 1] == '1'){
            dp[i][j] = Math.min( Math.min(dp[i - 1][j], dp[i][j - 1]),
                                dp[i - 1][j - 1]
                                ) + 1;
            
            maxEdge = Math.max(maxEdge, dp[i][j]);
          }
        }
      }
      
      return maxEdge * maxEdge;  
    }
}

/*
Time complexity : O(mn). Single pass.

Space complexity : O(mn). Another matrix of same size is used for dp.
*/
--------------------------------------------------
/* ALGORITHM: DP - Space O(n)
In the above code, it uses O(mn) space. Actually each time when we update dp[i][j], we only need dp[i-1][j-1], dp[i-1][j] (the previous row) and dp[i][j-1] (the current row). So we may just keep two rows.

*/

class Solution {
    public int maximalSquare(char[][] matrix) {
        if(matrix.length == 0) return 0;
        int[] curr = new int[matrix[0].length + 1];
        int upperLeft = 0;
        int maxEdge = 0;
        int temp = 0;
        for(int i = 1 ;i <= matrix.length; i++){
            for(int j = 1; j <= matrix[0].length; j++) {
                temp = curr[j];
                if(matrix[i-1][j-1] == '1') {
                    curr[j] = Math.min(Math.min(curr[j-1],upperLeft), curr[j]) + 1;
                    maxEdge = Math.max(maxEdge,curr[j]);
                }
                else {
                    curr[j] = 0;
                }
                
                upperLeft = temp;

            }
        }
        return maxEdge*maxEdge;
    }
}


/*
Time complexity : O(mn). Single pass.

Space complexity : O(n). Another array which stores elements in a row is used for dp.
*/


