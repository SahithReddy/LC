/* QUESTION:
Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
Note: Time complexity should be O(height of tree).

Example:

root = [5,3,6,2,4,null,7]
key = 3

    5
   / \
  3   6
 / \   \
2   4   7

Given key to delete is 3. So we find the node with value 3 and delete it.

One valid answer is [5,4,6,2,null,null,7], shown in the following BST.

    5
   / \
  4   6
 /     \
2       7

Another valid answer is [5,2,6,null,4,null,7].

    5
   / \
  2   6
   \   \
    4   7


*/
----------------------------------------------
/* BASE APPROACH: JUST TO LAY THE FOUNDATION FOR RECURSION ALGO --- ITERATIVE BELOW HAS O(1) Space. JUST GO THERE TO SKIP THS
Inorder traversal of BST is an array sorted in the ascending order.

To compute inorder traversal follow the direction Left -> Node -> Right.

public LinkedList<Integer> inorder(TreeNode root, LinkedList<Integer> arr) {
  if (root == null) return arr;
  inorder(root.left, arr);
  arr.add(root.val);
  inorder(root.right, arr);
  return arr;
}  

--> Successor = "after node", i.e. the next node, or the smallest node after the current one.
It's also the next node in the inorder traversal. To find a successor, go to the right once and then as many times to the left as you could.
public int successor(TreeNode root) {
  root = root.right;
  while (root.left != null) root = root.left;
  return root;
} 


--> Predecessor = "before node", i.e. the previous node, or the largest node before the current one.
It's also the previous node in the inorder traversal. To find a predecessor, go to the left once and then as many times to the right as you could.
public int predecessor(TreeNode root) {
  root = root.left;
  while (root.right != null) root = root.right;
  return root;
} 

*/
---------------------------------------------------
/* ALGORITHM: RECURSION

There are three possible situations here :

1. Node is a leaf, and one could delete it straightforward : node = null.

2. Node is not a leaf and has a right child. Then the node could be replaced by its successor which is somewhere lower in the right subtree. Then one could proceed down recursively to delete the successor.

3. Node is not a leaf, has no right child and has a left child. That means that its successor is somewhere upper in the tree but we don't want to go back. Let's use the predecessor here which is somewhere lower in the left subtree. The node could be replaced by its predecessor and then one could proceed down recursively to delete the predecessor.

--------------PSEUDO CODE FLOW---------------------
1. If key > root.val then delete the node to delete is in the right subtree root.right = deleteNode(root.right, key).

2. If key < root.val then delete the node to delete is in the left subtree root.left = deleteNode(root.left, key).

3. If key == root.val then the node to delete is right here. Let's do it :

      a. If the node is a leaf, the delete process is straightforward : root = null.

      b. If the node is not a leaf and has the right child, then replace the node value by a successor value root.val = successor.val, and then recursively delete the successor in the right subtree root.right = deleteNode(root.right, root.val).

      c. If the node is not a leaf and has only the left child, then replace the node value by a predecessor value root.val = predecessor.val, and then recursively delete the predecessor in the left subtree root.left = deleteNode(root.left, root.val).

4. Return root.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
  /*
  One step right and then always left
  */
  public int successor(TreeNode root) {
    root = root.right;
    while (root.left != null) root = root.left;
    return root.val;
  }

  /*
  One step left and then always right
  */
  public int predecessor(TreeNode root) {
    root = root.left;
    while (root.right != null) root = root.right;
    return root.val;
  }

  public TreeNode deleteNode(TreeNode root, int key) {
    if (root == null) return null;

    // delete from the right subtree
    if (key > root.val) root.right = deleteNode(root.right, key);
      
    // delete from the left subtree
    else if (key < root.val) root.left = deleteNode(root.left, key);
      
    // delete the current node
    else {
        
      // the node is a leaf
      if (root.left == null && root.right == null) root = null;
        
      // the node is not a leaf and has a right child
      else if (root.right != null) {
        root.val = successor(root);
        root.right = deleteNode(root.right, root.val);
      }
        
      // the node is not a leaf, has no right child, and has a left child    
      else {
        root.val = predecessor(root);
        root.left = deleteNode(root.left, root.val);
      }
    }
    return root;
  }
}

/*
TC: O(H) time complexity, where H is a tree height, equal to logN in the case of the balanced tree.
SC: O(H) to keep the recursion stack, where H is a tree height. H=logN for the balanced tree.
*/
----------------------------------------------------
/* ALGORITHM: ITERATIVE APPROACH:

If the node is found, delete the node.
We need a function deleteRoot to delete the root from a BST.

1. If root==null, then return null
2. If root.right==null, then return root.left
3. If root.right!=null, then the new root of the BST is root.right; And what we should do is to put root.left into this new BST. As all nodes in root.left is smaller than the new tree, we just need to find the left-most node.

*/

public class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if (root==null || root.val==key) return deleteRoot(root);
        TreeNode p=root;
        
        while (true) { // search the node
            if (key>p.val) {
                if (p.right==null || p.right.val==key) {
                    p.right=deleteRoot(p.right);
                    break;
                }
                p=p.right;
            }
            else {
                if (p.left==null || p.left.val==key) {
                    p.left=deleteRoot(p.left);
                    break;
                }
                p=p.left;
            }
        }
        return root;
    }

    private TreeNode deleteRoot(TreeNode root) {
        if (root==null) return null;
        if (root.right==null) return root.left;
        TreeNode x=root.right; // root.right should be the new root
        while (x.left!=null) x=x.left; // find the left-most node
        x.left=root.left;
        return root.right;
    }
}

// O(h) time, O(1) space Java solution.















