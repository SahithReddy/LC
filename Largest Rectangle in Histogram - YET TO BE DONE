/* 84. Largest Rectangle in Histogram

Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.

Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].
The largest rectangle is shown in the shaded area, which has area = 10 unit. between 5 & 6

Input:  {6, 2, 5, 4, 5, 1, 6}. Output: 12
Explanation: 3*4 between [5,4,5]

*/

/* USING STACK - O(N)

The core of this question is to maintain a monotonically increasing stack, and every time it encounters an element smaller than the top of the stack, the highest element is popped out
    At this time, the highest element is the local minimum height, here you need to use the current i index minus the coordinates of the previous element on the top of the stack
    In this way, you can get the width of this part. Thus height*width is the local minimum area.
    
    If the current i is still greater than the top element of the stack, continue to pop to get the next local minimum
    
    Finally, the remaining height index of the stack is the smallest index in the world, because it is larger than them, and they are all popped out.
    So directly pop stack, width is the total len minus its index
    
The IDEA is that:
1. For each bar, take its height as the rectangle's height. Then find the left and right boundaries of this rectangle.
2. (The second top bar in stack) is always the first bar lower than (the top bar in stack) on the left.
3. (The bar that i points to) is always the first bar lower than (the top bar in stack) on the right.
4. After step 2 and 3, we know the left and right boundaries, then know the width, then know the area.

*/

class Solution {
    public int largestRectangleArea(int[] heights) {
        if (heights == null || heights.length == 0)
            return 0;
        /* Create an empty stack. The stack holds indexes of hist[] array 
        The bars stored in stack are always in increasing order of their 
        heights.*/
        Stack<Integer> stack = new Stack();
        
        int len = heights.length;
        int maxArea = 0;
        
        // Run through all bars of given histogram 
        for (int i=0;i<len;i++) {
            //as long as the current bar is shorter than the last one in the stack
            // we keep popping out the stack and calculate the area based on
            // the popped bar
            
            while (!stack.isEmpty() && heights[i] < heights[stack.peek()]) {
                // If this bar is lower than top of stack, then calculate area of rectangle with stack top(heights[stack.pop()]) as the smallest (or minimum height) bar. 'i' is 'right index' for the top and element before top in stack is 'left index'
                */
                int partialMaxArea = heights[stack.pop()] * (i - (stack.isEmpty()?0:stack.peek()+1));
                
                // update max area, if needed 
                maxArea = Math.max(maxArea, partialMaxArea);
            }
            // If this bar is higher than the bar on top stack, push it to stack 
            stack.push(i);
        }
        
        // Now pop the remaining bars from stack and calculate area with every 
        // popped bar as the smallest bar 
        while (!stack.isEmpty()){
            int partialMaxArea = heights[stack.pop()] * (len - (stack.isEmpty()?0:stack.peek()+1));
            maxArea = Math.max(maxArea, partialMaxArea);
        }
        
        return maxArea;
    }
}

/*
Time complexity : O(n). n numbers are pushed and popped. Since every bar is pushed and popped only once, the time complexity of this method is O(n).

Space complexity : O(n). Stack is used.
*/
---------------------------------------------------------
// CONCISE VERSION:

public int largestRectangleArea(int[] heights) {
        int len = heights.length;
        int maxArea = 0;
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i <= len;) {
            int h = (i == len ? 0 : heights[i]);
            if (stack.isEmpty() || h >= heights[stack.peek()]) {
                stack.push(i);
                i++;
            }else {
                int curHeight = heights[stack.pop()];
                int rightBoundary = i - 1;
                int leftBoundary = stack.isEmpty() ? 0 : stack.peek() + 1;
                int width = rightBoundary - leftBoundary + 1;
                maxArea = Math.max(maxArea, (curHeight * width));
            }
        }
        return maxArea;
    }


/* References:
https://www.geeksforgeeks.org/largest-rectangle-under-histogram/
*/
