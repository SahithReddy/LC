// put attention on the parentheses -(n/2). As we know MAX_INT32 < -MIN_INT32, 
so if we directly write like this n = -n then overflow will happen. However, 
if we write n = n/2, n = -n or just n = -(n/2), then we will avoid overflow :-)

//Recursive Solution

class Solution {
    public double myPow(double x, int n) {
        if(n==0) return 1;
        if(n<0){
            x=1/x;
            return (n%2==0)? myPow(x*x, -(n/2)): x*myPow(x*x, -(n/2));
        }
            return (n%2==0)? myPow(x*x, n/2): x*myPow(x*x, n/2);
    }
}

Time complexity : O(logn). Each time we apply the formula (x ^ n) ^ 2 = x ^ {2 * n}(x 
n
 ) 
2
 =x 
2âˆ—n
 , nn is reduced by half. Thus we need at most O(\log n)O(logn) computations to get the result.

Space complexity : O(logn). For each computation, we need to store the result of x ^ {n / 2}x 
n/2
 . We need to do the computation for O(\log n)O(logn) times, so the space complexity is O(\log n)O(logn).
--------------------------------------------------------------------------------------
//Iterative but I didn't understand

https://leetcode.com/problems/powx-n/discuss/19733/Simple-iterative-lg-n-solution
