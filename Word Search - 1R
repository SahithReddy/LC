// Video Solution : https://www.youtube.com/watch?v=vYYNp0Jrdv0

//https://leetcode.com/problems/word-search/discuss/27658/Accepted-very-short-Java-solution.-No-additional-space. -- First Comment
marked visited according to this post with a *

/*
QUESTION: 
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.


*/

/*
ALGORITHM:
Typical dfs+backtracking question. It compare board[row][col] with word[start], if they match, change board[row][col] to '*' to mark it as visited. Then move to the next one and compare it to the current neighbors ( doing it by recursion)


*/

class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i =0; i< board.length; i++){
            for(int j=0; j<board[0].length; j++){
                if(board[i][j] == word.charAt(0) && helper(board, i, j, 0, word)) return true;
            }
        } return false;
    }
    public boolean helper(char[][] board, int i, int j, int index, String word){
        if(index == word.length()) return true;
        if(i<0 || i>=board.length || j<0 || j>=board[0].length || board[i][j]!=word.charAt(index)) return false;
        
        board[i][j] = '*'; // marking it as visited
        
        boolean answer = helper(board, i+1, j, index+1, word) || helper(board, i-1, j, index+1, word) ||
            helper(board, i, j+1, index+1, word) || helper(board, i, j-1, index+1, word);
            // will return true as soon as a condition returned true, and the rest conditions are not even calculated. Hence it will not time-out.
        board[i][j] = word.charAt(index); // remove the visited mark, so that it can be visited again in the future
        return answer;
        } 
    }
    
/*
Time Complexity: O(N⋅4^L)
where N is the number of cells in the board and L is the length of the word to be matched.
For the backtracking function, its execution trace would be visualized as a 4-ary tree, each of the branches represent a potential exploration in the corresponding direction. Therefore, in the worst case, the total number of invocation would be the number of nodes in a full 4-nary tree, which is about 4^L4 
L
 .
We iterate through the board for backtracking, i.e. there could be N times invocation for the backtracking function in the worst case.
As a result, overall the time complexity of the algorithm would be O(N⋅4^L)

Space Complexity: O(L) where L is the length of the word to be matched.
The main consumption of the memory lies in the recursion call of the backtracking function. The maximum length of the call stack would be the length of the word. Therefore, the space complexity of the algorithm is O(L).
*/
