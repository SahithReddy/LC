// https://leetcode.com/problems/moving-average-from-data-stream/discuss/81491/Java-O(1)-time-solution.  - First Comment


class MovingAverage {
    Queue<Integer> q;
    double sum=0;
    int s;
    /** Initialize your data structure here. */
    public MovingAverage(int size) {
        q = new LinkedList();
        s = size;
    }
    
    public double next(int val) {
        if(s == q.size()){
            sum = sum - q.poll();
        }
        
        q.offer(val);
        sum+=val;
        return sum/q.size();
    }
}

Time Complexity: O(N) where N is the size of the moving window, since we need to retrieve N 
elements from the queue at each invocation of next(val) function.
Space Complexity: O(M), where M is the length of the queue which would grow at each invocation 
of the next(val) function.
