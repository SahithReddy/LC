// https://leetcode.com/problems/moving-average-from-data-stream/discuss/81491/Java-O(1)-time-solution.  - First Comment

/* 346. Moving Average from Data Stream
Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.

Implement the MovingAverage class:

MovingAverage(int size) Initializes the object with the size of the window size.
double next(int val) Returns the moving average of the last size values of the stream.
 

Example 1:

Input
["MovingAverage", "next", "next", "next", "next"]
[[3], [1], [10], [3], [5]]
Output
[null, 1.0, 5.5, 4.66667, 6.0]

Explanation
MovingAverage movingAverage = new MovingAverage(3);
movingAverage.next(1); // return 1.0 = 1 / 1
movingAverage.next(10); // return 5.5 = (1 + 10) / 2
movingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3
movingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3
 

Constraints:

1 <= size <= 1000
-105 <= val <= 105
At most 104 calls will be made to next.
*/
------------------------------------------
/* ALGO:
The idea is to keep the sum so far and update the sum just by replacing the oldest number with the new entry.

Essentially, we just need to keep track of the sum of the current window as we go. This prevents an O(n) traversal over the Queue as we add new numbers to get the new average. If we need to evict then we just subtract that number off of our sum and divide by the size.


*/
-------------------------------------------
class MovingAverage {
    Queue<Integer> q;
    double sum=0;
    int s;
    /** Initialize your data structure here. */
    public MovingAverage(int size) {
        q = new LinkedList();
        s = size;
    }
    
    public double next(int val) {
        if(s == q.size()){
            sum = sum - q.poll();
        }
        
        q.offer(val);
        sum+=val;
        return sum/q.size();
    }
}
--------------------------------------------
/* COMPLEXITY:
Time Complexity: O(1), as we can see that there is no loop in the next(val) function.
Space Complexity: O(M), where M is the length of the queue which would grow at each invocation 
of the next(val) function.
*/
