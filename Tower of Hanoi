// Refer this : http://www.javawithus.com/programs/towers-of-hanoi


This puzzle can be solved using recursion. For a moment, assume that there are just two discs (disc 1 and 2; disc 2 being the larger one) on the first pole. The solution consists of three steps.

Step 1: Move disc 1 from pole 1 to pole 2.
Step 2: Move disc 2 from pole 1 to pole 3.
Step 3: Move disc 1 from pole 1 to pole 3.


Now, assume that disc 1 is not a single disc but a collection of discs. The procedure would be similar to the 
above three steps, but steps 1 and 3 would be a collection of steps. Step 1 would be to move the n-1 discs 
(assuming that there were a total of n discs) from pole 1 to pole 2. For moving these (n -1) discs, we again follow the 
same strategy of considering them as 1 disc plus a set of n-2 discs. Step 3 would also be similar. This gives us the 
recursive solution.

Recursive Algorithm: 
The recursive solution to move n discs from the start pole to the end pole using an auxiliary pole is given below.

Base Case - When n = 1
Move the disc from start pole to end pole

Recursive Case - When n > 1
Step 1: Move (n-1) discs from start pole to auxiliary pole.
Step 2: Move the last disc from start pole to end pole.
Step 3: Move the (n-1) discs from auxiliary pole to end pole.
Steps 1 and 3 are recursive invocations of the same procedure.


Code: https://www.geeksforgeeks.org/c-program-for-tower-of-hanoi/

public class TowersOfHanoi {

   public void solve(int n, String start, String end, String auxiliary) {
       if (n == 1) {
           System.out.println(start + " -> " + end);
       } else {
           solve(n - 1, start, auxiliary, end);
           System.out.println(start + " -> " + end);
           solve(n - 1, auxiliary, end, start);
       }
   }
