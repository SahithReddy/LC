// https://www.youtube.com/watch?v=21OuwqIC56E



class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList();
        
        if(digits == null || digits.length()==0) return result;
        
        String[] mapping = new String[] {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        
        helper(digits, result, 0, "", mapping);
        return result;
    }
    
    public void helper(String digits, List<String> result, int index, String current, String[] mapping){
        if(index==digits.length()){
            result.add(current);
            return;
        }
    String letters = mapping[digits.charAt(index) - '0']; 
    for(int i=0; i<letters.length(); i++){
    helper(digits, result, index+1, current+letters.charAt(i), mapping);
    }
}
}

Not so sure about time complexity and all.
