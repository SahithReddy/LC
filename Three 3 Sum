// Explanation is here https://www.youtube.com/watch?v=qJSPYnS35SE

The idea is to sort an input array and then run through all indices of a possible first element of a triplet.
For each possible first element we make a standard bi-directional 2Sum sweep of the remaining part of the array.
Also we want to skip equal elements to avoid duplicates in the answer without making a set or smth like that.

// I wrote the below solution

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> answer = new LinkedList();
        for(int i=0;i<nums.length-2;i++){
            if(nums[i]>0) break;
            if(i == 0 || nums[i]!=nums[i-1]){
                int front = i+1;
                int back = nums.length-1;
                int target = 0-nums[i];
                
                while(front<back){
                    if(nums[front] + nums[back] == target){
                        answer.add(Arrays.asList(nums[i],nums[front],nums[back]));
                    while(front<back && nums[front]==nums[front+1]) front++;
                    while(front<back && nums[back] ==nums[back-1]) back--;
                    front++;
                    back--;
                    }
                    else if(nums[front] + nums[back]>target){
                        while(front<back && nums[back] ==nums[back-1]) back--;
                        back--;
                    }
                    else {
                        while(front<back && nums[front]==nums[front+1]) front++;
                        front++;
                    }
                }
            }
        } return answer;
    }
}

time O(n^2), space O(n)
------------------------------------------------------------------------------------------------------------------
Below is the same solution but with small names and better to understand

public List<List<Integer>> threeSum(int[] num) {
    Arrays.sort(num);
    List<List<Integer>> res = new LinkedList<>(); 
    for (int i = 0; i < num.length-2; i++) {
        if(nums[i]>0) break;
        if (i == 0 || (i > 0 && num[i] != num[i-1])) {
            int lo = i+1, hi = num.length-1, sum = 0 - num[i];
            while (lo < hi) {
                if (num[lo] + num[hi] == sum) {
                    res.add(Arrays.asList(num[i], num[lo], num[hi]));
                    while (lo < hi && num[lo] == num[lo+1]) lo++;
                    while (lo < hi && num[hi] == num[hi-1]) hi--;
                    lo++; hi--;
                } else if (num[lo] + num[hi] < sum) {
                    // improve: skip duplicates
                    while (lo < hi && num[lo] == num[lo+1]) lo++;
                    lo++;
                } else {
                    // improve: skip duplicates
                    while (lo < hi && num[hi] == num[hi-1]) hi--;
                    hi--;
                }
            }
        }
    }
    return res;
}
------------------------------------------------------------------------------------------------------------------

Brilliant and SMall upto yhe point - Took Set to avoid duplicates
public  List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> res  = new HashSet<>();
        if(nums.length==0) return new ArrayList<>(res);
        Arrays.sort(nums);
        for(int i=0; i<nums.length-2;i++){
            int j =i+1;
           int  k = nums.length-1;
            while(j<k){
                int sum = nums[i]+nums[j]+nums[k];
                if(sum==0)res.add(Arrays.asList(nums[i],nums[j++],nums[k--]));
                else if ( sum >0) k--;
                else if (sum<0) j++;
            }

        }
        return new ArrayList<>(res);

    }
    
can you please explain these lines?
else if ( sum >0) k--;
else if (sum<0) j++;

As the array is already sorted. j being the left pointer (pointing to lower numbers ) and k being the right pointer
(pointing to higher numbers), with a static index i. If nums[i] + nums[j] + nums[k] is greater than target then we know 
we need to select the next highest number hence k--. Same way when the sum is lower we need to select a number just 
higher than the lowest.
