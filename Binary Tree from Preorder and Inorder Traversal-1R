// Great Video: Freefall - Inorder, Leafbreak - PostOrder tricks
https://www.youtube.com/watch?v=eL8NZ-21lqI

Construct Binary Tree
https://www.youtube.com/watch?v=cGlNehp57Y0


------------------------------------------------------------------------------------------------------------------

//Recursion

Pay more concentration

1.MOST VOTED SOLUTION: BUT PREFER 2ND ONE AS IT IS BIT EASY

The basic idea is here:
Say we have 2 arrays, PRE and IN.
Preorder traversing implies that PRE[0] is the root node.
Then we can find this PRE[0] in IN, say it's IN[5].
Now we know that IN[5] is root, so we know that IN[0] - IN[4] is on the left side, IN[6] to the end is on the right side.
Recursively doing this on subarrays, we can build a tree out of it :)

Hope this helps.

class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer, Integer> inorderMap = new HashMap<Integer,Integer>();
        for (int i=0; i<inorder.length; i++){
            inorderMap.put(inorder[i],i);
        }
        
        TreeNode root = helper(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1, inorderMap);
        return root;
    }
        public TreeNode helper(int [] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd, HashMap<Integer, Integer> inorderMap){
            if(preStart>preEnd || inStart>inEnd) return null;
            
            TreeNode root = new TreeNode(preorder[preStart]);
            int inorderRoot = inorderMap.get(root.val);
            int lefts = inorderRoot - inStart;
            
            root.left = helper(preorder, preStart+1, preStart+lefts, inorder, inStart, inorderRoot-1, inorderMap);
            root.right = helper(preorder, preStart+lefts+1, preEnd, inorder, inorderRoot+1, inEnd, inorderMap);
            return root;
        }  
}

//Time complexity : O(n)
//Space complexity : O(n)
The time complexity of this solution is O(n), n is the number of node, since we need do the operation in every node.
The space complexity is O(n), since build a hashtable need O(n), recursion need the O(depth of the tree), 
the depth of tree is logN in best case
and n in worst case. Therefore it is O(n).

------------------------------------------------------------------------------------------------------------------

MORE EXPLANATION FOR ABOVE ANSWER:

I hope this helps those folks who can't figure out how to get the index of the right child:

Our aim is to find out the index of right child for current node in the preorder array

We know the index of current node in the preorder array - preStart (or whatever your call it), it's the root of a subtree

Remember pre order traversal always visit all the node on left branch before going to the right ( root -> left -> ... -> right), 
therefore, we can get the immediate right child index by skipping all the node on the left branches/subtrees of current node

The inorder array has this information exactly. Remember when we found the root in "inorder" array we immediately know how 
many nodes are on the left subtree and how many are on the right subtree

Therefore the immediate right child index is preStart + numsOnLeft + 1 (remember in preorder traversal array root is 
always ahead of children nodes but you don't know which one is the left child which one is the right, and this is 
why we need inorder array)

numsOnLeft = root - inStart.

------------------------------------------------------------------------------------------------------------------

Can someone explain to me why preStart + inIndex - inStart + 1 for preStart when doing right subtree?

so basically inIndex - instart is size of the roots left subtree, therefore to get the start of right subtree you gotta 
get to the start of the first value of right subtree within preorder. 
relative start of the root + left + right tree (preStart) + left sub tree size (inIndex - inStart) + 1 (the root).

(inIndex - inStart) is the size of root's left subtree.

------------------------------------------------------------------------------------------------------------------
//ITERATIVE
I din't find iterative solutions discussed in the old Discuss. So, I thought, I will add my solution in here.

The idea is as follows:

Keep pushing the nodes from the preorder into a stack (and keep making the tree by adding nodes to the left of the previous node) until the top of the stack matches the inorder.

At this point, pop the top of the stack until the top does not equal inorder (keep a flag to note that you have made a pop).

Repeat 1 and 2 until preorder is empty. The key point is that whenever the flag is set, insert a node to the right and reset the flag.

public TreeNode buildTree(int[] preorder, int[] inorder) {
    if (preorder.length == 0) return null;
    Stack<TreeNode> s = new Stack<>();
    TreeNode root = new TreeNode(preorder[0]), cur = root;
    for (int i = 1, j = 0; i < preorder.length; i++) {
        if (cur.val != inorder[j]) {
            cur.left = new TreeNode(preorder[i]);
            s.push(cur);
            cur = cur.left;
        } else {
            j++;
            while (!s.empty() && s.peek().val == inorder[j]) {
                cur = s.pop();
                j++;
            }
            cur = cur.right = new TreeNode(preorder[i]);
        }
    }
    return root;
}
--------------------------------------------------------------------------------------------------------------------
//ITERATIVE WITH COMMENTS
A more intuitive iterative solution with detailed comments:

class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // deal with edge case(s)
        if (preorder.length == 0) {
            return null;
        }
        
        // build a map of the indices of the values as they appear in the inorder array
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            map.put(inorder[i], i);
        }
        
        // initialize the stack of tree nodes
        Stack<TreeNode> stack = new Stack<>();
        int value = preorder[0];
        TreeNode root = new TreeNode(value);
        stack.push(root);
        
        // for all remaining values...
        for (int i = 1; i < preorder.length; i ++) {
            // create a node
            value = preorder[i];
            TreeNode node = new TreeNode(value);
            
            if (map.get(value) < map.get(stack.peek().val)) {
                // the new node is on the left of the last node,
                // so it must be its left child (that's the way preorder works)
                stack.peek().left = node;
            } else {
                // the new node is on the right of the last node,
                // so it must be the right child of either the last node
                // or one of the last node's ancestors.
                // pop the stack until we either run out of ancestors
                // or the node at the top of the stack is to the right of the new node
                TreeNode parent = null;
                while(!stack.isEmpty() && map.get(value) > map.get(stack.peek().val)) {
                    parent = stack.pop();
                }
                parent.right = node;
            }
            stack.push(node);
        }
        
        return root;
    }
}
--------------------------------------------------------------------------------------------------------------------
// SEE THIS IS VERY SHORT, IT MIGHT BE A EASY PICK IF UNDERSTOOD
class Solution {
    private int in = 0;
    private int pre = 0;
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return build(preorder, inorder, Integer.MIN_VALUE);
    }
    
    private TreeNode build(int[] preorder, int[] inorder, int stop) {
        if (pre >= preorder.length) return null;
        if (inorder[in] == stop) {
            in++;
            return null;
        }
        TreeNode node = new TreeNode(preorder[pre++]);
        node.left = build(preorder, inorder, node.val);
        node.right = build(preorder, inorder, stop);
        return node;        
    }
}
https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/34543/Simple-O(n)-without-map

--------------------------------------------------------------------------------------------------------------------

