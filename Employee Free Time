/*
We are given a list schedule of employees, which represents the working time for each employee.

Each employee has a list of non-overlapping Intervals, and these intervals are in sorted order.

Return the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.

(Even though we are representing Intervals in the form [x, y], the objects inside are Intervals, not lists or arrays. For example, schedule[0][0].start = 1, schedule[0][0].end = 2, and schedule[0][0][0] is not defined).  Also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.

 

Example 1:
Input: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]
Output: [[3,4]]
Explanation: There are a total of three employees, and all common
free time intervals would be [-inf, 1], [3, 4], [10, inf].
We discard any intervals that contain inf as they aren't finite.

Example 2:
Input: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]
Output: [[5,6],[7,9]]

Constraints:
1 <= schedule.length , schedule[i].length <= 50
0 <= schedule[i].start < schedule[i].end <= 10^8
*/
-----------------------------------------------------------------
/* ALGORUTHM: PRIORITY QUEUE - SIMILAR TO MERGE INTERVALS and THEN FINDING GAPS BETWEEN THEM
        Emp1  -------       --------|           ---------
        Emp2      ------   ----  
        Emp3                 ------         |-----
        Answer for above case is interval between vertical lines.

The idea is to just add all the intervals to the priority queue. (NOTE that it is not matter how many different people are there for the algorithm. becuase we just need to find a gap in the time line.
Overall, we don't need to care which interval belongs to which one. Just put them all in one PQ, and merge the overlapped ones. Finally get the free period for everybody.

1. priority queue - sorted by start time, and for same start time sort by either largest end time or smallest (it does not matter).
2. Everytime you poll from priority queue, just make sure it doesn't intersect with previous interval.
This mean that there is no coomon interval. Everyone is free time.

*/

// Definition for an Interval.
class Interval {
    public int start;
    public int end;

    public Interval() {}

    public Interval(int _start, int _end) {
        start = _start;
        end = _end;
    }
};

class Solution {
    public List<Interval> employeeFreeTime(List<List<Interval>> schedule) {
        // The statement after -> is the lambda expression. After intervals added into the heap, they would be sorted in the order of start time. 
        // The interval's start & end time should be expressed as schedule.get(employee).get(interval).start & schedule.get(employee).get(interval).start
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> schedule.get(a[0]).get(a[1]).start - schedule.get(b[0]).get(b[1]).start);
        
        for (int i = 0; i < schedule.size(); i++) {
            pq.add(new int[] {i, 0});
        }
        List<Interval> res = new ArrayList<>();
        // need this to verify whether to merge next nterval or not
        int prev = schedule.get(pq.peek()[0]).get(pq.peek()[1]).end; 
        while (!pq.isEmpty()) {
            int[] index = pq.poll();
            Interval interval = schedule.get(index[0]).get(index[1]);
            if (interval.start > prev) {
                res.add(new Interval(prev, interval.start));
            }
            prev = Math.max(prev, interval.end);
            if (schedule.get(index[0]).size() > index[1] + 1) {
                pq.add(new int[] {index[0], index[1] + 1});
            }
        }
        return res;
    }
}

/* COMPLEXITY:
Because each person's time schedule is already sorted, we can use that info and optimize the algorithm by introducing a PriorityQueue storing a pointer to the person's schedule. Then the overall time complexity can be reduced to min(O(n log K), N is the total number of intervals in all the lists. K is the number of people.
*/
