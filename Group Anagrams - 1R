/* 49 QUESTION
Given an array of strings, group anagrams together.

Example:

Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
Output:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]
Note:

All inputs will be in lowercase.
The order of your output does not matter.
*/
---------------------------------------------------------
/* ALGORITHM: Int [26] + HashMap
INTUITON:
Two strings are anagrams if and only if their character counts (respective number of occurrences of each character) are the same.

ALGORITHM:

We can transform each string \text{s}s into a character count, \text{count}count, consisting of 26 non-negative integers representing the number of a's, b's, c's, etc. We use these counts as the basis for our hash map.
*/

// Optimal Solution

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if (strs == null || strs.length == 0) return new ArrayList<>();
        Map<String, List<String>> map = new HashMap<>();
        
        for (String s : strs) {
            //only lower-case letters. so array of size 26 is enough
            char[] ca = new char[26];
            
            //Iterate the string and increment corresponding index char - 'a' , so the index will be between 0 and 25
           
            for (char c : s.toCharArray()) {
                ca[c - 'a']++;
            }
            String keyStr = String.valueOf(ca);
            if (!map.containsKey(keyStr)) map.put(keyStr, new ArrayList<>());
            map.get(keyStr).add(s);
        }
        return new ArrayList<>(map.values());
    }
}
/*
Time Complexity: O(NK), where N is the length of strs, and K is the maximum length of a string in strs. Counting each string is linear in the size of the string, and we count every string.

Space Complexity: O(NK), the total information content stored in ans.
*/
---------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------
