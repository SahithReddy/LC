// Optimal Solution

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if (strs == null || strs.length == 0) return new ArrayList<>();
        Map<String, List<String>> map = new HashMap<>();
        for (String s : strs) {
            //only lower-case letters. so array of size 26 is enough
            char[] ca = new char[26];
            //Iterate the string and increment corresponding index
            //char - 'a' , so the index will be between 0 and 25
            for (char c : s.toCharArray()) ca[c - 'a']++;
            String keyStr = String.valueOf(ca);
            if (!map.containsKey(keyStr)) map.put(keyStr, new ArrayList<>());
            map.get(keyStr).add(s);
        }
        return new ArrayList<>(map.values());
    }
}
/*
The overall time complexity is O(m*n) or O( sum of all chars in strs). Use int[26] as bucket to count the frequency instead of Arrays.sort, this can reduce the O(nlgn) to O(n) when calculate the key.

Space Complexity: O(NK), the total information content stored in ans.
*/
---------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------
