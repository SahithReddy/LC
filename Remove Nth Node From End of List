A one pass solution can be done using pointers. Move one pointer fast --> n+1 places forward, to maintain a gap of n
between the two pointers and then move both at the same speed. Finally, when the fast pointer reaches the end, 
the slow pointer will be n+1 places behind - just the right spot for it to be able to skip the next node.

Since the question gives that n is valid, not too many checks have to be put in place. Otherwise, this would be necessary.

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(-1);
        ListNode slow = dummy;
        ListNode fast = dummy;
        dummy.next = head;
        // iterate fast and procedd until n+1 node so that there wiould be n+1 difference between slow and fast
        for(int i=1; i<=n+1; i++){
            fast=fast.next;
        }
        // Move the pointers until fast reaches last node and slow is n+1 behind
        while(fast!=null){
            slow=slow.next;
            fast=fast.next;
        }
        // Delete the next node of slow pointer(desired node to be deleted)
        slow.next = slow.next.next;
        return dummy.next;
    }
}

Timne: O(n) n is the no of nodes
Space: O(1) 
