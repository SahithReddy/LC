/* QUESTION 173
Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):

1. BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.
2. boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.
3. int next() Moves the pointer to the right, then returns the number at the pointer.
Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.

You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.

IN SIMPLE TERMS:
It means the inOrder successor for the current element. Inorder successor of a node 'n' is the next node you would visit after node 'n' when you perform inOrder traversal of the BST. It just means that you return the element one by one in BST when they are sorted in ascent order. So you just return the next smallest element one by one.


Example:
        7
       / \
      3   15
          /\
         9  20
         
Input
["BSTIterator", "next", "next", "hasNext", "next", "hasNext", "next", "hasNext", "next", "hasNext"]
[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]
Output
[null, 3, 7, true, 9, true, 15, true, 20, false]

Explanation
BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);
bSTIterator.next();    // return 3
bSTIterator.next();    // return 7
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 9
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 15
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 20
bSTIterator.hasNext(); // return False

Constraints:
The number of nodes in the tree is in the range [1, 105].
0 <= Node.val <= 106
At most 105 calls will be made to hasNext, and next.

Follow up:
Could you implement next() and hasNext() to run in average O(1) time and use O(h) memory, where h is the height of the tree?

*/
-------------------------------------------------------------------
/* ALGORITHM USING STACK:

1. We all know that, once you get to a TreeNode, in order to get the smallest, you need to go all the way down its left branch. So our first step is to point to pointer to the left most TreeNode. 
2. The problem is how to do back trace. Since the TreeNode doesn't have father pointer, we cannot get a TreeNode's father node in O(1) without store it beforehand. 
3. Back to the first step, when we are traversal to the left most TreeNode, we store each TreeNode we met in Stack (They are all father nodes for back trace).
4. for next(), I directly return where the pointer pointing at, which should be the left most TreeNode I previously found.
5. What to do next? After returning the smallest TreeNode, I need to point the pointer to the next smallest TreeNode. 
6. When the current TreeNode has a right branch (It cannot have left branch, remember we traversal to the left most), we need to jump to its right child first and then traversal to its right child's left most TreeNode. 
7. When the current TreeNode doesn't have a right branch, it means there cannot be a node with value smaller than it's father node in Stack, point the pointer at its father node.

*/
--------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class BSTIterator {
    private final Stack<TreeNode> stack;
    
    public BSTIterator(TreeNode root) {
        stack = new Stack<>();
        TreeNode cur = root;
        while (cur != null) {
            stack.push(cur);
            cur = cur.left;
        }
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !stack.isEmpty();
    }

    /** @return the next smallest number */
    public int next() {
        TreeNode node = stack.pop();
        
        // Traversal cur node's right branch
        TreeNode cur = node.right;
        while (cur != null){
            stack.push(cur);
            cur = cur.left;
        }
        
        return node.val;
    }
}

/*
Time Complexity:

1. hasNext() is the easier of the lot since all we do in this is to return true if there are any elements left in the stack. Otherwise, we return false. So clearly, this is an O(1) operation every time.

2. Next(): 
The question said "in average" O(1) time, which means amortized over all the next() calls.

Each node gets pushed and popped exactly once in next() when iterating over all N nodes.
That comes out to 2N * O(1) over N calls to next(), making it O(1) on average, or O(1) amortized.

DETAILED EXPLANATION: 
Next() involves two major operations. 
One is where we pop an element from the stack which becomes the next smallest element to return. This is a O(1) operation.
However, we then make a call to our helper function _inorder_left which iterates over a bunch of nodes. This is clearly a linear time operation i.e. O(N) in the worst case.

However, the important thing to note here is that we only make such a call for nodes which have a right child. Otherwise, we simply return. Also, even if we end up calling the helper function, it won't always process N nodes. They will be much lesser. Only if we have a skewed tree would there be N nodes for the root. But that is the only node for which we would call the helper function.

Thus, the amortized (average) time complexity for this function would still be O(1)O(1) 

Space complexity: The space complexity is O(h) which is occupied by our custom stack for simulating the inorder traversal.
*/






