/* QUESTION:
Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
Follow up:
Could you do get and put in O(1) time complexity?

Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4
 

Constraints:
1 <= capacity <= 3000
0 <= key <= 3000
0 <= value <= 104
At most 3 * 104 calls will be made to get and put.
*/
--------------------------------------------
// The key to solve this problem is using a double linked list which enables us to quickly move nodes.

// The LRU cache is a hash table of keys and double linked nodes. The hash table makes the time of get() to be O(1). The list of double linked nodes make the nodes adding/removal operations O(1).

/* ALGORITHM: Node Class + HASHMAP + DLL

Doubly Linked List to maintain the key and value pairs. 
The one in the front is the most recently used because I will insert new ones at the head
The one in the rear is least recently used.


Map/Dict will have the reference of each node for constant access.

put():
    -> If the key already exists in the Map, then just remove it.
    -> create a new node with given (key,val)
    -> insert it in the head/front.
    -> update Map entry.
    -> if size is > capacity,  then remove last/rear node.

get():
    -> Get the node reference from the Map.
    -> retrive the node from DLL, remove it.
    -> insert it in the head/front
    -> return the value that you got from the node.


For these two operations to work, I have to implement InsertTo Head() and Remove() methods. 
----------------------------------------------------------------------------------
The problem can be solved with a hashmap that keeps track of the keys and its values in the double linked list. 
That results in O(1) time for put and get operations and allows to remove the first added node in O(1) time as well.

One advantage of double linked list is that the node can remove itself without other reference. 
In addition, it takes constant time to add and remove nodes from the head or tail.

One particularity about the double linked list implemented here is that there are pseudo head and pseudo tail 
to mark the boundary, so that we don't need to check the NULL node during the update.


*/

// CODE:

class LRUCache {

    class Node{
      Node prev, next;
      int key, val;
    }
    
    final Node head  = new Node();
    final Node tail = new Node();
    HashMap<Integer, Node> map;
    int capacity;
    
    public LRUCache(int capacity) {
        map = new HashMap(capacity);
        this.capacity = capacity;
        head.next = tail;
        tail.prev= head;
    }
    // first write insert to head -> remove -> get -> put
    
    // Always add the new node right after head
    private void insertToHead(Node node){
      Node head_next = head.next;
        head.next = node;
        node.prev = head;
        node.next = head_next;
        head_next.prev = node;
    }
    
    // Remove an existing node from the linked list.
    private void remove(Node node){
      Node next_node = node.next;
        Node prev_node = node.prev;
        
        next_node.prev = prev_node;
        prev_node.next = next_node;
    }
    
    // This method works in O(1) 
    public int get(int key) {
        int result = -1; 
        Node node = map.get(key);
          if(node!=null){
              result = node.val;
              remove(node);
              insertToHead(node);
          } return result;
    }
    
    // This method works in O(1) 
    public void put(int key, int value) {
        Node node = map.get(key);
        if(node!=null){
                  remove(node);
            node.val = value;
            insertToHead(node);
        }else{
            if(map.size()==capacity){
                map.remove(tail.prev.key);
                remove(tail.prev);
            }
            Node new_node = new Node();
            new_node.key = key;
            new_node.val = value;
            map.put(key, new_node);
            insertToHead(new_node);
        }
    }
}

/*
Time complexity : The LRU cache is a hash table of keys and double linked nodes. The hash table makes the 
time of get() to be O(1). The list of double linked nodes make the nodes adding/removal operations O(1). As,inserting/removing at head/tail is O(1)

Space complexity : O(capacity) since the space is used only for a hashmap and double linked list with at 
most capacity + 1 elements.
*/
----------------------------------------
/* LAZY SOLUTION OF LINKED HASHMAP TOO
 INSERTS AS WE SEND TO IT
*/


private LinkedHashMap<Integer, Integer> map;
private int SIZE;
public LRUCache(int capacity) {
    map = new LinkedHashMap<>();
    SIZE = capacity;
}

public int get(int key) {
    if(map.containsKey(key)) {
        int value = map.remove(key);
        map.put(key, value);
        return value;
    }
    return -1;
}

public void put(int key, int value) {
    if(map.containsKey(key)) {
        map.remove(key);
    }else if(map.size() + 1 > SIZE) {
        map.remove(map.keySet().iterator().next());
    }
    map.put(key, value);
}



/*Just for reference: 
https://leetcode.com/problems/lru-cache/discuss/45911/Java-Hashtable-%2B-Double-linked-list-(with-a-touch-of-pseudo-nodes)
https://leetcode.com/problems/lru-cache/discuss/45922/JAVA-Easy-Version-To-Understand!!!!
*/

// Good Theory: https://www.interviewcake.com/concept/java/lru-cache

// Solution from this video: https://www.youtube.com/watch?v=NDpwj0VWz1U 

