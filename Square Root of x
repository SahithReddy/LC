/* QUESTION:
Given a non-negative integer x, compute and return the square root of x.

Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.

Example 1:
Input: x = 4
Output: 2

Example 2:
Input: x = 8
Output: 2

Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.
Constraints:

0 <= x <= 231 - 1
*/

// https://leetcode.com/problems/sqrtx/discuss/25047/A-Binary-Search-Solution -- First comment here
The sequence 1, 2, ... , n has no duplication.

Near the very end, closest step, before while loop, left = mid = right.

In while, If mid*mid < x, left = mid + 1 executed, right pointer is not moving, and right is the answer.

If while, If mid*mid > x, right = mid - 1 executed, right pointer shifts left, closest to sqrt(x), right is also the answer.

Tke example of 16 to understand this.


class Solution {
    public int mySqrt(int x) {
        if(x==0) return 0;
        int left =1;
        int right =x;
        while(left<=right){
            int mid = left + (right-left)/2;
            if(mid == x/mid) return mid;
            if(mid<=x/mid){
                left = mid+1;
            } else{
                right = mid-1;
            }
        } return right;
    }
}

Tinme: O(log N)
Space: O(1)
