/*
Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to a multiple of k, that is, sums up to n*k where n is also an integer.

Example 1:
Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.

Example 2:
Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.
 

NOTE:
The length of the array won't exceed 10,000.
You may assume the sum of all the numbers is in the range of a signed 32-bit integer.
*/
----------------------------------------------------
/* ALGORITHM - TC: O(N), N is no of elements in input, SC: O(k) of HashMap, k is given input target integer

We iterate through the input array exactly once, keeping track of the running sum mod k of the elements in the process. If we find that a running sum value at index j has been previously seen before in some earlier index i in the array, then we know that the sub-array (i,j] contains a desired sum.

IN OTHER WORDS:
Key point: if we can find any two subarray of prefix sum have same mod value, then their difference MUST be divisible by k. So we can use a map to store mod value of each prefix sum in map, with its index. Then check if map contains the same mod value with size > 2 when we have new mod value in every iteration 

This is because of Remainder Theorem - But dont say this directly in Interview

--->>(a+(n*k))%k is same as (a%k)<<----

For e.g. When k=6, In case of the array [23,2,6,4,7] the running sum is [23,25,31,35,42] and the remainders are [5,1,1,5,0]. We got remainder 5 at index 0 and also at index 3. That means, in between these two indexes we must have added a number which is multiple of the k.

1. Running sum from first element to index i : sum_i. If we mod k, it will be some format like : sum_i = k * x + modk_1
2. Running sum from first element to index j : sum_j. If we mod k, it will be some format like : sum_j = k * y + modk_2

x,y are quotients, x,y = 1,2,3,....

If they have the same mod, which is modk_1 == modk_2, subtracting these two running sum we get the difference sum_i - sum_j = (x - y) * k = constant * k, and the difference is the sum of elements between index i and j, and the value is a multiple of k.

*/
--------------------------------------
class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
    Map<Integer, Integer> map = new HashMap<Integer, Integer>();
    /* corner case: if the very first subarray with first two numbers in array could form the result, we need to put mod value 0 and index -1 to make it as a true case.*/
    map.put(0,-1);
    int sumSoFar = 0;
    for (int i=0;i<nums.length;i++) {
        sumSoFar += nums[i];
        // corner case: k CANNOT be 0 when we use a number mod k. Calculating remainders
        if (k != 0) sumSoFar %= k; 
        if (map.containsKey(sumSoFar)) {
            if (i - map.get(sumSoFar) > 1) return true; // This ensures continuous subarray of size at least 2
        }
        else map.put(sumSoFar, i);
    }
    return false;
}
}
------------------------------------------------
/*
TC: O(N), N is no of elements in input, SC: O(k) of HashMap, k is given input target integer
*/




