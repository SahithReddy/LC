/* QUESTION:
According to the Wikipedia's article: "The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970."

Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):

Any live cell with fewer than two live neighbors dies, as if caused by under-population.
Any live cell with two or three live neighbors lives on to the next generation.
Any live cell with more than three live neighbors dies, as if by over-population..
Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
Write a function to compute the next state (after one update) of the board given its current state. The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously.

Example:

Input: 
[
  [0,1,0],
  [0,0,1],
  [1,1,1],
  [0,0,0]
]
Output: 
[
  [0,0,0],
  [1,0,1],
  [0,1,1],
  [0,1,0]
]
Follow up:

Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.
In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?
*/
----------------------------------------------------------
/* Brute force with auxiliary space O(M*N):
I am going to create a auxiliary 2D copy, then I will scan every cell of the original 2D array. For each cell, I am going to judge whether in the next generation, it is going to be dead or alive according to the rules specified by the game. The result will be updated in the copy, so that the original array will be unmodified during this process. After this process is done, I am gonna to copy over every value from the copy into the original array.
*/

class Solution {
    // all eight possible directions
    private static final int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {1,1}, {-1, -1}, {-1, 1}, {1, -1}};
    private static final int ALIVE = 1;
    private static final int DEAD = 0;
    
    public void gameOfLife(int[][] board) {
        int[][] copy = new int[board.length][board[0].length];
        // iterate through every cell in this 2D array
        for (int r = 0; r < board.length; r++) {
            for (int c = 0; c < board[0].length; c++) {
                // keep track of the number of alive neighbors
                int alive = 0;
                
                // for each cell, check all possible 8 directions and count the number of alive neighbors
                for (int[] direction : directions) {
                    alive += isAlive(board, r + direction[0], c + direction[1]) ? 1 : 0;
                }
                
                // in case current cell is dead but has 3 live neighbors
                if (board[r][c] == DEAD) {
                    if (alive == 3) {
                        copy[r][c] = ALIVE;
                    }
                } 
                // in case current cell is alive
                else {
                    // in case, only 2 or 3 neighbors are alive
                    if (alive == 2 || alive == 3) {
                        copy[r][c] = ALIVE;
                    }
                }
            }
        }
        
        // copy over to the origin board 
        for (int r = 0; r < board.length; r++) {
            for (int c = 0; c < board[0].length; c++) {
                board[r][c] = copy[r][c];
            }
        }
    }
    
    private boolean isAlive(int[][] board, int r, int c) {
        return r >= 0 && r < board.length && c >= 0 && c < board[0].length && board[r][c] == ALIVE;
    }   
}

/* Complexity Analysis

Time Complexity: O(M×N), where MM is the number of rows and NN is the number of columns of the Board.

Space Complexity: O(M×N), where MM is the number of rows and NN is the number of columns of the Board. This is the space occupied by the copy board we created initially.
*/
-----------------------------------------------------
/* SPACE O(1) improvement
In-place: I am going to use some values other than 0 or 1 to indicate the state of cell in the next generation. For example, I am going to use 2 to indicate "currently dead, but will be alive in the next generation" and use 3 to indicate "currently alive, but will be dead in the next generation"
*/

// in-place solution
class Solution {
    // all eight possible directions
    private static final int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {1,1}, {-1, -1}, {-1, 1}, {1, -1}};
    private static final int ALIVE = 1;
    private static final int DEAD = 0;
    private static final int DEADTOALIVE = 2;
    private static final int ALIVETODEAD = 3;
    
    public void gameOfLife(int[][] board) {
        // iterate through every cell in this 2D array
        for (int r = 0; r < board.length; r++) {
            for (int c = 0; c < board[0].length; c++) {
                // keep track of the number of alive neighbors
                int alive = 0;
                
                // for each cell, check all possible 8 directions and count the number of alive neighbors
                for (int[] direction : directions) {
                    alive += isAlive(board, r + direction[0], c + direction[1]) ? 1 : 0;
                }
                
                // in case current cell is dead but has 3 live neighbors
                if (board[r][c] == DEAD) {
                    if (alive == 3) {
                        board[r][c] = DEADTOALIVE;
                    }
                } 
                // in case current cell is alive
                else {
                    // in case, if number of neighbors are not 2 or 3, then this cell is going to be dead
                    if (alive != 2 && alive != 3) {
                        board[r][c] = ALIVETODEAD;
                    }
                }
            }
        }
        
        for (int r = 0; r < board.length; r++) {
            for (int c = 0; c < board[0].length; c++) {
                if (board[r][c] == DEADTOALIVE) {
                    board[r][c] = ALIVE;
                }
                else if (board[r][c] == ALIVETODEAD) {
                    board[r][c] = DEAD;
                }
            }
        }
    }
    
    private boolean isAlive(int[][] board, int r, int c) {
        return r >= 0 && r < board.length && c >= 0 && c < board[0].length && (board[r][c] == ALIVE || board[r][c] == ALIVETODEAD);
    }   
}

/*
Time Complexity: O(M×N), where M is the number of rows and N is the number of columns of the Board.

Space Complexity: O(1)
*/
