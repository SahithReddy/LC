/* QUESTION:
Given two strings s and t , write a function to determine if t is an anagram of s.

Example 1:
Input: s = "anagram", t = "nagaram"
Output: true

Example 2:
Input: s = "rat", t = "car"
Output: false

Note:
You may assume the string contains only lowercase alphabets.
*/


class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length()!=t.length()) return false;
        
        int[] counter = new int[26];
        for(int i=0; i<s.length(); i++){
            counter[s.charAt(i)-'a']++;
        }
        for(int i=0; i<t.length(); i++){
            counter[t.charAt(i)-'a']--;
                if(counter[t.charAt(i)-'a']<0) return false;
        }
        return true;
    }
}
----------------------
class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length()!=t.length()) return false;
        
        int[] counter = new int[26];
        for(int i=0; i<s.length(); i++){
            counter[s.charAt(i)-'a']++;
            counter[t.charAt(i)-'a']--;
        }
        for(int c:counter){
            if(c!=0) return false;
        } return true;
    }
}

/*
Complexity analysis: FOR BOTH OF THEM ABOVE

Time complexity : O(n). Time complexity is O(n) because accessing the counter table is a constant time operation.

Space complexity : O(1). Although we do use extra space, the space complexity is O(1)O(1) because the table's size 
stays constant no matter how large nn is.
*/

----------------------------------------------------------------------------


class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length()!=t.length()) return false;
        char[] schars = s.toCharArray();
        char[] tchars = t.toCharArray();
        Arrays.sort(schars);
        Arrays.sort(tchars);
        String sback = new String(schars);
        String tback = new String(tchars);
        if (sback.equals(tback)) {
            return true;
        }
        else return false;
    }
}
----------------------------------------------------------------------------

public boolean isAnagram(String s, String t) {
    if (s.length() != t.length()) {
        return false;
    }
    char[] str1 = s.toCharArray();
    char[] str2 = t.toCharArray();
    Arrays.sort(str1);
    Arrays.sort(str2);
    return Arrays.equals(str1, str2);
}
Time complexity : O(n \log n)O(nlogn). Assume that nn is the length of ss, sorting costs O(n \log n)O(nlogn) and comparing
two strings costs O(n)O(n). Sorting time dominates and the overall time complexity is O(n \log n)O(nlogn).

Space complexity : O(1)O(1). Space depends on the sorting implementation which, usually, costs O(1)O(1) auxiliary space 
if heapsort is used.
----------------------------------------------------------------------------

