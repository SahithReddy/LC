/*
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

**1. Integers in each row are sorted in ascending from left to right.
**2. Integers in each column are sorted in ascending from top to bottom.
Example:

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false
*/
---------------------------------------------------
/* ALGORITHM: READ IT!!  MIND BLOWING SOLUTION.
We start search the matrix from top right corner, initialize the current position to top right corner, if the target is greater than the value in current position, then the target can not be in entire row of current position because the row is sorted, if the target is less than the value in current position, then the target can not in the entire column because the column is sorted too. We can rule out one row or one column each time, so the time complexity is O(m+n).

It's also OK to search from the bottom-left point. Just check the code mentioned below.

Actually it's like the matrix contains two "binary search tree" and it has two "roots" correspondingly. :-)
*/
-------------------------------------------------
// From top right corner
/*
when target < matrix[row][col], exclude that column by moving to left
when target > matrix[row][col], exclude that row by moving to below
*/
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length < 1 || matrix[0].length <1) {
            return false;
        }
        int col = matrix[0].length-1;
        int row = 0;
        while(col >= 0 && row <= matrix.length-1) {
            if(target == matrix[row][col]) {
                return true;
            } else if(target < matrix[row][col]) {
                col--;
            } else if(target > matrix[row][col]) {
                row++;
            }
        }
        return false;
    }
}
------------------------------------------
// From bottom left corner
/*
when target < matrix[row][col], exclude that row by moving to top
when target > matrix[row][col], exclude that column by moving to right
*/

public static boolean searchMatrix(int[][] matrix, int target) {
    if (matrix == null || matrix.length < 1 || matrix[0].length < 1)
        return false;

    int col = 0;
    int row = matrix.length - 1;
    while (col <= matrix[0].length - 1 && row >= 0) {
        if (target == matrix[row][col])
            return true;
        else if (target < matrix[row][col])
            row--;
        else if (target > matrix[row][col])
            col++;
    }
    return false;
}

/*
Time complexity : O(n+m)

The key to the time complexity analysis is noticing that, on every iteration (during which we do not return true) either row or col is is decremented/incremented exactly once. Because row can only be decremented mm times and col can only be incremented nn times before causing the while loop to terminate, the loop cannot run for more than n+mn+m iterations. Because all other work is constant, the overall time complexity is linear in the sum of the dimensions of the matrix.

Space complexity : O(1)
Because this approach only manipulates a few pointers, its memory footprint is constant.
*/
