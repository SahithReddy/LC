/* QUESTION: 162
A peak element is an element that is greater than its neighbors.

Given an input array nums, where nums[i] ≠ nums[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that nums[-1] = nums[n] = -∞.

Example 1:
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

Example 2:
Input: nums = [1,2,1,3,5,6,4]
Output: 1 or 5 
Explanation: Your function can return either index number 1 where the peak element is 2, 
             or index number 5 where the peak element is 6.

Constraints:
1 <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1
nums[i] != nums[i + 1] for all valid i.

Follow up: Could you implement a solution with logarithmic complexity?
*/
---------------------------------------
/* ALGORITHM: BINARY SEARCH ALGORITHM: WHY AND HOW?
What we are essentially doing is going in the direction of the rising slope(by choosing the element which is greater than current). How does that guarantee the result? Think about it, there are 2 possibilities.
a) rising slope has to keep rising till end of the array 
b) rising slope will encounter a lesser element and go down.
In both scenarios we will have an answer. 
a) the answer is the end element because we take the boundary as -INFINITY 
b) the answer is the largest element before the slope falls. Hope this makes things clearer.

ONE MORE:
Lets say you have a mid number at index x, nums[x]
if (num[x+1] > nums[x]), that means a peak element HAS to exist on the right half of that array, because (since every number is unique) 
1. the numbers keep increasing on the right side, and the peak will be the last element. 
2. the numbers stop increasing and there is a 'dip', or there exists somewhere a number such that nums[y] < nums[y-1], which means number[x] is a peak element.

This same logic can be applied to the left hand side (nums[x] < nums[x-1]).
-------------------------------------------------------
VISUAL:

         5   5                           5
        / \ / \                         / \
       4   4   4                       4  -∞
      /         \                     /
     3           3           3       3
    /             \         / \     /
   2               2       2   2   2
  /                 \     /     \ /
-∞                   1   1       1
                      \ /
                       0                      
   0 1 2 3 4 5 6 7 8 910111213141516171819 indices
   2,3,4,5,4,5,4,3,2,1,0,1,2,3,2,1,2,3,4,5 (20 nums)
   l                 m                   r l=0, m=9, r=19
   l       m         r                     l=0, m=4, r= 9
             l   m   r                     l=5, m=7, r= 9
             l>m r                         l=5, m=6, r= 7

*/
--------------------------------------------------------------
// ITERATIVE BINARY SEARCH
public int findPeakElement(int[] nums) {
    int left = 0;
    int right = nums.length - 1;
    while(left < right) {
        int mid = left + (right - left) / 2;
        if(nums[mid] < nums[mid + 1]) {
            left = mid + 1;
        } else {
            right = mid;
        }
    }
    return left;
}

/* 
Time complexity : O(log_2(n)). We reduce the search space in half at every step. Thus, the total search space will be consumed in log_2(n) steps. Here, n refers to the size of nums array.
Space complexity : O(1). Constant extra space is used.
*/

------------------------------------------------------------------
// SEQWUENTIAL
 public int findPeakElement(int[] nums) {
        for(int i = 1; i < nums.length; i ++)
        {
            if(nums[i] < nums[i-1])
            {
                return i-1;
            }
        }
        return nums.length-1;
    }
    
/*
Time Complexity: O(N)
Space complexity : O(1). Constant extra space is used.
*/
