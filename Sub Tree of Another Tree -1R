// This one is using isSameTree function from other question, for each node(assuming it as root node) 
this algo was applying isSameTree function and then go on to checking left and right trees recursively applying isSubTree function

class Solution {
    public boolean isSameTree(TreeNode a, TreeNode b){
        if(a==null && b==null) return true;
        else if(a==null || b==null) return false;
        else if(a.val!=b.val) return false;
        else return (isSameTree(a.left, b.left) && isSameTree(a.right, b.right));
    }
    
    public boolean isSubtree(TreeNode s, TreeNode t) {
        if(s==null) return false;
        else if(t==null) return true;
        else if (isSameTree(s,t)) return true;
        else return (isSubtree(s.left, t) ||isSubtree(s.right, t));
    }
}

Runtime is O(|n| * |m|)
Here n nodes are present in given tree s and m nodes are present in given tree t.
----------------------------------------------------------------------------------------------------------------------
