/*
QUESTION:
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

*/

/*
ALGORITHM: Picked from 2nd most upvoted solution and its 1st comment

First, build a function reverse() to reverse the ListNode between begin and end.

   /**
     * Reverse a link list between begin and end exclusively
     * an example:
     * a linked list:
     * 0->1->2->3->4->5->6
     * |           |   
     * begin       end
     * after call begin = reverse(begin, end)
     * 
     * 0->3->2->1->4->5->6
     *          |  |
     *      begin end
     * @return the reversed list's 'begin' node, which is the precedence of node end
     */

Then walk thru the linked list and apply reverse() iteratively.
*/

// CODE: 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
    if (head==null || head.next ==null || k==1)
    	return head;
        
    ListNode dummyhead = new ListNode(-1);
    ListNode begin = dummyhead;
    dummyhead.next = head;
        
    int groupCount=0;
    while (head != null){
    	groupCount++;
    	if (groupCount%k == 0){
    		begin = reverse(begin, head.next);
    		head = begin.next;
    	} else {
    		head = head.next;
    	}
    }
    return dummyhead.next;
}

public ListNode reverse(ListNode begin, ListNode end){
    ListNode prev = begin;
	ListNode curr = begin.next;
	ListNode first = curr;
    ListNode next;
	while (curr!=end){
		next = curr.next;
		curr.next = prev;
		prev = curr;
		curr = next;
	}
	begin.next = prev;
	first.next = curr;
	return first;
}
}


// Time: O(N), N is no of nodes
// Space: O(1)
