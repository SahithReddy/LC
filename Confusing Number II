/* 1088. Confusing Number II

We can rotate digits by 180 degrees to form new digits. When 0, 1, 6, 8, 9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. When 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid.

A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.(Note that the rotated number can be greater than the original number.)

Given a positive integer N, return the number of confusing numbers between 1 and N inclusive.

 

Example 1:

Input: 20
Output: 6
Explanation: 
The confusing numbers are [6,9,10,16,18,19].
6 converts to 9.
9 converts to 6.
10 converts to 01 which is just 1.
16 converts to 91.
18 converts to 81.
19 converts to 61.
Example 2:

Input: 100
Output: 19
Explanation: 
The confusing numbers are [6,9,10,16,18,19,60,61,66,68,80,81,86,89,90,91,98,99,100].
 

Note:

1 <= N <= 10^9
*/

/* ALGORITHM:

Backtracking:

The basic idea is to search all numbers composed of 0, 1, 6, 8, 9 and check each of them before they grow bigger than N.

*/

class Solution {
    static Map<Integer, Integer> map = new HashMap<>();
	
	int res = 0;

	public int confusingNumberII(int N) {
    map.put(0, 0);
		map.put(1, 1);
		map.put(6, 9);
		map.put(8, 8);
		map.put(9, 6);
        
		// begin with cur = 0
		search(N, 0);
		return res;
	}

	private void search(int N, long cur) {
        
        if (cur > N) {
            return;
        }
        
		if (isConfusingNumber(cur)) {
			res++;
		}
		
		/*
		 * Iterate through all of possible numbers in dfs 
		 * Ex : when N = 22
		 * 1 
		 * 10 
		 * 11 
		 * 16 
		 * 18 
		 * 19  // stop here as this is last possible value before 22
		 * 
		 * 6 // No 2 digit value starting with 6 is < 22
		 * 8 
		 * 9
		 */
		for (Integer i : map.keySet()) {
			long next = cur * 10 + i;
			if (next <= N && next != 0) {
				search(N, next);
			}
		}
	}

	private boolean isConfusingNumber(long cur) {
		// lets say curr = 69
		long src = cur;
		long rotatedNumber = 0;
		/* Since we rotate 180, least significant digit would become most significant digit in strobogrammatic number.
		 * find each digit starting from least significant digit and get strobogrammatic digit. */
		while (cur > 0) {
            
            // 0*10+get(9) = 6 -->  next loop 6*10 + get(6) = 69
			rotatedNumber = rotatedNumber * 10 + map.get((int) cur % 10); 
			
            cur /= 10;  // 69/10=6 --> next loop 6/10=0 here loop finish
		}
		return rotatedNumber != src;
	}
}

/*
Space O(1)

time: O(5^m), m is the length of input integer, or the number of digits it has (this is the number of nodes on the tree)

search order illustration: each of {0,1,6,8,9} will be appended with each of the same set of digits until they reach N (graph got reformatted but you get the idea).

/ / | \
0 1 6 8 9
/ / | \
90 91 96 98 99 (9 will expand as such)

*/





















