/*
QUESTION: 
Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

Example 1:
Input: s = "the sky is blue"
Output: "blue is sky the"

Example 2:
Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.

Example 3:
Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.

Example 4:
Input: s = "  Bob    Loves  Alice   "
Output: "Alice Loves Bob"

Example 5:
Input: s = "Alice does not even like bob"
Output: "bob like even not does Alice"
 
Constraints:
1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.

Follow up:
Could you solve it in-place with O(1) extra space?
*/
----------------------------------------------------------
/* ALGORITHM:
split string by space
reverse each string
append them
*/
---------------------------------------------------------------
public String reverseWords(String s) {

  String[] strs = s.split(" "); // Split
  StringBuilder sb = new StringBuilder();
  String space = "";
  for(String str: strs){
    sb.append(space);
    sb.append(reverse(str));  // reverse(below) and append
    space = " ";
  }
  return sb.toString();
}

String reverse(String str){
  char[] sc = str.toCharArray();
  int s = 0, e = sc.length - 1;
  while(s < e){
    char t = sc[s];
    sc[s] = sc[e];
    sc[e] = t;
    s++;
    e--;
  }
  return new String(sc);
}

------------------------------------------------------------------------------------------------------------------------

// Explanantion:  https://www.geeksforgeeks.org/reverse-individual-words/. --- Using Stack**

class GFG { 
  
// reverses individual words of a string 
static void reverseWords(String str) 
{ 
    Stack<Character> st=new Stack<Character>(); 
   
    // Traverse given string and push all 
    // characters to stack until we see a space. 
    for (int i = 0; i < str.length(); ++i) { 
        if (str.charAt(i) != ' ') 
            st.push(str.charAt(i)); 
   
        // When we see a space, we print 
        // contents of stack. 
        else { 
            while (st.empty() == false) { 
                System.out.print(st.pop()); 
                  
            } 
            System.out.print(" "); 
        } 
    } 
   
    // Since there may not be space after 
    // last word. 
    while (st.empty() == false) { 
        System.out.print(st.pop()); 
          
    } 
} 
  
// Driver program to test above function 
public static void main(String[] args) 
{ 
   String str = "Geeks for Geeks"; 
    reverseWords(str); 
  } 
}

Time complexity : O(n)
Space complexity : O(n)
