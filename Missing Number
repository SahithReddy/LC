
/*
Best Algo: Gauss Formula
We can compute the sum of nums in linear time, and by Gauss' formula, we can compute the sum of the first nn natural numbers in constant time. Therefore, the number that is missing is simply the result of Gauss' formula minus the sum of nums, as nums consists of the first nn natural numbers minus some number.

*/

class Solution {
    public int missingNumber(int[] nums) {
        int expectedSum = nums.length*(nums.length + 1)/2;
        int actualSum = 0;
        for (int num : nums) actualSum += num;
        return expectedSum - actualSum;
    }
}

// In case of overflow, approach 4 can be optimized as follow:

int missingNumber(vector<int>& nums) {
    int result = 0;
    for (int i = 0; i < nums.size(); ++i) {
        result += (i+1)-nums[i];
    }
    return result;
}

Time: O(n)
Space: O(1)

-------------------------------------------------------------------
// Using HashSet
class Solution {
    public int missingNumber(int[] nums) {
        Set<Integer> numSet = new HashSet<Integer>();
        for (int num : nums) numSet.add(num);

        int expectedNumCount = nums.length + 1;
        for (int number = 0; number < expectedNumCount; number++) {
            if (!numSet.contains(number)) {
                return number;
            }
        }
        return -1;
    }
}

Time :O(n)
Space: O(n)

