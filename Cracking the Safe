/* 753. Cracking the Safe
There is a box protected by a password. The password is a sequence of n digits where each digit can be one of the first k digits 0, 1, ..., k-1.

While entering a password, the last n digits entered will automatically be matched against the correct password.

For example, assuming the correct password is "345", if you type "012345", the box will open because the correct password matches the suffix of the entered password.

Return any password of minimum length that is guaranteed to open the box at some point of entering it.

Example 1:
Input: n = 1, k = 2
Output: "01"
Note: "10" will be accepted too.

Example 2:
Input: n = 2, k = 2
Output: "00110"
Note: "01100", "10011", "11001" will be accepted too.
 

Note:
n will be in the range [1, 4].
k will be in the range [1, 10].
k^n will be at most 4096.
*/

/* UNDERSTANDING THE QUESTION:
In this question you are trying to unlock the safe by putting password. The length of password is n. Everytime you enter the pasword the last n digits are matched. Since you do not know the password you want to try all combinations from k digits of length n to unlock the safe. Eg. when n = 2, k = 2, the password could be 00, 01, 10, 11. Hence your solution must contain all these combinations. When you unlock safe, last n digits are matched.
Solution is 00110
Digit entered '0' - no operation
Digit entered '0' - (you formed '00') will try to match if 00 is solution
Digit entered '1' : your solution '001' will try to match last n i.e. 01
Digit entered '1' : your solution '0011', will try to match '11'
Digit entered '0' : your solution will try to match last n i.e '10'
Hence you must come with shortest solution string containing all possible combinations

*/

/* ALGORITHM:

In order to guarantee to open the box at last, the input password ought to contain all length-n combinations on digits [0..k-1] - there should be k^n combinations in total.

To make the input password as short as possible, we'd better make each possible length-n combination on digits [0..k-1] occurs exactly once as a substring of the password. The existence of such a password is proved by De Bruijn sequence:

A de Bruijn sequence of order n on a size-k alphabet A is a cyclic sequence in which every possible length-n string on A occurs exactly once as a substring. It has length k^n, which is also the number of distinct substrings of length n on a size-k alphabet; de Bruijn sequences are therefore optimally short.

We reuse last n-1 digits of the input-so-far password as below:

e.g., n = 2, k = 2
all 2-length combinations on [0, 1]: 
00 (`00`110), 
 01 (0`01`10), 
  11 (00`11`0), 
   10 (001`10`)
   
the password is 00110
We can utilize DFS to find the password:

goal: to find the shortest input password such that each possible n-length combination of digits [0..k-1] occurs exactly once as a substring.

node: current input password

edge: if the last n - 1 digits of node1 can be transformed to node2 by appending a digit from 0..k-1, there will be an edge between node1 and node2

start node: n repeated 0's
end node: all n-length combinations among digits 0..k-1 are visited

visitedComb: all combinations that have been visited
---------------------------------------------------------------
Could someone please tell me why are we deleting the combination from the set and also deleting the last char?

                visitedComb.remove(newComb);
                pwd.deleteCharAt(pwd.length() - 1);

If ch='0', then we first check if the last (n-1) chars + '0' is an unused combination. It's possible that this combination is successful and gives us valid password (still stored in pwd and not removed because we returned true). If our subproblem returns false, that tells us that our dfs path is bad and doesn't result in a valid password string. In this case we need to undo our last actions (marking that last combination as used and adding the last character).

Assume pwd ends with S (last n-1 chars).
Check if there's a pwd ending with S + '0'

Case 1 (dfs path is good):
If this works, we'll find out at the bottom of our dfs path (base case where we're able to visit all k^n nodes)
Bubble true back up and don't touch our stringbuilder pwd

Case 2 (dfs path is bad):
DFS fails and returns false and doesn't return true back to the caller
Now remove the fact we've seen S + '0' because we'll no longer use this combination at dfs on this level of recursion
Now remove the last character '0' because the DFS failed, showing '0' is not viable at this level
*/

public String crackSafe(int n, int k) {
    // Initialize pwd to n repeated 0's as the start node of DFS.
    String strPwd = String.join("", Collections.nCopies(n, "0"));
    StringBuilder sbPwd = new StringBuilder(strPwd);

    Set<String> visitedComb = new HashSet<>();
    visitedComb.add(strPwd);

    int targetNumVisited = (int) Math.pow(k, n);

    crackSafeAfter(sbPwd, visitedComb, targetNumVisited, n, k);

    return sbPwd.toString();
}

private boolean crackSafeAfter(StringBuilder pwd, Set<String> visitedComb, int targetNumVisited, int n, int k) {
    // Base case: all n-length combinations among digits 0..k-1 are visited. 
    if (visitedComb.size() == targetNumVisited) {
        return true;
    }

    String lastDigits = pwd.substring(pwd.length() - n + 1); // Last n-1 digits of pwd.
    for (char ch = '0'; ch < '0' + k; ch++) {
        String newComb = lastDigits + ch;
        if (!visitedComb.contains(newComb))  {
            visitedComb.add(newComb);
            pwd.append(ch);
            if (crackSafeAfter(pwd, visitedComb, targetNumVisited, n, k)) {
                return true;
            }
            visitedComb.remove(newComb);
            pwd.deleteCharAt(pwd.length() - 1);
        }
    }

    return false;
}


/* COMPLEXITY:
I think the time probably is O(k^(n+1)), since we have total k^n nodes, and for each node there is k edges, and we will visit each edge once.
This is just running DFS, so we have O(V+E) with:
V = All combinations = K^N
E (k edges for each combination, sharing 2 combinations each) = K * (K^N)/2 = O(K^(N+1))
So in total O(K^(N+1)).

*/


/* REFERENCES
https://www.geeksforgeeks.org/hierholzers-algorithm-directed-graph/
https://en.wikipedia.org/wiki/De_Bruijn_sequence#Uses
*/
