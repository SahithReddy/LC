/* QUESTION:
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Follow up:
Could you solve it in linear time?

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

*/

/* BRUTE FORCE:
The straightforward solution is to iterate over all sliding windows and find a maximum for each window. There are N - k + 1 sliding windows and there are k elements in each window, that results in a quite bad time complexity O(Nk).
*/


public int[] maxSlidingWindow(int[] nums, int k) {
    if(nums == null || k <= 0) return new int [0];
    int [] arr = new int[nums.length - k + 1];
    for(int i = 0; i < nums.length - k + 1; i++){
        int max = Integer.MIN_VALUE;
        for(int j = i; j < i + k; j++)
           max = Math.max(max, nums[j]);
        arr[i] = max;
    }
    return arr;
}

/*
Time complexity : O(Nk), where N is number of elements in the array.

Space complexity : O(1) not including the output array. O(Nâˆ’k+1) for an output array.
*/
---------------------------------------------
/* Using DEQUEUE :

Let's use a deque (double-ended queue), the structure which pops from / pushes to either side with the same O(1) performance.

If we can add and remove elements from both sides of the sliding window, we can solve this problem in linear time. It turns out that we can use Deque to achieve the goal. In the Deque, we add and remove indices.
    
Basically, for each element nums[i] in the array that we are about to insert, we first check whether the leftmost index in the sliding window is out of bound. If so, we remove it by pollFirst() in constant time.

Then we continuously remove the rightmost indices if their corresponding elements are less than nums[i] (the element we are about to insert). The idea is that the elements that are less than the element we'll insert won't have any contributions to the maximum element of the sliding window. So it is safe to remove them.

After removal pollLast() and insertion offerLast(i) (the element nums[i]), we can say that the leftmost element in the window is maximum. Think about it why. Notice that the maximum element could be the one we just insert.

Last but not least, adding the maximum elements to the result array when necessary.
*/

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
      // assume nums is not null
      int n = nums.length;
      if (n == 0 || k == 0) {
        return new int[0];
      }
      int[] result = new int[n - k + 1]; // number of windows
      Deque<Integer> window = new ArrayDeque<>(); // stores indices

      for (int i = 0; i < n; ++i) {
        // remove indices that are out of bound
        if (window.size() > 0 && window.peekFirst() <= i - k) {
          window.pollFirst();
        }
        // remove indices whose corresponding values are less than nums[i]
        while (window.size() > 0 && nums[window.peekLast()] < nums[i]) {
          window.pollLast();
        }
        // add nums[i]
        window.offerLast(i);
        // add to result
        if (i >= k - 1) {
          result[i - k + 1] = nums[window.peekFirst()];
        }
      }
      return result;
    }
}

/*
Time: O(N) since each element is processed (add/remove) at most twice.
Space: O(k)

*/

// https://leetcode.com/problems/sliding-window-maximum/discuss/458121/Java-All-Solutions-(B-F-PQ-Deque-DP)-with-Explanation-and-Complexity-Analysis






















