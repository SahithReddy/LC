
// Analogy but with employee/manager relation. Common manager least - https://www.careercup.com/question?id=5648649519366144
/*
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]


 

Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
 

Note:

All of the nodes' values will be unique.
p and q are different and both values will exist in the binary tree.

*/
-------------------------------------------------
/* ITERATIVE:  See the code to explain. It is all self- explanatory
if both p and q exist in Tree rooted at root, then return their LCA
if neither p and q exist in Tree rooted at root, then return null
if only one of p or q (NOT both of them), exists in Tree rooted at root, return it

Difference is here we have while loop to continue the iteration and conditions like root=root.right and root=root.left to
direct our iterations based on conditions.

*/

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        while(root!=null){
            if(p.val<root.val && q.val<root.val){
                root=root.left; // here we call a function again in recursion
            }
            else if(p.val>root.val && q.val>root.val){
                root=root.right;
            }
            else{
                return root;
            }
        } return null;
    }
}

// Time: O(n) Space: O(1) as there is no stack
---------------------------------------------------------------------------------------------------
/* RECURSION: 

It’s always not easy to explain recursive solutions but I will try..

There is an assumption that p and q nodes exist and are part of the tree.

Let’s start from the beginning, from the root node.
If root of the tree is p or q then line

if(root == p || root == q) return root;

returns real root which is LCA since it’s doesn’t matter where second (p or q) is – root is LCA anyway.

Let’s say root node is not p or q then it checks left branch first

TreeNode left = lowestCommonAncestor(root.left, p, q);

And then right branch:

TreeNode right = lowestCommonAncestor(root.right, p, q);

Video: https://www.youtube.com/watch?v=py3R23aAPCA - Back to Back SWE

*/

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        if(p.val<root.val && q.val<root.val ){
            return lowestCommonAncestor(root.left, p, q);
        }
        else if(p.val>root.val && q.val>root.val){
            return lowestCommonAncestor(root.right, p, q);
        }
        else return root;
    }
}

// Time: O(n) Space: O(n) beacuse of recursion.
---------------------------------------------------------------------------------------------------
