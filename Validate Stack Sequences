/* 946. Validate Stack Sequences
Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.

Example 1:
Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

Example 2:
Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.
 

NOTE:
0 <= pushed.length == popped.length <= 1000
0 <= pushed[i], popped[i] < 1000
pushed is a permutation of popped.
pushed and popped have distinct values.

*/


/* ALGORITHM: T & S : O(N) ------ Space O(1) Solution is below

Initialize am empty stack S,

Simulate stack operations:
Loop through the pushed array,

1. Keep pushing pushed elements into stack if the top element on the stack is different from the current one of popped;
2. Keep poping out of the top element from stack if it is same as the current one of popped;
3. Check if the stack is empty after loop.


Analysis:
Let n be pushed.length
the while loop at most runs n times since the stack at most pops out n times.
Time & space: O(n).

*/

public boolean validateStackSequences(int[] pushed, int[] popped) {
        Stack<Integer> stack = new Stack<>();
        int index = 0;
        for(int p : pushed){
            stack.push(p);
            while (!stack.isEmpty() && stack.peek() == popped[index]){
                stack.pop();
                index++;
            }
        }
        return stack.isEmpty();
    }
    
--------------------------------------------------------

/* ALGORITHM: Time O(N) Space O(1)
Based on the solution 1,
using pushed as the stack.
This solution will take O(1) extra space,
though it also changed the input.
*/

class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
    int i = 0, j = 0;
    for (int x : pushed) {
        pushed[i++] = x;
        while (i > 0 && pushed[i - 1] == popped[j]) {
            i--; 
            j++;
        }
    }
    return i == 0;
}
}


