/* 444. Sequence Reconstruction
Check whether the original sequence org can be uniquely reconstructed from the sequences in seqs. The org sequence is a permutation of the integers from 1 to n, with 1 ≤ n ≤ 104. Reconstruction means building a shortest common supersequence of the sequences in seqs (i.e., a shortest sequence so that all sequences in seqs are subsequences of it). Determine whether there is only one sequence that can be reconstructed from seqs and it is the org sequence.

EXAMPLE 1
seqs = [[1,2], [1,3]]

Question: Using seqs, what are the shortest common supersequences we can make?
Answer: [1,2,3] and [1 3 2].

Explanation:

[1,2,3] is valid, since every sequence in seqs is a subsequence of [1,2,3]
[1,2,3]    [1,2,3]
 * *        *   *
[1,3,2] is valid since every sequence in seqs is a subsequence of [1,3,2]
[1,3,2]    [1,3,2]
 *   *      * *
Solution: False - there are multiple such supersequences.

EXAMPLE 3
seqs = [[1,2],[1,3],[2,3]]

Question: Using seqs, what are the shortest common supersequences we can make?
Answer: [1,2,3]

Explanation:

[1,2,3] is valid since every sequence in seqs is a subsequence of [1,2,3]
[1,2,3]    [1,2,3]    [1,2,3]
 * *        *   *        * *
Solution: True - solution is unique and equal to target [1,2,3].

Example 2:
Input: org = [1,2,3], seqs = [[1,2]]
Output: false
Explanation: The reconstructed sequence can only be [1,2].


Example 4:
Input: org = [4,1,5,2,6,3], seqs = [[5,2,6,3],[4,1,5,2]]
Output: true

Example 5: seqs: [[1,2],[1,3],[2,3],[3,3]],  org = [1,2,3,3]
Output; False
Explanation: Because [[1,2],[1,3],[2,3],[3,3]] can also construct [1,3,2,3], so the sequences that seqs can construct is not unique.

org = [1], seqs = [[1,1]] Output: False

*/

/* 
For org to be uniquely reconstructible from seqs we need to satisfy 2 conditions:

1. Every sequence in seqs should be a subsequence in org. This part is obvious.
2. Every 2 consecutive elements in org should be consecutive elements in some sequence from seqs. Why is that? Well, suppose condition 1 is satisfied. Then for 2 any consecutive elements x and y in org we have 2 options.
        a. We have both xand y in some sequence from seqs. Then (as condition 1 is satisfied) they must be consequtive elements in this sequence.
        b. There is no sequence in seqs that contains both x and y. In this case we cannot uniquely reconstruct org from seqs as sequence with x and y switched would also be a valid original sequence for seqs.
                                                                                                
So this are 2 necessary criterions. It is pretty easy to see that this are also sufficient criterions for org to be uniquely reconstructible (there is only 1 way to reconstruct sequence when we know that condition 2 is satisfied).

To implement this idea I have idxs hash that maps item to its index in org sequence to check condition 1. And I have pairs set that holds all consequitive element pairs for sequences from seqs to check condition 2 (I also consider first elements to be paired with previous undefined elements, it is necessary to check this).
*/


class Solution {
    public boolean sequenceReconstruction(int[] org, List<List<Integer>> seqs) {
        if (seqs == null || seqs.size() == 0) return false;
        int[] order = new int[org.length + 1];
        for (int i = 0; i < org.length; i++) {
            if (org[i] <= 0 || org[i] > org.length) return false;
            order[org[i]] = i;
        }
        boolean[] pairs = new boolean[org.length];
        for (List<Integer> seq : seqs) {
            for (int i = 0; i < seq.size(); i++) {
                if (seq.get(i) <= 0 || seq.get(i) > org.length) return false;
                if (i == 0 && seq.get(i) == org[0]) pairs[0] = true;
                if (i > 0 && order[seq.get(i - 1)] >= order[seq.get(i)]) return false;
                if (i > 0 && order[seq.get(i - 1)] + 1 == order[seq.get(i)]) pairs[order[seq.get(i)]] = true;
            }
        }
        for (int i = 0; i < pairs.length; i++) {
            if (!pairs[i]) return false;
        }
        return true;
    }
}


/* COMPLEXITY:
Time: O(N) - All digits in sequences - Confirm and check before saying this to interviewer
Space: O(N)

*/
