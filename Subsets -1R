/* QUESTION:
Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

*/

// Watch this video to understand : https://www.youtube.com/watch?v=LdtQAYdYLcE

/* The best solution - Pattern - referlink below.
https://leetcode.com/problems/subsets/discuss/27281/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)
*/

/* ALGORITHM:
Backtracking is an algorithm for finding all solutions by exploring all potential candidates. If the solution candidate turns to be not a solution (or at least not the last one), backtracking algorithm discards it by making some changes on the previous step, i.e. backtracks and then try again.

GENERAL BACKTRACKING can be solved always as follows:

Pick a starting point.
while(Problem is not solved)
    For each path from the starting point.
        check if selected path is safe, if yes select it
        and make recursive call to rest of the problem
        before which undo the current move.
    End For
If none of the move works out, return false, NO SOLUTON.
*/

/* VISUALIZATION:
A simple visualization of the recursion tree helps understanding the subset concept. We go from left to right in the nums array. At each iteration we can either include or exclude the element at nums[i]. This gives 2 possible choices at each node in the tree. When i reaches the end of the nums array, we found a valid subset, so we add it to our output list. We have 2^n possible subsets where 2 is the number of possible choices at each step (each node) and n is the number of elements in nums.
*/

//                       {  }
//               /                     \
//             { }                     {1}  - - - - - - - - - - - - - - > [(1),2,3] : i = 0
//          /       \             /          \
//       { }        {2}         {1}         {1,2} - - - - - - - - - - - > [1,(2),3] : i = 1
//      /   \      /   \       /   \        /   \
//    { }   {3}  {2}  {2,3}  {1}  {1,3}  {1,2}  {1,2,3} - - - - - - - - > [1,2,(3)] : i = 2

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> subsets = new ArrayList<>();
        Arrays.sort(nums);
        allSubsets(0, nums, new ArrayList<>(), subsets);
        return subsets;
    }
        
        private void allSubsets(int index, int[] nums, List<Integer> current, List<List<Integer>> subsets){
            /* When you add a list into the list, it is passed as an object(parameter are passed by reference/address, not the value.  I think only several basic data type such as int, double, long, etc. are passed by value.). 
            The further operation changes the original object. Create a new list and clone the old one can solve this problem.*/
            subsets.add(new ArrayList<>(current));
            for(int i = index; i<nums.length; i++){
                // add i into the current combination
                current.add(nums[i]);
                // use next integers to complete the combination
                allSubsets(i+1, nums, current, subsets);
                // Backtrack
                current.remove(current.size()-1);
            }
        }
    
}

/* COMPLEXTY:

TIME: 
T=O(n x 2^n) as total 2^n possible subsets can be there for n items.

The recursive function is called 2^n times. Because we have 2 choices at each iteration in nums array. Either we include 
nums[i] in the current set, or we exclude nums[i]. This array nums is of size n = number of elements in nums.

We need to create a copy of the current set because we reuse the original one to build all the valid subsets. This copy 
costs O(n) and it is performed at each call of the recursive function, which is called 2^n times as mentioned in above. 
So total time complexity is O(n x 2^n)
---------------------
SPACE:
I think the space complexity is O(N*2^N). I know there are 2^N subsets for the length of N, but every subset needs O(N) to store. So the total space should be O(N*2^N).

For recursion: max depth the call stack is going to reach at any time is length of nums, n.

For output: we're creating 2^n subsets where the average set size is n/2 (for each A[i], half of the subsets will 
include A[i], half won't) = n/2 * 2^n = O(n * 2^n). Or in a different way, the total output size is going to be the 
summation of the binomial coefficients, the total number of r-combinations we can make at each r size * r elements 
from 0..n which evaluates to n*2^n. More informally, at size 0, how many empty sets can we make from n elements, 
then at size 1 how many subsets of 1 elements can we make from n elements, at size 2, how many subsets of 2 elements 
can we make ... at size n, etc.

So total is call stack of n + output of n2^n = O(n2^n). If we don't include the output (eg if just asked to print in an 
interview) then just O(n) of course.
*/
--------------------------------------------------------------------------------------------------
/*
Image of the problem explanation: 
https://leetcode.com/problems/subsets/discuss/27281/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)/139968

https://leetcode.com/problems/subsets/discuss/27281/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)/26331
*/
-------------------------------------------------------------------------------------------------------
/* NO BACKTRACKING BULLSHIT - BFS RECURSIVE

The best and easy BFS solutiomn. But, this solution works only for this subset problem and is not a pattern
While iterating through all numbers, for each new number, we can either pick it or not pick it
1, if pick, just add current number to every existing subset.
2, if not pick, just leave all existing subsets as they are.
We just combine both into our result.

For example, {1,2,3} intially we have an emtpy set as result [ [ ] ]
Considering 1, if not use it, still [ ], if use 1, add it to [ ], so we have [1] now
Combine them, now we have [ [ ], [1] ] as all possible subset

Next considering 2, if not use it, we still have [ [ ], [1] ], if use 2, just add 2 to each previous subset, we have [2], [1,2]
Combine them, now we have [ [ ], [1], [2], [1,2] ]

Next considering 3, if not use it, we still have [ [ ], [1], [2], [1,2] ], if use 3, just add 3 to each previous subset, we have [ [3], [1,3], [2,3], [1,2,3] ]
Combine them, now we have [ [ ], [1], [2], [1,2], [3], [1,3], [2,3], [1,2,3] ]
*/

public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        result.add(new ArrayList<>());
        for(int n : nums){
            int size = result.size();
            for(int i=0; i<size; i++){
                List<Integer> subset = new ArrayList<>(result.get(i));
                subset.add(n);
                result.add(subset);
            }
        }
        return result;
    }
    
 ---------------------------------------------------------------------------------------------
 
