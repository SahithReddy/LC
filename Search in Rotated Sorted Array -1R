// This was my first working solution
/* QUESTION:
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1
*/

/* ALGORITHM: BINARY SEARCH

Initiate start to be equal to 0, and end to be equal to n - 1.

Perform standard binary search. While start <= end:

Take an index in the middle mid as a pivot.

If nums[mid] == target, the job is done, return mid.

Now there could be two situations:

Pivot element is larger than the first element in the array, i.e. the part of array from the first element to the pivot one
is non-rotated.

If the target is in that non-rotated part as well: go left: end = mid - 1.

Otherwise: go right: start = mid + 1.

Pivot element is smaller than the first element of the array, i.e. the rotation index is somewhere between 0 and mid. 
That means that the part of array from the pivot element to the last one is non-rotated.

If target is in that non-rotated part as well: go right: end = mid + 1.

Otherwise: go left: start = mid - 1.

We're here because the target is not found. Return -1.

*/

class Solution {
    public int search(int[] nums, int target) {
        if(nums.length==0) return -1;
        // if(nums.length==1) return 0;
            int start = 0;
            int end = nums.length-1;
        
        while(start <= end){
            int mid = start + (end-start)/2;
            if(target == nums[mid]) return mid;
            if(nums[mid]>=nums[start]){
                if(target>=nums[start] && target<nums[mid]) end = mid-1;
                else start = mid+1;
            }
            else{
                if(target>nums[mid] && target<=nums[end]) start = mid+1;
                else end=mid-1;
            }
            
        }
        return -1;
    }
}


// Time complexity : O(log(N)).
// Space complexity : O(1).



