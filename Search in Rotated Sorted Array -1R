// This was my first working solution
/* QUESTION:
You are given an integer array nums sorted in ascending order (with distinct values), and an integer target.

Suppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

If target is found in the array return its index, otherwise, return -1.

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1
 
Constraints:
1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is guaranteed to be rotated at some pivot.
-104 <= target <= 104
*/

/* ALGORITHM: BINARY SEARCH

Initiate start to be equal to 0, and end to be equal to n - 1.

Perform standard binary search. While start <= end:

Take an index in the middle mid as a pivot.

If nums[mid] == target, the job is done, return mid.

Now there could be two situations:

1. Pivot element is larger than the first element in the array, i.e. the subarray from the first element to the pivot
is non-rotated.

If the target is in that non-rotated part (target>=nums[start] && target<nums[mid]): go search left part: end = mid - 1.

Otherwise: go search right part: start = mid + 1.

2. Pivot element is smaller than the first element of the array, i.e..the subarray from the pivot to the last element is non-rotated.

If target is in that non-rotated part((target>nums[mid] && target<=nums[end])): go search right part: end = mid + 1.

Otherwise: go search left part: start = mid - 1.

We're here because the target is not found. Return -1.

*/

class Solution {
    public int search(int[] nums, int target) {
        if(nums.length==0) return -1;
        // if(nums.length==1) return 0;
            int start = 0;
            int end = nums.length-1;
        
        while(start <= end){
            int mid = start + (end-start)/2;
            if(target == nums[mid]) return mid;
            if(nums[mid]>=nums[start]){
                if(target>=nums[start] && target<nums[mid]) end = mid-1;
                else start = mid+1;
            }
            else{
                if(target>nums[mid] && target<=nums[end]) start = mid+1;
                else end=mid-1;
            }
            
        }
        return -1;
    }
}

// Time complexity : O(log(N)).
// Space complexity : O(1).



