//HashMap
class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashMap<Integer, Integer> duplicate = new HashMap<Integer, Integer>();
            for(int i=0; i< nums.length; i++){
                if(duplicate.containsKey(nums[i])){
                    return true;
                }
                else duplicate.put(nums[i],i);
            } return false;
    }
}
-----------------------------------------------------------------------------------------------------------------
//HashSet
class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashSet<Integer> duplicate = new HashSet<Integer>(nums.length);
            for(int i=0; i< nums.length; i++){
                if(duplicate.contains(nums[i])){
                    return true;
                }
                else duplicate.add(nums[i]);
            } return false;
    }
}
Time complexity : O(n)O(n). We do search() and insert() for nn times and each operation takes constant time.

Space complexity : O(n)O(n). The space used by a hash table is linear with the number of elements in it.
-------------------------------------------------------------------------------------------------------------
// Above solution in a much more simple way
class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        for(int i=0; i< nums.length-1; i++){
            if(nums[i]==nums[i+1]) return true;
        } return false;
    }
}

Time complexity : O(n \log n)O(nlogn). Sorting is O(n \log n)O(nlogn) and the sweeping is O(n)O(n). The entire algorithm is dominated by the sorting step, which is O(n \log n)O(nlogn).

Space complexity : O(1)O(1). Space depends on the sorting implementation which, usually, costs O(1)O(1) auxiliary space if heapsort is used.
-----------------------------------------------------------------------------------------------------------------
