// Crazy Logic and Problem. All about iteration and indexing

// https://leetcode.com/problems/spiral-matrix/solution/ - see the picture in the first comment 


// Solution is here in the main comment: https://leetcode.com/problems/spiral-matrix/discuss/20599/Super-Simple-and-Easy-to-Understand-Solution

// Watch this(slow but really good): https://www.youtube.com/watch?v=TmweBVEL0I0

/*
QUESTION:
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
*/

/* ALGORITHM:
This is a very simple and easy to understand solution. Take 4 variable pointers as below.
        int rowBegin = 0;
        int rowEnd = matrix.length-1;
        int colBegin = 0;
        int colEnd = matrix[0].length - 1;
I traverse right and increment rowBegin, 
then traverse down and decrement colEnd, 
then I traverse left and decrement rowEnd, and 
finally I traverse up and increment colBegin.

The only tricky part is that when I traverse left or up I have to check whether the row or col 
still exists to prevent duplicates.
*/

public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        
        List<Integer> res = new ArrayList<Integer>();
        
        if (matrix.length == 0) {
            return res;
        }
        
        int rowBegin = 0;
        int rowEnd = matrix.length-1;
        int colBegin = 0;
        int colEnd = matrix[0].length - 1;
        
        while (rowBegin <= rowEnd && colBegin <= colEnd) {
            // Traverse Right
            for (int j = colBegin; j <= colEnd; j ++) {
                res.add(matrix[rowBegin][j]);
            }
            rowBegin++;
            
            // Traverse Down
            for (int j = rowBegin; j <= rowEnd; j ++) {
                res.add(matrix[j][colEnd]);
            }
            colEnd--;
            
            if (rowBegin <= rowEnd) {
                // Traverse Left
                for (int j = colEnd; j >= colBegin; j --) {
                    res.add(matrix[rowEnd][j]);
                }
            }
            rowEnd--;
            
            if (colBegin <= colEnd) {
                // Traver Up
                for (int j = rowEnd; j >= rowBegin; j --) {
                    res.add(matrix[j][colBegin]);
                }
            }
            colBegin ++;
        }
        
        return res;
    }
}

/*
Time Complexity: O(N), where N is the total number of elements in the input matrix. 
We add every element in the matrix to our final answer.

Space Complexity: O(1),Space complexity usually doesn't include the space required to return the results.
*/
