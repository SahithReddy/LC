Crazy explanation:

https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/discuss/296138/Java-solution-from-combination-perspective-with-best-explanation


class Solution {
    public int numPairsDivisibleBy60(int[] time) {
        if(time==null || time.length==0) return 0;
        int[] map = new int[60];
        int answer = 0;
        int n = time.length;
        for(int i=0; i< n; i++){
            int reminder = time[i]%60;
            map[reminder]++;
        }
        
        answer+= map[0] * (map[0]-1)/2;
        answer+= map[30] * (map[30]-1)/2;
        for(int i=1; i< 30; i++){
            answer+=map[i]*map[60-i];
        }
        return answer;
    }
}


TC: O(n)
SC: O(60) = O(1)
--------------------------------------------------------------------------
// Shorter version

class Solution
    public int numPairsDivisibleBy60(int[] time) {
        int[] mod = new int[60];
        for(int t : time) mod[t%60]++; //count the number of differnt modulation cases of divided by 60. 
        int res = 0;
        for(int i = 0; i <= 30; i++){//sum to 30 to avoid double counting
            if(i == 0 || i == 30) res += (mod[i])*(mod[i]-1)/2; //special case: modulation is 0 or 30. 
            else res += mod[i] * mod[60-i]; //general case
        }
        return res;
    }
}
