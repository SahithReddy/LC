/* QUESTION: 34. Find First and Last Position of Element in Sorted Array
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
*/

// https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/discuss/14734/Easy-java-O(logn)-solution

/*  ALGORITHM:
There must be two indices in the array. Which means, we can just simply apply to binary search twice(FindFirst and FindLast) to find each index of the target element.

==>What is the difference of these two search? I mean, how can you asure that you won't find the target in the same position?
if(nums[mid] == target) idx = mid; Look at this step after the if_else conditions are done. In FIndFirst, he makes idx move towards the lower index, and in FIndLast he makes it move towards the higher index. The loop doesn't exist even if the target is found, it moves to one end, (left==right) and then exits. It's really smart!
*/

class Solution {
    public int[] searchRange(int[] nums, int target) {
        
        int[] result = new int[2];
        result[0] = findFirst(nums,target);
        result[1] = findLast(nums,target);
        return result;
        
    }
    
    public int findFirst(int[] nums, int target){
        
        int result = -1;
        int low = 0;
        int high = nums.length - 1;

        while(low <= high){
            int mid = low + ((high-low)/2);

            if (nums[mid] < target){
                low = mid +1;
            } else if (nums[mid] > target){
                high = mid - 1;
            } else { // nums[mid] == target
                result = mid;

                // because nothing after mid can be the first occurance of target.
                // maybe mid is the first occurance , maybe not
                // so let's narrow the target for [0...mid-1] and find out
                
                high = mid - 1; 
            }
        }
        return result;
    }
    
        public int findLast(int[] nums, int target){
        
        int result = -1;
        int low = 0;
        int high = nums.length - 1;
        
        while(low <= high){
            int mid = low + (high-low)/2;
            
            if (nums[mid] < target){
                low = mid +1;
            } else if (nums[mid] > target){
                high = mid - 1;
            } else { // nums[mid] == target
                result = mid;
                // because nothing before mid can be the last occurance of target.
                // maybe mid is the last occurance , maybe not
                // so let's narrow the target for [mid+1...high] and find out
                
                low = mid + 1;
            }
        }
        return result;
    }
}


// TIME: O(logN) Space: O(1)
----------------------------------------------------
// Both can be combined using boolean flag and its readable also:

public int[] searchRange(int[] nums, int target) {
        int[] result = new int[2];
        result[0] = findFirstLast(nums, target, true);
        result[1] = findFirstLast(nums, target, false);
        return result;
    }
    
    private int findFirstLast(int[] nums, int target, boolean first) {
        int idx = -1;
        int start = 0;
        int end = nums.length - 1;

        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (target < nums[mid] || (first && target == nums[mid])) { 
                end = mid-1;
            }
            else {
                start = mid+1;
            }
            if(nums[mid] == target) idx = mid;
        }
        return idx;
    }
