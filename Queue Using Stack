// Used two Stacks
// From here in 1st comment: https://leetcode.com/problems/implement-queue-using-stacks/discuss/64288/Accepted-clean-Java-solution

// CODE: 
class MyQueue {
    Stack<Integer> s1;
    Stack<Integer> s2;
    /** Initialize your data structure here. */
    public MyQueue() {
        s1 = new Stack<>();
        s2 = new Stack<>();
    }
    
    // Push element x to the back of queue.
    public void push(int x) {
        s1.push(x);
    }
    
    // Removes the element from in front of queue and returns that element. //
    public int pop() {
        peek();
        return s2.pop();
    }
    
    // Get the front element. //
    public int peek() {
        if(s2.isEmpty()){
            while(!s1.isEmpty()){
                s2.push(s1.pop());
            }
        }
        return s2.peek();
    }
    
    // Returns whether the queue is empty.
    public boolean empty() {
        return (s1.isEmpty() && s2.isEmpty());    
        }
}

/*
Push - O(1) per operation, Space O(N) - We need additional memory to store the queue elements
Pop - O(1) , O(1) 
Empty - O(1), O(1)
Peek - O(1) per operation ammotized, worst case - O(N) Space O(1)
*/
