/*
In "Divide Chocolate" we want to find: Maximum of minimum total sweetness(sum)
In "Split Array Largest sum" we want to find: Minimum of maximum largest sum
*/

/* 410. Split Array Largest Sum

Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.

Note:
If n is the length of array, assume the following constraints are satisfied:

1 ≤ n ≤ 1000
1 ≤ m ≤ min(50, n)
Examples:

Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.

*/

/* ALGORITHM: BINARY SEARCH
----------- GENERIC APPROACH - GIVE IT FIRST-----------
It took me a while to understand what binary search was actually binary searching for. Now that I understand, it's actually pretty simple:

1. Set the search range between min=(largest single value) and max=(sum of all values).
The min starts there because we're looking for the sum of the largest group in the final set of groups. And no matter what groups you create, the largest sum of the subarray must be greater than or equal to the largest value in the original input array., so the largest group can't be smaller than that. (This assumes no negative numbers.)

2. Calculate the midpoint between min and max. This midpoint is the group size we're going to try out to see how well it performs.

3. Split the nums list into groups such that no group has a value larger than the chosen midpoint.
Note that we may end up with too many or too few groups. That's fine.

4. Compare the number of groups we created against the target m. If we created too many groups, we know the final answer must be between mid+1 and max. That's because we need fewer groups and the way to achieve fewer groups is to increase the allowed maximum sum in each group.

5. On the other hand, if the number of groups is too small, we know the final answer is between min and mid-1 because we need to increase the number of groups which means the target sum is something smaller than the one we used. This is actually also a possible answer assuming m is valid because you can always take any group and split it up to make more groups, so the mid value you targeted is at worst, higher than the real value.

6. On the third hand, if the number of groups is just right, we have a possible answer, so remember that answer. However, we should keep searching just in case there is a better answer. We're ultimately looking for smaller maximum sums, so the potentially better answer is between min and mid-1.

7. Repeat the process until there is nothing else to search. Then use the minimum value we found during the above process.

------EXPLANATION SPECIFIC TO CODE BUT DONT STRESS TOO MUCH-------
1. The answer is between maximum value of input array numbers and sum of those numbers.
2. Use binary search to approach the correct answer. We have l = max number of array; r = sum of all numbers in the              array;Every time we do mid = (l + r) / 2;
3. Use greedy to narrow down left and right boundaries in binary search.
  3.1 Cut the array from left.
  3.2 Try our best to make sure that the sum of numbers between each two cuts (inclusive) is large enough but still less than   mid.
  3.3 We'll end up with two results: either we can divide the array into more than m subarrays or we cannot.
  
    A. IF WE CAN, it means that the mid value we pick is too small because we've already tried our best to make sure each part holds as many non-negative numbers as we can but we still have numbers left. So, it is impossible to cut the array into m parts and make sure each parts is no larger than mid. We should increase m. This leads to l = mid + 1;
    B. IF WE CAN'T, it is either we successfully divide the array into m parts and the sum of each part is less than mid, or we used up all numbers before we reach m. Both of them mean that we should lower mid because we need to find the minimum one. This leads to r = mid - 1;

-------EXPLAIN THIS FOR SURE TO MAKE UNDERSTAND CODE--------
We can use Binary search to find the value x. Keeping a value mid = (left + right) / 2. If noLargerThanM() returns false, then we will search the range [mid + 1, right]; If noLargerThanM() returns true, then we will search [left, mid - 1].

For a given x, we can get the answer of noLargerThanM() using a greedy approach. Using an accumulator 'sum' to store the sum of the current processing subarray and a counter 'cnt' to count the number of existing subarrays. We will process the elements in the array one by one. For each element num, if sum + num <= x, it means we can add num to the current subarray without exceeding the limit. Otherwise, we need to make a cut here, start a new subarray with the current element num. This leads to an increment in the number of subarrays.

After we have finished the whole process, we need to compare the value cnt to the size limit of subarrays m. If cnt <= m, it means we can find a splitting method that ensures the maximum largest subarray sum will not exceed x. Otherwise, noLargerThanM() should be false.

----------DOUBT HOW IT RETURNS CORRECT VALUE---------------------------
==> Q. Why is the minimum value, that splits the array into m parts, guaranteed to be equal to sum formed by one of the subgroups?
A. Binary search finds the smallest mid that divide the array into m parts ,to meet the condition that sum of every parts are <= mid.
So the final mid definitely = largest sum of each parts.

A. Once mid gets you to a value that works, the binary search will keep going down till you can find the minimum value where this condition is met (i.e. m partitions). Any lower than this value and you will just have m-1 partitions, which won't work. So the binary search algorithm keeps pushing the mid value lower to just that right number where you barely make m partitions. This value has to be the sum of some contiguous elements of the array.

*/

public class Solution {
    public int splitArray(int[] nums, int m) {
        int l = 0, r = 0; // l = largest valie in nums; r = sum of all value in nums
        for (int n : nums) {
            if (n > l) l = n;
            r += n;
        }
        
        while (l <= r) {
            int mid = (l & r) + ((l ^ r) >>> 1);
            if (noLargerThanM(nums, mid, m)) { // if the number of subarrays is not larger than m, mid could be smaller
                r = mid - 1;
            } else { // if the number of subarrays is larger than m, mid should be larger.
                l = mid + 1;
            }
        }
        return l;
    }
    
    public boolean noLargerThanM(int[] nums, int target, int m) {
        int sum = 0, count = 1;
        for (int n : nums) {
            // here it is actually not from left to right, the order doesn't matter, it is easy to prove:
            // if a + b > t, c + d > t
            // then there is no way to put a + b + c + d in one array, that is to say,
            // it could be a + b + c > t, d > t
            // or a > t, b + c + d > t
            // it doesn't matter, the number of subarrays is still 2, which is equal to a+b>t, and c+d > t
            sum += n; 
            if (sum > target) { 
                // find a way to form subarray, as said before, it doesn't matter how to form the subarray
                // the number matters, which will not change according to the ways to form a subarray.
                sum = n;
                count++;
            }
            if (count > m) return false; // if count == m, we still have a chance to make mid smaller
        }
        return true;
    }
}

/* COMPLEXITY:
Time complexity : O(n * log(sum of array)). The binary search costs O(log(sum of array)), where sum of array is the sum of elements in nums. For each computation of F(x), the time complexity is O(n) since we only need to go through the whole array.

Space complexity : O(n). Same as the Brute Force approach. We only need the space to store the array.

*/




