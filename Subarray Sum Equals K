/* QUESTION: 560 Subarray Sum Equals K
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2

Example 2:
Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:
1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107

*/

/* BASIC NAIVE O(N^2) and Space O(1) Approach - Below has O(N) and Space O(N) approach

We can choose a particular startstart point and while iterating over the endend points, we can add the element corresponding to the endend point to the sum formed till now. Whenver the sumsum equals the required kk value, we can update the countcount value. We do so while iterating over all the endend indices possible for every startstart index. Whenver, we update the startstart index, we need to reset the sumsum value to 0.

*/

public class Solution {
    public int subarraySum(int[] nums, int k) {
        int count = 0;
        for (int start = 0; start < nums.length; start++) {
            int sum=0;
            for (int end = start; end < nums.length; end++) {
                sum+=nums[end];
                if (sum == k)
                    count++;
            }
        }
        return count;
    }
}

/*
Time complexity : O(n^2). We need to consider every subarray possible.

Space complexity : O(1). Constant space is used.
*/
---------------------------------------------------------

/* ALGORITHM: PreSum + HashMap<PreSum, Frequency>
We make use of a hashmap map which is used to store the cumulative sum upto all the indices possible as Key along with the number of times that same sum occurs as Value. 
We store the data in the form: (sum_i, no. of occurences of sum_i) 
We traverse over the array nums and keep on finding the cumulative sum. 
Every time we encounter a new sum, we make a new entry in the hashmap corresponding to that sum. 
If the same sum occurs again, we increment the count(Value) corresponding to that sum(Key) in the hashmap. 
Further, for every sum encountered, we also determine the number of times the sum sumâˆ’k has occured already, since it will determine the number of times a subarray with sum k has occured upto the current index. 
We increment the count by the same amount.

After the complete array has been traversed, the count gives the required result.
----------------------------------------
we know the key to solve this problem is SUM[i, j]. So if we know SUM[0, i - 1] and SUM[0, j], then we can easily get SUM[i, j]. To achieve this, we just need to go through the array, calculate the current sum and save number of all seen PreSum to a HashMap.
*/

public class Solution {
    public int subarraySum(int[] nums, int k) {
        // Edge cases
        if(nums.length == 0)    return 0;
        int count = 0, sum = 0;
        
         // Sliding window -- No, contains negative number
        // hashmap + preSum
        /*
            1. Hashmap<sum[0,i - 1], frequency>
            2. sum[i, j] = sum[0, j] - sum[0, i - 1]    --> sum[0, i - 1] = sum[0, j] - sum[i, j]
                   k           sum      hashmap-key     -->  hashmap-key  =  sum - k
            3. now, we have k and sum.  
                  As long as we can find a sum[0, i - 1], we then get a valid subarray
                 which is as long as we have the hashmap-key,  we then get a valid subarray
            4. Why don't map.put(sum[0, i - 1], 1) every time ?
                  if all numbers are positive, this is fine
                  if there exists negative number, there could be preSum frequency > 1
        */
        
        HashMap < Integer, Integer > map = new HashMap < > ();
	/* Below line we put map.put(0,1) because it is for those (sum - k) == 0 calculations which are valid subarrays but need to get counted. e.g. if k = 7 and sum = 7 (at second element for array is : 3, 4, 3, 8) at some iteration.....then sum - k = 0....this 0 will get counted in statement result += preSum.get(sum - k);
	*/
        map.put(0, 1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
	    // there exist a key, that [hashmap-key  =  sum - k]
            if (map.containsKey(sum - k))
                count += map.get(sum - k);
	/* Below code means that if sum exists in the hashmap as key, get its value and increment it by 1, else create a new entry in the hashmap for it and set its value to 1. since we can have negative numbers in the given array, it's possible that we may run into the same preSum again.
	*/
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
}
------------------------------------------------
/* EXAMPLE ILLISTRATION
Let's illustrate it with an example and questions:

nums = [1, 1, 1];
k = 2;
result = 0;

// loop
i = 0;
sum = 1;
map[sum] = map[1] = 1;
map[sum-k] = map[1-2] = null
result = 0;


// loop
i = 1;
sum = 2;
map[sum] = map[2] = 1;
map[sum-k] = map[2-2] = map[0] =  1 // we already init map[0] = 1;
result = 1;


// loop
i = 2;
sum = 3;
map[sum] = map[3] = 1;
map[sum-k] = map[3-2] = map[1] =  1
result = 2;

// so, result == 2
return result
*/
------------------------------------------------------------
/*
Complexity Analysis
Time complexity : O(n). The entire nums array is traversed only once.

Space complexity : O(n). Hashmap map can contain upto n distinct entries in the worst case.
*/
-----------------------------------------------------------------
/* FOLLOW-UP
Find the maximum number of non-overlapping subarrays whose sum equals to k.

Example 1:
Input: nums = [1, 1, 1], k = 2
Output: 1

Example 2:
Input: nums = [0, 0, 0, 0, 0], k = 0
Output: 5
*/

public static void main(String[] args) {
	int[] nums1 = { 1, 1, 1 };
	int k1 = 2;
	int[] nums2 = { 1, 1, 2, 1, 1, 1 };
	int k2 = 3;
	System.out.println(solve(nums1, k1));
	System.out.println(solve(nums2, k2));
}

private static int solve(int[] nums, int k) {
	int[] dp = new int[nums.length + 1];
	Map<Integer, Integer> map = new HashMap<>();
	map.put(0, 0);
	int sum = 0;
	for(int i=1;i<=nums.length;i++) {
		dp[i] = dp[i-1];
		sum += nums[i-1];
		map.put(sum, i);
		if(map.containsKey(sum - k)) {
			dp[i] = Math.max(dp[i], dp[map.get(sum - k) ] + 1);
		}
	}
	return dp[nums.length];
}











