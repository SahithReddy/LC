/* 560:
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].

*/

/* BASIC NAIVE O(N^2) and Space O(1) Approach - Below has O(N) and Space O(N) approach

We can choose a particular startstart point and while iterating over the endend points, we can add the element corresponding to the endend point to the sum formed till now. Whenver the sumsum equals the required kk value, we can update the countcount value. We do so while iterating over all the endend indices possible for every startstart index. Whenver, we update the startstart index, we need to reset the sumsum value to 0.

*/

public class Solution {
    public int subarraySum(int[] nums, int k) {
        int count = 0;
        for (int start = 0; start < nums.length; start++) {
            int sum=0;
            for (int end = start; end < nums.length; end++) {
                sum+=nums[end];
                if (sum == k)
                    count++;
            }
        }
        return count;
    }
}

/*
Time complexity : O(n^2). We need to consider every subarray possible.

Space complexity : O(1). Constant space is used.
*/
---------------------------------------------------------

/*
we make use of a hashmap map which is used to store the cumulative sum upto all the indices possible along with the number of times the same sum occurs. 
We store the data in the form: (sum_i, no. of occurences of sum_i) 
We traverse over the array nums and keep on finding the cumulative sum. 
Every time we encounter a new sum, we make a new entry in the hashmap corresponding to that sum. 
If the same sum occurs again, we increment the count corresponding to that sum in the hashmap. 
Further, for every sum encountered, we also determine the number of times the sum sumâˆ’k has occured already, since it will determine the number of times a subarray with sum k has occured upto the current index. 
We increment the count by the same amount.

After the complete array has been traversed, the count gives the required result.

*/

public class Solution {
    public int subarraySum(int[] nums, int k) {
        int count = 0, sum = 0;
        HashMap < Integer, Integer > map = new HashMap < > ();
        map.put(0, 1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum - k))
                count += map.get(sum - k);
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
}


/*
Complexity Analysis
Time complexity : O(n). The entire nums array is traversed only once.

Space complexity : O(n). Hashmap map can contain upto n distinct entries in the worst case.
*/













