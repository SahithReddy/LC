// https://leetcode.com/problems/min-stack/discuss/49010/Clean-6ms-Java-solution . - 4th comment here by UMN-HKC

class MinStack {

    /** initialize your data structure here. */
    private Node head;
    
    public void push(int x) {
        if(head==null){
            head = new Node(x,x,null);
        } else{
            head = new Node(x, Math.min(x, head.min), head);
        }
    }
    
    public void pop() {
        head = head.prev;
    }
    
    public int top() {
        return head.val;
    }
    
    public int getMin() {
        return head.min;
    }
    
    private class Node{
        int val;
        int min;
        Node prev;
        
        private Node(int val, int min, Node prev){
            this.val = val;
            this.min = min;
            this.prev = prev;
        }
    }
}

Q&A
can u track next min value after u pop current min value?
Sol: I think it can. Because all nodes stores the min from itself downwards. 
New nodes added to the head may have smaller values, but won't change the stored value down the stack

How do you keep track of min value if its popped?
Sol: Each node stores the min value at or below it.


// General using regular stack from here: 
https://leetcode.com/problems/min-stack/discuss/49014/Java-accepted-solution-using-one-stack


class MinStack {
    int min = Integer.MAX_VALUE;
    Stack<Integer> stack = new Stack<Integer>();
    public void push(int x) {
        // only push the old minimum value when the current 
        // minimum value changes after pushing the new value x
        if(x <= min){          
            stack.push(min);
            min=x;
        }
        stack.push(x);
    }

    public void pop() {
        // if pop operation could result in the changing of the current minimum value, 
        // pop twice and change the current minimum value to the last minimum value.
        if(stack.pop() == min) min=stack.pop();
    }

    public int top() {
        return stack.peek();
    }

    public int getMin() {
        return min;
    }
}

Also from 1st comment here:
https://leetcode.com/problems/min-stack/discuss/49031/Share-my-Java-solution-with-ONLY-ONE-stack


