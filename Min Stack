/*
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example 1:
Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2

Constraints:
Methods pop, top and getMin operations will always be called on non-empty stacks.
*/
--------------------------------------
/* ALGO: BUILDING CUSTOM STACK

Q&A
can u track next min value after u pop current min value?
Sol: I think it can. Because all nodes stores the min from itself downwards. 
New nodes added to the head may have smaller values, but won't change the stored value down the stack

How do you keep track of min value if its popped?
Sol: Each node stores the min value at or below it.
*/

// https://leetcode.com/problems/min-stack/discuss/49010/Clean-6ms-Java-solution . - 4th comment here by UMN-HKC
----------------------------------------
class MinStack {

    /** initialize your data structure here. */
    private Node head;
    
    public void push(int x) {
        if(head==null){
            head = new Node(x,x,null);
        } else{
            head = new Node(x, Math.min(x, head.min), head);
        }
    }
    
    public void pop() {
        head = head.prev;
    }
    
    public int top() {
        return head.val;
    }
    
    public int getMin() {
        return head.min;
    }
    
    private class Node{
        int val;
        int min;
        Node prev;
        
        private Node(int val, int min, Node prev){
            this.val = val;
            this.min = min;
            this.prev = prev;
        }
    }
}
------------------------------------------------------

/* General using regular stack from here: 
https://leetcode.com/problems/min-stack/discuss/49014/Java-accepted-solution-using-one-stack

Also from 1st comment here:
https://leetcode.com/problems/min-stack/discuss/49031/Share-my-Java-solution-with-ONLY-ONE-stack
*/

class MinStack {
    int min = Integer.MAX_VALUE;
    Stack<Integer> stack = new Stack<Integer>();
    public void push(int x) {
        // only push the old minimum value when the current 
        // minimum value changes after pushing the new value x
        if(x <= min){          
            stack.push(min);
            min=x;
        }
        stack.push(x);
    }

    public void pop() {
        // if pop operation could result in the changing of the current minimum value, 
        // pop twice and change the current minimum value to the last minimum value.
        if(stack.pop() == min) min=stack.pop();
    }

    public int top() {
        return stack.peek();
    }

    public int getMin() {
        return min;
    }
}

/*
Complexity Analysis:

Let n be the total number of operations performed.

Time Complexity : O(1) for all operations.

push(...): Checking the top of a Stack, comparing numbers, and pushing to the top of a Stack (or adding to the end of an Array or List) are all O(1) operations. Therefore, this overall is an O(1) operation.

pop(...): Popping from a Stack (or removing from the end of an Array, or List) is an O(1) operation.

top(...): Looking at the top of a Stack is an O(1)operation.

getMin(...): Same as above. This operation is O(1) because we do not need to compare values to find it. If we had not kept track of it on the Stack, and instead had to search for it each time, the overall time complexity would have been O(n).

Space Complexity : O(n)O(n).

Worst case is that all the operations are push. In this case, there will be O(2*n) =O(n) space used.
*/



