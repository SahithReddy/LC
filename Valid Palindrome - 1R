/* 125. Valid Palindrome
Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

Note: For the purpose of this problem, we define empty string as valid palindrome.

Example 1:

Input: "A man, a plan, a canal: Panama"
Output: true
Example 2:

Input: "race a car"
Output: false

Constraints:
s consists only of printable ASCII characters.
*/

public class Solution {
    public boolean isPalindrome(String s) {
        for (int start = 0, end = s.length()-1; start < end;) {
            if (!Character.isLetterOrDigit(s.charAt(start)))
                start++;
            else if (!Character.isLetterOrDigit(s.charAt(end)))
                end--;
            else if (Character.toLowerCase(s.charAt(start++)) != Character.toLowerCase(s.charAt(end--)))
                return false;
        }
        return true;
    }
}

/*
Time complexity : O(n), in length nn of the string. We traverse over each character at-most once, until the two pointers meet in the middle, or when we break and return early.

Space complexity : O(1). No extra space required, at all.

*/
------------------------------------------------------------------------------------------------------------
// Ugly, but works:

boolean isPalindrome(String s) {
  s = s.toLowerCase().replaceAll("\\W+", "");
  return s.equals(new StringBuilder(s).reverse().toString());
}

public class Solution {
    public boolean isPalindrome(String s) {
        String actual = s.replaceAll("[^A-Za-z0-9]", "").toLowerCase();
        String rev = new StringBuffer(actual).reverse().toString();
        return actual.equals(rev);
    }
}


