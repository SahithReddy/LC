class Solution {
    public boolean isPalindrome(String s) {
        int i=0;
        int j=s.length()-1;
        char[] c = s.toCharArray();
        while(i<j){
            if(!Character.isLetterOrDigit(c[i])) i++;
            else if(!Character.isLetterOrDigit(c[j])) j--;
            else if(Character.toLowerCase(c[i++]) != Character.toLowerCase(c[j--])) return false;
            
        } return true;
    }
}

Time : O(n) Space: O(n) - Character Array
This code is creating a new character array to store s for easy indexing, which uses O(n) space,
------------------------------------------------------------------------------------------------------------
// Nice Readability
public class Solution {
    public boolean isPalindrome(String s) {
        if (s.isEmpty()) {
        	return true;
        }
        int head = 0, tail = s.length() - 1;
        char cHead, cTail;
        while(head <= tail) {
        	cHead = s.charAt(head);
        	cTail = s.charAt(tail);
        	if (!Character.isLetterOrDigit(cHead)) {
        		head++;
        	} else if(!Character.isLetterOrDigit(cTail)) {
        		tail--;
        	} else {
        		if (Character.toLowerCase(cHead) != Character.toLowerCase(cTail)) {
        			return false;
        		}
        		head++;
        		tail--;
        	}
        }
        
        return true;
    }
}
Time : O(n) Space: O(1)
does not create new space for arrays and leverages charAt() method to index s, so the original code space complexity is O(1).
------------------------------------------------------------------------------------------------------------

