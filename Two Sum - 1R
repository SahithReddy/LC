class Solution {
    public int[] twoSum(int[] nums, int target) {
    int[] result = new int[2];
    Map<Integer,Integer> tooSum = new HashMap<Integer, Integer>();
        for(int i=0;i<nums.length; i++ ){
            if(tooSum.containsKey(target - nums[i])){
                result[0] = tooSum.get(target - nums[i]);
                result[1] = i;
                return result;
            }
            else tooSum.put(nums[i],i);
        }
    throw new IllegalArgumentException("No two sum solution");
    }
    ---------------------------------------------------------------------------------------------------------------------
    public int[] twoSum(int[] nums, int target) {
    int[] result = new int[2];
    Map<Integer,Integer> tooSum = new HashMap<Integer, Integer>();
        for(int i=0;i<nums.length; i++ ){
            if(tooSum.get(target - nums[i])!=null){
                result[0] = tooSum.get(target - nums[i]);
                result[1] = i;
                return result;
            }
            else tooSum.put(nums[i],i);
        }
    throw new IllegalArgumentException("No two sum solution");
    }
   ---------------------------------------------------------------------------------------------------------------------
    public int[] twoSum(int[] nums, int target) {
    Map<Integer,Integer> map = new HashMap<>();
        for(int i=0; i<nums.length; i++){

            int complement = target - nums[i];
            if(map.containsKey(complement){
                return new int [] {map.get(complement),i};
            }
            else map.put(nums[i],i);
        }
    throw new IllegalArgumentException("No two sum solution");
    }
   ---------------------------------------------------------------------------------------------------------------------
    
    public int[] twoSum(int[] nums, int target) {
    Map<Integer,Integer> map = new HashMap<>();
        for(int i=0; i<nums.length; i++){
            map.put(nums[i],i);
        }
        for(int i=0; i<nums.length; i++){
            int complement = target - nums[i];
            if(map.containsKey(complement) && map.get(complement)!= i){
                return new int [] {i,map.get(complement)};
            }
        }
    throw new IllegalArgumentException("No two sum solution");
    }
   ---------------------------------------------------------------------------------------------------------------------
    public int[] twoSum(int[] nums, int target) {
        for(int i=0; i<nums.length; i++){
            for(int j=0; j<nums.length; j++){
                if(nums[i] == target - nums[j]){
                   return new int[] {i,j};
                }
            }
        } 
    throw new IllegalArgumentException("No two sum solution");
    }
}
