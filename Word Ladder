// Video Solution : https://www.youtube.com/watch?v=vYYNp0Jrdv0

//https://leetcode.com/problems/word-search/discuss/27658/Accepted-very-short-Java-solution.-No-additional-space. -- First Comment
marked visited according to this post with a *

class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i =0; i< board.length; i++){
            for(int j=0; j<board[0].length; j++){
                if(board[i][j] == word.charAt(0) && helper(board, i, j, 0, word)) return true;
            }
        } return false;
    }
    public boolean helper(char[][] board, int i, int j, int index, String word){
        if(index == word.length()) return true;
        if(i<0 || i>=board.length || j<0 || j>=board[0].length || board[i][j]!=word.charAt(index)) return false;
        
        board[i][j]='*'; // marking it as visited
        
        boolean answer = helper(board, i+1, j, index+1, word) || helper(board, i-1, j, index+1, word) ||
            helper(board, i, j+1, index+1, word) || helper(board, i, j-1, index+1, word);
            // will return true as soon as a condition returned true, and the rest conditions are not even calculated. Hence it will not time-out.
        board[i][j] = word.charAt(index); // remove the visited mark, so that it can be visited again in the future
        return answer;
    } 
    
    
    // Space Compleixty: space is O(L) where L is the length of the word
    // Time Complexity: time is O(M * N * 4^L) where M*N is the size of the board and 
    we have 4^L for each cell because of the recursion. Of course this would be an upper bound.
    
    Also, it may be O(M * N * 3^L), cause we have a visited array and we never go back, so 3 directions.
}
