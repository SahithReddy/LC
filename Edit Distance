/* QUESTION:
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character

Example 1:
Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Example 2:
Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 
Constraints:
0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.

*/

/* NAIVE BRUTE FORCE - NOT RECOMMEDED/IMPLEMENTED BUT JUST TO SAY IT INITIALLY IN THE INTERVIEW
The naive approach would be to check for all possible edit sequences and choose the shortest one in-between. That would result in an exponential complexity and it's an overkill since we actually don't need to have all possible edit sequences but just the shortest one.
*/

/* ALGORITHM: DYNAMIC PROGRAMMING

*/

/* COMPLEXITY: 
Time complexity : O(mn) as it follows quite straightforward for the inserted loops.
Space complexity : O(mn) since at each step we keep the results of all previous computations.
*/
