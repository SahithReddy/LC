// just for record, I haven't done it yet.
/*
QUESTION:
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode dummy = new ListNode(-1);
        ListNode head = dummy;
        
        // iterate two list, add each position until 2 lists are finished && carry equals to 0
        while((l1 != null || l2 != null || carry != 0)){
            // is number1 finished?
            int digit1 = l1 != null ? l1.val : 0;
            
            // is number2 finished?
            int digit2 = l2 != null ? l2.val : 0;
            
            //Addition gping on here
            int sum = digit1 + digit2 + carry;
            
            carry = sum / 10; // quotient here
            
            ListNode nextNewNode = new ListNode(sum % 10); // reminder here
            
            // Moving on to next digit in the result
            head.next = nextNewNode;
            head = head.next;
            
            // Moving on to next digits in the given two lists
            if(l1 != null) l1 = l1.next;
            if(l2 != null) l2 = l2.next;
        }
        
        return dummy.next;
    }
}
/*
Time complexity : O(max(m,n)). Assume that m and n represents the length of l1 and l2 respectively, 
the algorithm above iterates at most max(m,n) times.

Space complexity : O(max(m,n)). The length of the new list is at most max(m,n)+1.
*/
