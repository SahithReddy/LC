/* QUESTION: https://leetcode.com/problems/longest-word-in-dictionary/

Given a list of strings words representing an English Dictionary, find the longest word in words that can be built one character at a time by other words in words. If there is more than one possible answer, return the longest word with the smallest lexicographical order.

If there is no answer, return the empty string.
Example 1:
Input: 
words = ["w","wo","wor","worl", "world"]
Output: "world"
Explanation: 
The word "world" can be built one character at a time by "w", "wo", "wor", and "worl".

Example 2:
Input: 
words = ["a", "banana", "app", "appl", "ap", "apply", "apple"]
Output: "apple"
Explanation: 
Both "apply" and "apple" can be built from other words in the dictionary. However, "apple" is lexicographically smaller than "apply".
*/

/* ALGORITHM:  THIS ONE IS A BRUTE FORCE WE CAN COME FRST. WE CAN SOLVE THIS USING TRIE AS IMPROVEMENT
Sort the words alphabetically, therefore shorter words always comes before longer words;
Along the sorted list, populate the words that can be built;
Any prefix of a word must comes before that word.

OFFICIAL SOLUTON HAS THIS:
Intuition:

For each word, check if all prefixes word[:k] are present. We can use a Set structure to check this quickly.

Algorithm:

Whenever our found word would be superior, we check if all it's prefixes are present, then replace our answer.

Alternatively, we could have sorted the words beforehand, so that we know the word we are considering would be the answer if all it's prefixes are present.
*/

class Solution {
    public String longestWord(String[] words) {
        Arrays.sort(words);
        Set<String> built = new HashSet<String>();
        String res = "";
        for (String w : words) {
            if (w.length() == 1 || built.contains(w.substring(0, w.length() - 1))) {
                res = w.length() > res.length() ? w : res;
                built.add(w);
            }
        }
        return res;
    }
}

/*
Complexity Analysis:
Time complexity : O(\sum w_i^2) where w_i
  is the length of words[i]. Checking whether all prefixes of words[i] are in the set is O(\sum w_i^2)
Space complexity : O(\sum w_i^2)to create the substrings.
*/

--------------------------------------------------------------------------
/*
Build a trie in the normal way, then do a dfs to find the longest continuous downward path from the root. 

Intuition:

As prefixes of strings are involved, this is usually a natural fit for a trie (a prefix tree.)

Algorithm:

Put every word in a trie, then depth-first-search from the start of the trie, only searching nodes that ended a word. Every node found (except the root, which is a special case) then represents a word with all it's prefixes present. We take the best such word.
*/

// https://leetcode.com/problems/longest-word-in-dictionary/discuss/112720/JAVA-16ms-(99)-%40-20180108-Trie%2BDFS%3A-clean-easy-explained-and-illustrated - Comment by hyongfan

class Solution {

    // define the R-way trie where R is a constant the denotes that the range
    // of alphabet that we are considering for this case
    private static final int R = 26;
    private TrieNode root;

    private static class TrieNode {
        private final TrieNode[] children;
        private String word;

        private TrieNode() {
            children = new TrieNode[R];
            word = null;
        }
    }

    private void insertWord(String word) {
        int len = word.length();
        TrieNode curr = root;
        char c;
        int idx;
        for (int i = 0; i < len; ++i) {
            c = word.charAt(i);
            idx = c - 'a';

            if (curr.children[idx] == null) {
                curr.children[idx] = new TrieNode();
            }

            curr = curr.children[idx];
        }

        curr.word = word;
    }

    private String findLongestWord(TrieNode root) {
        String rst = root.word == null ? "" : root.word;
        for (TrieNode child : root.children) {
            if (child == null || child.word == null) continue;
            String s = findLongestWord(child);
            if (s.length() > rst.length()) rst = s;
        }
        return rst;
    }


    public String longestWord(String[] words) {
        // initialize a new trie
        root = new TrieNode();

        // construct the trie based on input dictionary words
        for (String word : words) {
            insertWord(word);
        }

        // find the longest dictionary word in this trie according to given rules
        return findLongestWord(root);
    }
}

/*
Complexity Analysis

Time Complexity: O(\sum w_i), where w_i is the length of words[i]. This is the complexity to build the trie and to search it.

If we used a BFS instead of a DFS, and ordered the children in an array, we could drop the need to check whether the candidate word at each node is better than the answer, by forcing that the last node visited will be the best answer.

Space Complexity: O(\sum w_i) the space used by our trie.

*/
