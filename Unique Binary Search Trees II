// I start by noting that 1..n is the in-order traversal for any BST with nodes 1 to n. 
// So if I pick i-th node as my root, the left subtree will contain elements 1 to (i-1), and the right subtree 
// will contain elements (i+1) to n. I use recursive calls to get back all possible trees for left and right subtrees 
// and combine them in all possible ways with the root.


public List<TreeNode> generateTrees(int n) {
    return genTreeList(1,n);
}

private List<TreeNode> genTreeList (int start, int end) {
    List<TreeNode> list = new ArrayList<TreeNode>(); 
    if (start > end) {
        list.add(null);
    }
    for(int idx = start; idx <= end; idx++) {
        List<TreeNode> leftList = genTreeList(start, idx - 1);
        List<TreeNode> rightList = genTreeList(idx + 1, end);
        for (TreeNode left : leftList) {
            for(TreeNode right: rightList) {
                TreeNode root = new TreeNode(idx);
                root.left = left;
                root.right = right;
                list.add(root);
            }
        }
    }
    return list;
}
