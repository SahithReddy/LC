/*
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].

*/

/*
https://leetcode.com/problems/insert-interval/discuss/21600/Short-java-code

The above link has beautiful explanation visually and below comment has latest code with new method signatures
*/

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int []> result = new ArrayList();
        for(int[] i : intervals){
            if(newInterval == null || newInterval[0]> i[1]){
                result.add(i);
            }
            else if(i[0]>newInterval[1]){
                result.add(newInterval);
                result.add(i);
                newInterval = null;
            }
            else{
                newInterval[0] = Math.min(newInterval[0], i[0]);
                newInterval[1] = Math.max(newInterval[1], i[1]);
            }
        }
        if(newInterval!=null){
            result.add(newInterval);
        } return result.toArray(new int[0][]);
    }
} 
/*
Time complexity : O(N) since it's one pass along the input array.

Space complexity : O(N) to keep the output.
*/
