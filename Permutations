/* Question:  
Given a collection of distinct integers, return all possible permutations.

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
*/

// Solution here: https://leetcode.com/problems/permutations/discuss/18239/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partioning)

/* ALGORITHM: First See the Code - self Explanatory - if not understood then read description here
--->
To generate all possible permutations, we need to remove the least recently added element while we are going up the recursive call stack.
In the first iteration of the for loop we add all permutations, that start with nums[0]. Then, before we can begin building all permutations starting with nums[1], we need to clear the tempList (which currently contains permutations from the first iteration of the for loop) - that's exactly what tempList.remove(tempList.size() - 1) line does.

-->
cuz java "pass by reference", after you pass "tempList" in the recursion, the "tempList" are changed, when go back we must undo the change. For example, [] -> [1], we have to remove to undo the add behavior [1] -> []. Then we can [] -> [2]. Without remove, it will be [1] -> [1, 2]

-->It's a common backtracking pattern, choose --> explore --> unchoose

-->
tempList.remove(tempList.size() - 1);
This statement is used to remove the element whose all the subsets has been found.
Consider an example
Array -> {1,2,3}
when we start from 1st element i.e index 0
we add all the subsets of 1 by calling backtrack( list, temoList, i+1);
When it backtacks after adding all subsets of 1 the tempList Contains 1.
Now we need to remove it from list.
And get all the subsets of next element. (Observe all the subsets containg the currnt element and previous element have been added already.
*/


public List<List<Integer>> permute(int[] nums) {
   List<List<Integer>> list = new ArrayList<>(); //result
   backtrack(list, new ArrayList<>(), nums);
   return list;
}

private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums){
   // When a permutaiton will be of same length as input add it to result
   if(tempList.size() == nums.length){
      list.add(new ArrayList<>(tempList));
   } else{
      for(int i = 0; i < nums.length; i++){ 
         // element already exists, skip
         if(tempList.contains(nums[i])) continue;
         // place i-th integer first in the current permutation
         tempList.add(nums[i]);
         // use next integers to complete the permutations
         backtrack(list, tempList, nums);
         // see explanation above
         tempList.remove(tempList.size() - 1);
      }
   }
} 

/* TIME COMPLEXITY: 
First, I think the time complexity should be N x N!.

Initially we have N choices, and in each choice we have (N - 1) choices, and so on. Notice that at the end when adding the list to the result list, it takes O(N).
------->

Time Complexity: O(n*n!)

backtrack method is called n! times

e.g. [0,1,2]
in 1st iteration backtrack is called 3 times ( for 0,1,2 )
in 2nd iteration ( for 0 ) backtrack is called 2 times ( for 1,2 )
in 2nd iteration ( for 1 ) backtrack is called 2 times ( for 0,2 )
in 2nd iteration ( for 2 ) backtrack is called 2 times ( for 0,1 )
in 3rd iteration ( for 0,1 ) backtrack is called 1 times ( for 2 )
and so on.

So no. of times backtrack is called in above example is 3 * 2 * 1, which is 3!
for n elements, its n!

And for each of these n! times, the condition tempList.size() == nums.length will be true and a new ArrayList is created from existing ArrayList.. This is O(n) operation
new ArrayList<>(tempList)

So total time complexity is O(n*n!)

SPACE COMPLEXITY:  the space complexity should also be N x N! since we have N! solutions and each of them requires N space to store elements.
*/

/* LOGS of TempList
Permutations: [1,2,3] tempList of backtracking solution displayed here:
Before removal: 1
Before removal: 1 2
Before removal: 1 2 3
After removal: 1 2
After removal: 1
Before removal: 1 3
Before removal: 1 3 2
After removal: 1 3
After removal: 1
After removal:
Before removal: 2
Before removal: 2 1
Before removal: 2 1 3
After removal: 2 1
After removal: 2
Before removal: 2 3
Before removal: 2 3 1
After removal: 2 3
After removal: 2
After removal:
Before removal: 3
Before removal: 3 1
Before removal: 3 1 2
After removal: 3 1
After removal: 3
Before removal: 3 2
Before removal: 3 2 1
After removal: 3 2
After removal: 3
After removal:
*/


