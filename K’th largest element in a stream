// Oracle - Not yet Done

// Keep track of the k biggest elements in the minimum priority queue q. q.peek() is the answer.

/*We can build a MinHeap that contains only k largest elements.
On add:

compare a new element x with min to decide if we should pop min and insert x
take into account a case when heap_size is less than k
Construction is simply calling the add function N times.

Time complexity:

Construction: O(N * logK)
Adding: O(logK)
Additional memory:

O(K) (can be reduced to O(1) by reusing memory of the existing array)
Have fun!*/

class KthLargest {
     final PriorityQueue<Integer> q;
     final int k;
    public KthLargest(int k, int[] nums) {
        this.k = k;
        q = new PriorityQueue<Integer>(k);
        for (int a :nums) {
            add(a);
        }
    }
    
    public int add(int val) {
        q.offer(val);
        if (q.size() > k) {
            q.poll();
        }
        return q.peek();
    }
}
