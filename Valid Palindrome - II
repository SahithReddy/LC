/* 680:
Given a non-empty string s, you may delete at most one character. Judge whether you can make it a palindrome.

Example 1:
Input: "aba"
Output: True
Example 2:
Input: "abca"
Output: True
Explanation: You could delete the character 'c'.

*/

/* ALGO: 
Follow normal way (two pointers) to check if s is palindrome. When two chars are not equal, try to skip (pseudo delete) either left one or right one and continue checking.

Assuming i = 0, j = s.length() - 1;, s is a valid palindrome (as defined in the problem) if

1. there is only one pair of i, j such that s.charAt(i) != s.charAt(j)
after the different pair hit, we try removing i or j, the characters in middle should be a palindrome.
2. there is no pair of i, j such that s.charAt(i) != s.charAt(j)
*/

class Solution {
    public boolean validPalindrome(String s) {
        int b=0; 
        int e = s.length()-1;
        while(b<=e){
           if(s.charAt(b)==s.charAt(e)){
            b++;
            e--;
            }
            else return isPalindrome(s, b+1, e) || isPalindrome(s,b, e-1); // // delete char at left or right
        } return true;
    }
    
    public boolean isPalindrome(String s, int b, int e){
        while(b<=e){
            if(s.charAt(b)==s.charAt(e)){
            b++;
            e--;
            }
            else return false;
        } return true;
    }
}

// Time Complexity: O(N) where N is the length of the string. Each of two checks of whether some substring is a palindrome is O(N).

// Space Complexity: O(1) additional complexity. Only pointers were stored in memory.
