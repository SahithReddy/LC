// Idea is simple. Build a array of list to be buckets
Excellent Video Explanation: https://www.youtube.com/watch?v=flZ0hwcJetc

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        int maxFreq=0;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int n : nums){
            int freq = map.getOrDefault(n,0)+1;
            map.put(n, freq);
            maxFreq = Math.max(maxFreq, freq);
        }
        
        List<Integer>[] bucket = new List[maxFreq+1];
        for(int key : map.keySet()){
            int freq = map.get(key);
            if(bucket[freq]==null){
                bucket[freq] = new ArrayList();
            }
            bucket[freq].add(key);
        }
        
        List<Integer> result = new ArrayList();
        for(int i=bucket.length-1; i>=0 && k>0; i--){
            if(bucket[i]!=null){
                result.addAll(bucket[i]);
            }
        } return result.subList(0,k);
    }
}

Timne: O(n) Space: O(n)

Similar Questions: Top K Frequent Words, Sort Characters By Frequency
-----------------------------------------------------------------------------------------------
// If you use  Min Heap instead of Max Heap. SO that Time complexity remains at NlogK where K is the heap size and N is the array size.
For maxheap both would be N. and complexity id NlogN.
 K and N different But Big-O doesn't care that k<=n. Constant factors are not relevant to the complexity analysis. 
 
 //however implementing maxHeap
 
 class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i : nums){
            map.put(i, map.getOrDefault(i, 0)+1);
        }
        
        PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>((a,b) -> (b.getValue() - a.getValue()));
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            pq.add(entry);
        }
        
        List<Integer> result = new ArrayList<Integer>();
        while(result.size()<k){
            Map.Entry<Integer, Integer> entry = pq.poll();
            result.add(entry.getKey());
        }
        return result;
    }
}
