/* 1146. Snapshot Array
Implement a SnapshotArray that supports the following interface:

SnapshotArray(int length) initializes an array-like data structure with the given length.  Initially, each element equals 0.
void set(index, val) sets the element at the given index to be equal to val.
int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.
int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id
 

Example 1:
Input: ["SnapshotArray","set","snap","set","get"]
[[3],[0,5],[],[0,6],[0,0]]

Output: [null,null,0,null,5]

Explanation: 
SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3
snapshotArr.set(0,5);  // Set array[0] = 5
snapshotArr.snap();  // Take a snapshot, return snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5
 

Constraints:
1 <= length <= 50000
At most 50000 calls will be made to set, snap, and get.
0 <= index < length
0 <= snap_id < (the total number of times we call snap())
0 <= val <= 10^9

*/

/* HASHMAP:

---------INTUITON----------------
Instead of copy the whole array, we can only record the changes of set.

The idea is, the whole array can be large, and we may take the snap tons of times.(Like you may always ctrl + S twice)

Instead of record the history of the whole array, we will record the history of each cell.
And this is the minimum space that we need to record all information.

For each A[i], we will record its history.With a snap_id and a its value.

When we want to get the value in history, just search the time point.

---------ALGORITHM----------------

Essentially we are interested only in history of changes for the index, and it could be only few changes of one index. This means we need to lookup effectively value by index and save only those that changed. We can use Map for this, use index as key, value as a value.

We keep such map for every snapshot, each consequence change will override previous value but this is perfectly fine - we care only about last value. We keep maps in a list, index of the element is a snapshot index.

On value lookup we start scanning list elements starting from the passed snapshot_id back to 0. Return first value for the index that we found - this means the most recent change up to this snapshot_id. If we haven't found anything it means there were no changes and we can return initial value which is 0 for all elements.

*/

class SnapshotArray {
    List<Map<Integer, Integer>> list;
    
    public SnapshotArray(int length) {
        list = new ArrayList();
        list.add(new HashMap());
    }
    
    public void set(int index, int val) {
        int snapId = list.size() - 1;
        list.get(snapId).put(index, val);
    }
    
    public int snap() {
        list.add(new HashMap());
        return list.size() - 2;
    }
    
    /*
    In method 1, we only store the difference since previous snapshot; Therefore, if the value only changed on 1st snapshot,       we would not get on current snap_id. Instead we have to go all way back to the search all previous snapshots. In case it       fails to find any value, return default value of 0.
    In other words, this is an incremental backup concept. If we can not find directly the index and value according to           snap_id, that means that the current snapshot is old. So we are supposed to find the latest snapshot from the now to the       past.
    */
    public int get(int index, int snap_id) {
        for (int snap = snap_id; snap >= 0; snap--) {
            if (list.get(snap).containsKey(index))
                return list.get(snap).get(index);
        }
        return 0;
    }
}

/* COMPLEXITY:
Time: O(1) for set - lookup for the map is O(1), put to the map is O(1) (average).
O(snap_id) for get() - we can potentially search up to snap_id snapshots (maps in our list), then O(1) for the lookup by index.
Space: Total cost O(n), where n is number of calls of set().

*/
---------------------------------------------
/* TREE MAP:

Q. what's the advantage of using TreeMap compared to HashMap?
A. TreeMap stores keys in sorted order. So you can do a binary search and get the floorKey in O(lgN)

*/

class SnapshotArray {
    private int count;
    private List<TreeMap<Integer, Integer>> shot = new ArrayList<>();
    
    public SnapshotArray(int length) {
        IntStream.range(0, length).forEach(i -> { shot.add(new TreeMap<>()); });
    }
    
    public void set(int index, int val) {
        shot.get(index).put(count, val);
    }
    
    public int snap() {
        return count++;
    }
    /*
    Q. why do we need to get the floorKey?
    A. If the value for the specified index has not updated on or before the snap_id, we use the old (or default 0) value.
    
    */
    public int get(int index, int snap_id) {
        Integer key = shot.get(index).floorKey(snap_id);
        return key == null ? 0 : shot.get(index).get(key);
    }
}


/*
Analysis:
Time: Instantiation cost O(length), each call of get()/set() cost O(log(count)), snap() O(1);
Space: Total cost O(length + count).
*/
