/* 349: QUESTION

Given two arrays(NOT SORTED), write a function to compute their intersection. Each element in the result must be unique. The result can be in any order.

Example 1:
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]

Example 2:
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]

Note:
Each element in the result must be unique.
The result can be in any order.

Cases to take into consideration include:
duplicates, negative values, single value lists, 0's, and empty list arguments.
Other considerations might include
sparse arrays.
 
*/
-----------------------------------------------------------------
// Using 1 hashset and time complexity of O(m+n)
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        HashSet<Integer> set = new HashSet<Integer>();
        ArrayList<Integer> res = new ArrayList<Integer>();
        //Add all elements to set from array 1
        for(int i =0; i< nums1.length; i++) set.add(nums1[i]);
        for(int j = 0; j < nums2.length; j++) {
           // If present in array 2 then add to res and remove from set 
           if(set.contains(nums2[j])) {
                res.add(nums2[j]);
                set.remove(nums2[j]);
            }
        }
        // Convert ArrayList to array
        int[] arr = new int[res.size()];
        for (int i= 0; i < res.size(); i++) arr[i] = res.get(i);
        return arr;
    }
}
----------------------------------------
/* COMPLEXITY:
Time complexity of O(n+m), where n and m are arrays' lengths. O(n) time is used to convert nums1 into set, O(m) time is used to convert nums2, and contains/in operations are O(1) in the average case.

Space complexity : O(n+m) in the worst case when all elements in the arrays are different.
*/
-------------------------------------------
/*ASSUMING, IF THE INPUT IS SORTED.
This is a Facebook interview question.
They ask for the intersection, which has a trivial solution using a hash or a set.

Then they ask you to solve it under these constraints:
O(n) time and O(1) space (the resulting array of intersections is not taken into consideration).
You are told the lists are sorted.

Cases to take into consideration include:
duplicates, negative values, single value lists, 0's, and empty list arguments.
Other considerations might include
sparse arrays.
*/

public int[] intersection(int[] nums1, int[] nums2) {
        Arrays.sort(nums1); // assume sorted
        Arrays.sort(nums2); // assume sorted
        
        int[] intersections = new int[nums1.length];
        
        int i1 = 0, i2 = 0, j=0;
        while (i1<nums1.length && i2<nums2.length) {
            int val1 = nums1[i1];
            int val2 = nums2[i2];
            
            if (val1 == val2) {
                intersections[j++]=val1;
                while (i1<nums1.length && val1 == nums1[i1]) i1++;
                while (i2<nums2.length && val2 == nums2[i2]) i2++;
            }
            if (val2 > val1) 
                while(i1<nums1.length && val1 == nums1[i1]) i1++;
            else 
                while(i2<nums2.length && val2 == nums2[i2]) i2++;

        }
        return Arrays.copyOf(intersections,j);
}

/*
TC: O(m+n)
SC: O(1)
*/
-----------------------------------------






