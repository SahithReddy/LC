/* QUESTION: 161. One Edit Distance
Given two strings s and t, determine if they are both one edit distance apart.

Note: 
There are 3 possiblities to satisify one edit distance apart:

Insert a character into s to get t
Delete a character from s to get t
Replace a character of s to get t

Example 1:

Input: s = "ab", t = "acb"
Output: true
Explanation: We can insert 'c' into s to get t.

Example 2:
Input: s = "cab", t = "ad"
Output: false
Explanation: We cannot get t from s by only one step.

Example 3:
Input: s = "1203", t = "1213"
Output: true
Explanation: We can replace '0' with '1' to get t.
*/
----------------------------------------------------------------------------------------------
/*Let the input strings be s1 and s2 and lengths of input 
strings be m and n respectively.

1) If difference between m an n is more than 1, 
     return false.
2) Initialize count of edits as 0.
3) Start traversing both strings from first character.
    a) If current characters don't match, then
       (i)   Increment count of edits
       (ii)  If count becomes more than 1, return false
       (iii) If length of one string is more, then only
             possible  edit is to remove a character.
             Therefore, move ahead in larger string.
       (iv)  If length is same, then only possible edit
             is to  change a character. Therefore, move
             ahead in both strings. 
*/

var isOneEditDistance = function(s, t) {
    const longer = s.length > t.length ? s : t;
    const shorter = s.length > t.length ? t : s;
    
    // If difference between m an n is more than 1, return false.
    if (longer.length - shorter.length > 1) {
        return false;
    }
    
    // Initialize count of edits as 0.
    let count = 0, i = 0, j = 0;
    // Start traversing both strings from first character.
    while (i < longer.length) {
        // If current characters don't match, then
        if (longer[i] !== shorter[j]) {
            // Increment count of edits
            count++;
            // If count becomes more than 1, return false
            if(count>1) return false;
            /* If length of one string is more, then only
             possible  edit is to remove a character.
             Therefore, move ahead in larger string.*/
            if (longer.length > shorter.length) {
            	i++;
            	continue;
            }
        }
        /*
        If length is same, then only possible edit
             is to  change a character. Therefore, move
             ahead in both strings. 
        */
        i++;
        j++;
    }
    
    return count === 1;
};
