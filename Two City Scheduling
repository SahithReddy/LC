/* QUESTION:
There are 2N people a company is planning to interview. The cost of flying the i-th person to city A is costs[i][0], and the cost of flying the i-th person to city B is costs[i][1].

Return the minimum cost to fly every person to a city such that exactly N people arrive in each city.

Example 1:
Input: [[10,20],[30,200],[400,50],[30,20]]
Output: 110

Explanation: 
The first person goes to city A for a cost of 10.
The second person goes to city A for a cost of 30.
The third person goes to city B for a cost of 50.
The fourth person goes to city B for a cost of 20.

The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.

*/

/* ALGORITHM:
Let's figure out how to sort the input here. The input should be sorted by a parameter which indicates a money lost for the company.

The company would pay anyway : price_A to send a person to the city A, or price_B to send a person to the city B. By sending the person to the city A, the company would lose price_A - price_B, which could negative or positive.

To optimize the total costs, let's sort the persons by price_A - price_B and then send the first n persons to the city A, and the others to the city B, because this way the company costs are minimal.

Now the algorithm is straightforward :

1. Sort the persons in the ascending order by price_A - price_B parameter, which indicates the company additional costs.

2. To minimise the costs, send n persons with the smallest price_A - price_B to the city A, and the others to the city B.

*/

class Solution {
    public int twoCitySchedCost(int[][] costs) {
        // Sort by a gain which company has by sending a person to city A and not to city B
        /*
        e.g. [[10,20],[30,200],[400,50],[30,20]] --> delta [-10, -170, 350, 10] --> sort [-170, -10, 10, 350] The smaller the         delta is, the better if we can with city A. take [30, 200] as example, 30-200 = -170 which tells us that we absolutely         wants to go with city A in this pair.
        */
        Arrays.sort(costs, (a, b) -> {
            return a[0] - a[1] - (b[0] - b[1]);
        });
        
        int sum = 0;
        for (int i = 0; i < costs.length; ++i) {
        // To optimize the company expenses, send the first half persons to the city A and the others to the city B
            if (i < costs.length / 2) {
                sum += costs[i][0];
            } else {
                sum += costs[i][1];
            }
        }
        return sum;
    }
}


/*
Time complexity : O(NlogN) because of sorting of input data.

Space complexity : O(1) since it's a constant space solution.
*/
