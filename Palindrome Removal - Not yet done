/*
Input: arr = [1,2]
Output: 2

Input: arr = [1,3,4,1,5]
Output: 3
Explanation: Remove [4] then remove [1,3,1] then remove [5].

Input : s = “2553432”
Output : 2
We can delete all character of above string in
2 steps, first deleting the substring s[3, 5] “343”  
and then remaining string completely  s[0, 3] “2552”

Input : s = “1234”
Output : 4
We can delete all character of above string in 4 
steps only because each character need to be deleted 
separately. No substring of length 2 is a palindrome 
in above string.
*/

/*

We can solve this problem using Dynamic programming. Let dp[i][j] denotes the number of steps it takes to delete the substring s[i, j]. Each character will be deleted alone or as part of some substring so in the first case we will delete the character itself and call subproblem (i+1, j). In the second case we will iterate over all occurrence of the current character in right side, if K is the index of one such occurrence then the problem will reduce to two subproblems (i+1, K – 1) and (K+1, j). We can reach to this subproblem (i+1, K-1) because we can just delete the same character and call for mid substring. We need to take care of a case when first two characters are same in that case we can directly reduce to the subproblem (i+2, j)

So after above discussion of relation among subproblems, we can write dp relation as follows,

dp[i][j] = min(1 + dp[i+1][j], dp[i+1][K-1] + dp[K+1][j], 1 + dp[i+2][j] ) where s[i] == s[K]

Below code is in Java with TC: O(n^3)

*/

// Java program to find minimum step to  
// delete a string 
public class GFG  
{                             
    /* method returns minimum step for deleting 
       the string, where in one step a 
       palindrome is removed 
     */
    static int minStepToDeleteString(String str) { 
        int N = str.length(); 
  
        // declare dp array and initialize it with 0s 
        int[][] dp = new int[N + 1][N + 1]; 
        for (int i = 0; i <= N; i++) 
            for (int j = 0; j <= N; j++) 
                dp[i][j] = 0; 
  
        // loop for substring length we are considering 
        for (int len = 1; len <= N; len++) { 
              
            // loop with two variables i and j, denoting 
            // starting and ending of substrings 
            for (int i = 0, j = len - 1; j < N; i++, j++) { 
      
                // If substring length is 1, then 1 step 
                // will be needed 
                if (len == 1) 
                    dp[i][j] = 1; 
                      
                else { 
                    // delete the ith char individually 
                    // and assign result for  
                    // subproblem (i+1,j) 
                    dp[i][j] = 1 + dp[i + 1][j]; 
  
                    // if current and next char are same, 
                    // choose min from current and  
                    // subproblem (i+2, j) 
                    if (str.charAt(i) == str.charAt(i + 1)) 
                        dp[i][j] = Math.min(1 + dp[i + 2][j],  
                                               dp[i][j]); 
  
                    /* loop over all right characters and  
                      suppose Kth char is same as ith  
                      character then choose minimum from  
                      current and two substring after  
                      ignoring ith and Kth char 
                     */
                    for (int K = i + 2; K <= j; K++) 
                        if (str.charAt(i) == str.charAt(K)) 
                            dp[i][j] = Math.min( 
                                         dp[i + 1][K - 1] + 
                                        dp[K + 1][j], dp[i][j]); 
                } 
            } 
        } 
  
        /* Uncomment below snippet to print actual dp tablex  
           
           for (int i = 0; i < N; i++){ 
           System.out.println();  
           for (int j = 0; j < N; j++)  
           System.out.print(dp[i][j] + " "); 
           } 
            */
              
        return dp[0][N - 1]; 
    } 
  
    // Driver code to test above methods 
    public static void main(String args[]) { 
        String str = "2553432"; 
        System.out.println(minStepToDeleteString(str)); 
    } 
} 


// This is the top solution in LC. Solution in C++. This is the best - if this asked - code it in C++

class Solution {
public:
    int minimumMoves(vector<int>& arr) {
        int n = arr.size();
        
        // dp[left][right] = the min move for arr[left]...arr[right] (both included).
        // the max number of move is n.
        vector<vector<int>> dp(n, vector<int>(n, n));
        
        // handle edge situation: subarray size == 1
        for(int i = 0; i < n; i++) { dp[i][i] = 1; }
        
        // handle edge situation: subarray size == 2
        for(int i = 0; i < n - 1; i++) { dp[i][i + 1] = arr[i] == arr[i + 1] ? 1 : 2; }
        
        // for subarray size >= 3:
        for(int size = 3; size <= n; size++) {
            for(int left = 0, right = left + size - 1; right < n; left++, right++) {
                
                // if arr[left] == arr[right], then the two number: arr[left] and arr[right] can be
                // removed when the last move of subarray arr[left + 1:right - 1]
                if(arr[left] == arr[right]) {
                    dp[left][right] = dp[left + 1][right - 1];
                }
                
                // or, if we cannot remove arr[left] and arr[right] in one move (the last move),
                // the subarray arr[left:right] must can be split into two subarrays
                // and remove them one by one.
                for(int mid = left; mid < right; mid++) {
                    dp[left][right] = min(dp[left][right], dp[left][mid] + dp[mid + 1][right]);
                }
            }
        }
        return dp[0][n - 1];
    }
};

// Time Complexity: O(N^3).
